{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/typescript/source/style.less","path":"style.less","modified":0,"renderable":1},{"_id":"themes/typescript/source/fonts/icomoon.eot","path":"fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/typescript/source/fonts/icomoon.ttf","path":"fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/typescript/source/fonts/icomoon.woff","path":"fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/typescript/source/fonts/icomoon.svg","path":"fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/typescript/source/images/algolia.svg","path":"images/algolia.svg","modified":0,"renderable":1},{"_id":"themes/typescript/source/fonts/selection.json","path":"fonts/selection.json","modified":0,"renderable":1},{"_id":"themes/typescript/source/images/google.svg","path":"images/google.svg","modified":0,"renderable":1},{"_id":"themes/typescript/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/typescript/source/images/azure.svg","path":"images/azure.svg","modified":0,"renderable":1},{"_id":"themes/typescript/source/images/baidu.svg","path":"images/baidu.svg","modified":0,"renderable":1},{"_id":"themes/typescript/source/js/jquery.fitvids.js","path":"js/jquery.fitvids.js","modified":0,"renderable":1},{"_id":"themes/typescript/source/js/app.js","path":"js/app.js","modified":1,"renderable":1},{"_id":"themes/typescript/source/images/logo.psd","path":"images/logo.psd","modified":0,"renderable":1},{"_id":"themes/typescript/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/typescript/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/about/index/about.jpg","path":"about/index/about.jpg","modified":0,"renderable":0},{"_id":"themes/typescript/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"source/images/about.jpg","path":"images/about.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/typescript/LICENSE","hash":"44409ab0bcd7853e2ac93faad84e57299711e6bf","modified":1477644908556},{"_id":"themes/typescript/_config.yml","hash":"c2da7fa3723ba8312791dc99b2e923f312f8fab6","modified":1478243804416},{"_id":"themes/typescript/README.md","hash":"b1aaa01fd75e54008da34b3173071b14e69cbcec","modified":1477644908556},{"_id":"source/_data/links.yml","hash":"7d77e7b4a8b43c912c1dc85e5d97c7e0cbd2d792","modified":1479903946260},{"_id":"source/.bak.git/COMMIT_EDITMSG","hash":"92beb40d1a86a6509c300d948703802d656b31c9","modified":1477820681538},{"_id":"source/.bak.git/FETCH_HEAD","hash":"47e9d57868816cca1e4b27428f29b2ccf22dc441","modified":1477821252276},{"_id":"source/.bak.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1477816105788},{"_id":"source/.bak.git/config","hash":"c3545c895d69d910ee7f890518cb3206c62edbd1","modified":1477816203517},{"_id":"source/.bak.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1477816105788},{"_id":"source/.bak.git/index","hash":"94f09b34144764c8901025adb634f5e136b2507f","modified":1477820681538},{"_id":"source/about/index.md","hash":"75af9f70fff52c03b14e6c68de05447a102dd998","modified":1479904497524},{"_id":"source/_posts/2014-multi-university-training-contest-4.md","hash":"6ef5087cce3eaa56aaf3a13d607ae89fe2b4d025","modified":1424744162566},{"_id":"source/_posts/ASP-NET-MVC4note2.md","hash":"7c43793e82be6425b4dfe4448f9cdf798f150cd3","modified":1424919690233},{"_id":"source/_posts/_hello-world.md","hash":"4b19b2eee463ff0da9b094340925006bb63d53dd","modified":1424595386090},{"_id":"source/_posts/_tired.md","hash":"67e22ed6c17f9c67561f78a8eb2cf8aa310aa6c2","modified":1424623596651},{"_id":"source/_posts/acm-international-collegiate-programming-contest-asia-regional-contest-tokyo-problem-d-space-golf.md","hash":"0f997dfc70f3f6b886369816ff3ed03962d2b9f0","modified":1424918579262},{"_id":"source/_posts/baylor6622-absurdistan-roads.md","hash":"a07326817f4432eadb36f4a340d0ee7bb25c596f","modified":1424918632917},{"_id":"source/_posts/dom-compatibility-note.md","hash":"7c3d789bc173c7d6beaf361927f2ef3ac7f662a4","modified":1484413425000},{"_id":"source/_posts/github-tips.md","hash":"f5d381b2bdef0b49ffa07613038328a65352b571","modified":1424919655944},{"_id":"source/_posts/fft-thoughts.md","hash":"98def161fb35d160ff87eedc227980faf5954868","modified":1424918663538},{"_id":"source/_posts/hdu-4945-2048.md","hash":"d33dc04c3d0f81fa0b30406208fb6b28858507a7","modified":1424918839640},{"_id":"source/_posts/ASP-NET-MVC4-note1-Simplemembership.md","hash":"4be2b9b09a1957a2a51a7e41921acbe0451760fa","modified":1424919711452},{"_id":"source/_posts/hdu-4952-number-transformation.md","hash":"0717053af1f24008992d243c689eb5d3ee45aca9","modified":1424918862471},{"_id":"source/_posts/hdu4005-the-war.md","hash":"41ee81dcb5c4e2b54bbf55e59747b1cdc22dc3a7","modified":1424918732730},{"_id":"source/_posts/hdu4612-warm-up.md","hash":"cca548f3110aa89bbb34557072e30106b002d05e","modified":1424918773829},{"_id":"source/_posts/hdu-2874-connections-between-cities.md","hash":"0f529f14c59b0cc6dcb80a9c71098359b12da656","modified":1424918712706},{"_id":"source/_posts/hdu4944-fsfs-game.md","hash":"7d06e0686dd02d428cb028f9c48ecb409b49d426","modified":1424918800678},{"_id":"source/_posts/hdu4888-redraw-beautiful-drawings.md","hash":"63368c7520bc7910f514233f4dca4c06f4252b4a","modified":1424918784695},{"_id":"source/_posts/herbustluftwm-config.md","hash":"c77db683bfef3fc1564854e9bce20909f45b1d8c","modified":1424918956799},{"_id":"source/_posts/hdu-4965-fast-matrix-calculation.md","hash":"a73cc3965547ff2a585fb778273182fb22513963","modified":1424918883367},{"_id":"source/_posts/hexo-lightum-enhance.md","hash":"4e8963342c69de0c02ffc68d48bbaa315562ba24","modified":1425183774074},{"_id":"source/_posts/kde4-config.md","hash":"a86375501a54f5487b79621d5cd61f9047515964","modified":1424920188060},{"_id":"source/_posts/kde-to-mac.md","hash":"f155c9a7a3354f3214278757498b04fa8fd62114","modified":1479822392372},{"_id":"source/_posts/man-man-de.md","hash":"047934d7ba7f01001ecc405e9ed52a3c656ec301","modified":1479883707429},{"_id":"source/_posts/poj1330-nearest-common-ancestors.md","hash":"d8634402077c668122ca1da1fa729d39814592c2","modified":1424919381910},{"_id":"source/_posts/poj1989-distance-queries.md","hash":"2e63ce830a157c7e9c33fe3413d3a4ea75750031","modified":1424919396544},{"_id":"source/_posts/pygobject-tutorial-1.md","hash":"693ef038d2bc336053232d7bf5204361226a95ed","modified":1478610668258},{"_id":"source/_posts/shadowsocks-account.md","hash":"4b4d1894a3d5bc51d1bf8157f63c12308590a670","modified":1424919439089},{"_id":"source/_posts/show-kde4-again.md","hash":"1462a5901cd85f39c8827da42b7c2abc3d975518","modified":1424920170787},{"_id":"source/_posts/sublime-config-web.md","hash":"7c701480a5d017fef40f67cf3033cd315499492f","modified":1424919555783},{"_id":"source/_posts/test-asset.md","hash":"66af1fadacb781a181b65eb83635a3283d826177","modified":1479899865631},{"_id":"source/_posts/timus-1996-cipher-message-3-kmpfft.md","hash":"bdc09019f11fa62f65916108c8ceb7fc65a7471b","modified":1424919571872},{"_id":"source/_posts/wine-font-config.md","hash":"eee621d8c441919cba4110100ab71b1036b723ee","modified":1424919600850},{"_id":"source/_posts/xfce4-config.md","hash":"b2cb475d4edbe8624624452f514402a3244fd916","modified":1424920134374},{"_id":"source/_posts/zjnu2073-geasscode.md","hash":"31d7e4593123c189b20be891e73f0f14176f63fd","modified":1424919881520},{"_id":"source/_posts/zjnu2082.md","hash":"dc43f41decfeb211b4801d683f508323e2b27b6a","modified":1424919906512},{"_id":"source/_posts/zjnu2085.md","hash":"d70c610c59166e0e64a804c5039f562e101ec32a","modified":1424919924699},{"_id":"source/_posts/zoj-month-contest-d-determinant-and-matrix.md","hash":"145485e272404eeb4e20d006151946a04b9576a5","modified":1424919938050},{"_id":"source/_posts/hexo-speedup-instantclick.md","hash":"8874ee561a352434e778078e3a7b6d4f81e38d1a","modified":1479895125215},{"_id":"source/links/index.md","hash":"ae3812a926316512ae1c65e90a78a57a7f0c85e5","modified":1479905113592},{"_id":"source/tags/index.md","hash":"ac8676dab1f715e32fcab1ea0e7650990fcdf41a","modified":1479903806124},{"_id":"source/_posts/intro-of-fft.md","hash":"eb41faade6135ab3a8c3b95b0e5e75953613c0eb","modified":1424919131417},{"_id":"themes/typescript/layout/archive.ejs","hash":"3bfe8941632e008532d96b45a4e959ba433be761","modified":1477644908566},{"_id":"themes/typescript/layout/category.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1477644908566},{"_id":"themes/typescript/layout/index.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1477644908566},{"_id":"themes/typescript/layout/layout.ejs","hash":"546e16414a052f2c482b9dd1597c4159e4d0f2a3","modified":1484413883324},{"_id":"themes/typescript/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1477644908566},{"_id":"themes/typescript/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1477644908566},{"_id":"themes/typescript/layout/tag.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1477644908566},{"_id":"themes/typescript/source/style.less","hash":"006a22465cf3b52f67a07a89701a8edacb6ae5e1","modified":1477812631186},{"_id":"source/_posts/neutron-code.md","hash":"f6dd87f24700703d743b25eb0ee2eed219edc746","modified":1484414319772},{"_id":"source/.bak.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1477816105784},{"_id":"source/.bak.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1477816105784},{"_id":"source/.bak.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1477816105784},{"_id":"source/.bak.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1477816105784},{"_id":"source/.bak.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1477816105784},{"_id":"source/.bak.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1477816105784},{"_id":"source/.bak.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1477816105788},{"_id":"source/.bak.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1477816105788},{"_id":"source/.bak.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1477816105788},{"_id":"source/.bak.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1477816105788},{"_id":"source/.bak.git/logs/HEAD","hash":"63340587c9fe57f8a202b6eb5f90bc456fd56bb8","modified":1477820681538},{"_id":"themes/typescript/layout/_partial/archive.ejs","hash":"24f7c7fd7cb1f4dba31ab61f7b9b2c91fe4ce193","modified":1484413135620},{"_id":"themes/typescript/layout/_partial/article.ejs","hash":"9049ca545b09111d9d6fd52ab3b2bf20461c941f","modified":1477644908566},{"_id":"themes/typescript/layout/_partial/footer.ejs","hash":"3e40eac40c80993ac93752a9db361fd5163395ba","modified":1484415428678},{"_id":"themes/typescript/layout/_partial/head.ejs","hash":"2a35818cf9a45713fa9a97531fa976cfb48d4789","modified":1477814559937},{"_id":"themes/typescript/layout/_partial/header.ejs","hash":"7f1bce911d1774381ff7187ad4608b30ea820a0a","modified":1484416315288},{"_id":"themes/typescript/layout/_partial/loading.ejs","hash":"9c5721d5a5cff00860f2775b12dd73fe62375201","modified":1484406469217},{"_id":"themes/typescript/layout/_partial/post.ejs","hash":"ce90735a42277bfa566985be55cf7317faaea132","modified":1477644908566},{"_id":"themes/typescript/layout/_partial/scripts.ejs","hash":"31b4d61aec1853cc742b8ffd668c3f25ad6e624d","modified":1484408398117},{"_id":"themes/typescript/source/fonts/icomoon.eot","hash":"09e365cb1dfa85a63d0841b69c30020cff621dad","modified":1477644908566},{"_id":"source/.bak.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1477816105784},{"_id":"themes/typescript/source/fonts/icomoon.ttf","hash":"db33ccce951a88b6a08f147363ace84d20db93ae","modified":1477644908570},{"_id":"themes/typescript/source/fonts/icomoon.woff","hash":"c58f59e279dcc265fb43a0d8378b92064c120ce8","modified":1477644908570},{"_id":"themes/typescript/source/fonts/icomoon.svg","hash":"f3efaca04d1f812242163713838f30147abab693","modified":1477644908570},{"_id":"themes/typescript/source/images/algolia.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1477644908570},{"_id":"themes/typescript/source/fonts/selection.json","hash":"498b5ba0cafb2eb5fa20f9034527eb912fa41827","modified":1477644908570},{"_id":"themes/typescript/source/images/google.svg","hash":"66938eaaa4ff7c21ee6b7c3c5fefbc004ee6d7c9","modified":1477644908570},{"_id":"themes/typescript/source/images/logo.png","hash":"8cb99b2b28095d6fefd2d70f9b203da89894cd7b","modified":1477644908570},{"_id":"themes/typescript/source/images/azure.svg","hash":"d355a126d8d47647140022f32e755d41c5708474","modified":1477644908570},{"_id":"themes/typescript/source/images/baidu.svg","hash":"c8c111d40c97e0c662b0b12849702e7207feeee5","modified":1477644908570},{"_id":"themes/typescript/source/js/jquery.fitvids.js","hash":"57946a22c79654014eb00fb548f727d302221873","modified":1477644908573},{"_id":"themes/typescript/source/js/app.js","hash":"0b6f3fd1a78c32ce2d14f32b3eccc9da66f8a9c0","modified":1484420115485},{"_id":"themes/typescript/source/less/_archive.less","hash":"cf9b8d65a572b27a17fcd017b772c273fd256179","modified":1477644908573},{"_id":"themes/typescript/source/less/_base.less","hash":"d93a158b74c2134d1ed28de497420a2706352bc2","modified":1484406432473},{"_id":"themes/typescript/source/images/logo.psd","hash":"3b95ae5e8914af72154ece31d2a2401453decff3","modified":1477644908570},{"_id":"themes/typescript/source/less/_fonts.less","hash":"ce6108f218c1a0c3c22b2c11936063a5f29e1b32","modified":1477644908573},{"_id":"themes/typescript/source/less/_footer.less","hash":"01a2f76acb645eddad5dd4155d1959589a05377b","modified":1484415304114},{"_id":"themes/typescript/source/less/_main.less","hash":"c6db05b1d58b53cba246440c55ac0e785d3eaf8a","modified":1484414255920},{"_id":"themes/typescript/source/less/_normalize.less","hash":"02fe53286d071637534d5aa2c57c76c168c0d521","modified":1477644908573},{"_id":"themes/typescript/source/less/_pagination.less","hash":"aaae6df1ad64c67b552c68f1301f186e15e4dfbe","modified":1477644908573},{"_id":"themes/typescript/source/js/search.js","hash":"1fd7f5b716e36a432822c0af48f85cdb9c978f35","modified":1477644908573},{"_id":"themes/typescript/source/less/_header.less","hash":"031537bd0fe1f956b0968a195b0c77287710c247","modified":1484421464131},{"_id":"themes/typescript/source/less/_search.less","hash":"f224f34a234eca913c62e418721a5c640f42047c","modified":1484416654441},{"_id":"themes/typescript/source/js/jquery.min.js","hash":"e3dbb65f2b541d842b50d37304b0102a2d5f2387","modified":1477644908573},{"_id":"themes/typescript/source/less/_content.less","hash":"6bddf3b83c50bf4f0d15b718c21e14a7be263b4c","modified":1484414357693},{"_id":"source/.bak.git/objects/01/1a9a674741a732ec6196623a2fee8508d4f8bf","hash":"833c7776632ee9b5bb3071423976b6a40d7132e9","modified":1477816271575},{"_id":"source/.bak.git/objects/11/29ef9033fd1c5a525a6929a9ae2873b2b3ab42","hash":"332a6ebdb739147f1769642d2a8ac9f5a6dba8a5","modified":1477820681538},{"_id":"source/.bak.git/objects/31/e335894e651cc85ff26c10dcb971baaefafce7","hash":"87b8f3ec1e9f82fe15e58070baef8b7f2e386b7f","modified":1477816271578},{"_id":"source/.bak.git/objects/14/fb3836c0edf0020428791e63326815749255c9","hash":"e72eb540b86893342851a0460f9dd6029cd494fa","modified":1477820681538},{"_id":"source/.bak.git/objects/34/12f48c6576f598a3ef4a7017c3fd6a48d095be","hash":"947a3d2919025fb5c58bb1dfb3e0c38e09c8674f","modified":1477816271575},{"_id":"source/.bak.git/objects/3b/2afb4b3fdf5ca866640251ed314fda2aa5c317","hash":"7796122ecb00804c44ec423633de3ed015ea9397","modified":1477816271575},{"_id":"source/.bak.git/objects/7c/98af5f7f4148dde5205b16581a41dc0e879fc6","hash":"4f55106cf018ceff102dd9b1653e60cc3a9ade04","modified":1477821251856},{"_id":"source/.bak.git/objects/a4/0d2afd157d7ad877c157a4ea456f9810cac813","hash":"fc28c3c28f9cc4f46ed6b81304041f46ef40ac89","modified":1477816271575},{"_id":"source/.bak.git/objects/c0/90297cd2b7f49a1d710970dae43414af1f572b","hash":"4ea6abae0d813a0add2992f97514fd325b150872","modified":1477816347876},{"_id":"source/.bak.git/objects/ce/b632a9addef8e7da2f0a44cd7f66ac06df73ec","hash":"e6bd8f3fc98228205d86a1657f49c01bf87dbf89","modified":1477816271575},{"_id":"source/.bak.git/objects/e0/6b08bfdc6606866ff8da2b1a9a9fea004f5e7f","hash":"2e03064fb0017e1fd2cca26c04255cef2b8c3d1e","modified":1477821251853},{"_id":"source/.bak.git/objects/e7/dd5a2e95fcede79d7b953cc02c7fa463a32076","hash":"d929d9941ddba66564a040c808817bbabb9c1a93","modified":1477820681538},{"_id":"source/.bak.git/objects/ec/34cd27171255d8b5c4374504355572becacdce","hash":"1365aee775409efe73e6af826ef0486683d9a53d","modified":1477821251853},{"_id":"source/.bak.git/refs/heads/master","hash":"f228eb4ca5a9d28e29b38032eba1ae377cbd9db3","modified":1477820681538},{"_id":"source/.bak.git/objects/e3/39667a0c7260030b3311849151af884f32654b","hash":"f10247d559acf0886f5dd5126bb7f362523bdd75","modified":1477816347876},{"_id":"themes/typescript/demo/ghost-theme-typescript-screenshot.jpg","hash":"a112ee6b71690c52f37572a5a6093582e69d95bf","modified":1477644908563},{"_id":"source/about/index/about.jpg","hash":"5fe63645d5dc28c2e4eb42c6c4a7ff5641b111e3","modified":1479016830574},{"_id":"themes/typescript/source/images/avatar.png","hash":"2d139540b06dd4db3a63e77708b69b64ae625594","modified":1477644908570},{"_id":"source/.bak.git/refs/remotes/origin/master","hash":"bc4b4c0659d3032135fb2bf9c320437b698e92de","modified":1477821252273},{"_id":"source/.bak.git/logs/refs/heads/master","hash":"63340587c9fe57f8a202b6eb5f90bc456fd56bb8","modified":1477820681538},{"_id":"themes/typescript/demo/ghost-theme-typescript-screenshot.png","hash":"d77251051f0d783c84294f8eaac26f7650930eee","modified":1477644908563},{"_id":"source/.bak.git/logs/refs/remotes/origin/master","hash":"11ae3be59f30b2f0470cf376354742910156d615","modified":1477821252273},{"_id":"source/images/about.jpg","hash":"a97c9f444ad256f09c48bf94ffc84e0798dae790","modified":1479956473871},{"_id":"source/_posts/test-asset/test.jpg","hash":"d59ec236cb2f022c19e4167272446dc80d8ab351","modified":1468728794310},{"_id":"public/content.json","hash":"80de9b4ed743f40a79c29bc32da2cc9c2973e7b9","modified":1484395994617},{"_id":"public/search.xml","hash":"9e846657a8d2ca790715daf1755bb2f1596d8f4d","modified":1484395644456},{"_id":"public/about/index.html","hash":"6742475f1422b886aea5535d34a3609944306e3d","modified":1484402620650},{"_id":"public/links/index.html","hash":"74aea917b128df9f4e92a4f6207484669060d781","modified":1484402620651},{"_id":"public/tags/index.html","hash":"580ce00903a9cf506aa40add1a9f5c11cd042ddd","modified":1484402620651},{"_id":"public/2016/11/23/test-asset/index.html","hash":"31c5bd7c12e68827092af02f6981f776965b90aa","modified":1484402620652},{"_id":"public/2016/11/08/pygobject-tutorial-1/index.html","hash":"7d497fc105f68af551d82d5b1e73165067d6aa04","modified":1484402620652},{"_id":"public/2016/11/02/dom-compatibility-note/index.html","hash":"3b908d317dadb283369dd33b7544b170681ae7b6","modified":1484402620652},{"_id":"public/2015/02/24/shadowsocks-account/index.html","hash":"5777b3dcce2689857a5df87731dc77449454bf3f","modified":1484402620652},{"_id":"public/2015/02/24/ASP-NET-MVC4note2/index.html","hash":"f460ff5ddad496fe7d7dca025195abdd0cf7b181","modified":1484402620652},{"_id":"public/2015/02/14/show-kde4-again/index.html","hash":"2a898ae0c1ee55264a34c9905cdc3f94b6d39f00","modified":1484402620652},{"_id":"public/2014/11/28/man-man-de/index.html","hash":"8fe6a3ee38cab87dbedbaad98c1afa52aefa4e12","modified":1484402620652},{"_id":"public/2014/11/06/fft-thoughts/index.html","hash":"abe6a3366f84c317a22f526af573fd0b95701f10","modified":1484402620652},{"_id":"public/2014/11/05/intro-of-fft/index.html","hash":"2b1a2d37e02dbf489e3054e49b0ea31eb53895bd","modified":1484402620652},{"_id":"public/2014/10/31/kde4-config/index.html","hash":"04a9ca77bfb415408533bff6f89faed4894580ed","modified":1484402620652},{"_id":"public/2014/10/13/wine-font-config/index.html","hash":"e0edc02b9ef36cbd2f5789e49a01f8fafc9a9bcb","modified":1484402620652},{"_id":"public/2014/09/16/sublime-config-web/index.html","hash":"cd36569878e30dd79b348d87a438df553dccf745","modified":1484402620652},{"_id":"public/2014/09/16/xfce4-config/index.html","hash":"6796783d58e4a9548ab22183878e4502a6c1f670","modified":1484402620652},{"_id":"public/2014/08/14/herbustluftwm-config/index.html","hash":"5b63eff1d406d92c9e66c7a3ea2d16af54f38ec3","modified":1484402620652},{"_id":"public/2014/08/12/hdu4944-fsfs-game/index.html","hash":"eeda2ae89bc57e2ad4fc209b3912ce0a065e8d87","modified":1484402620653},{"_id":"public/2014/08/10/github-tips/index.html","hash":"06578c0d455ccb1b2f29be8e29373b185582cb46","modified":1484402620653},{"_id":"public/2014/07/31/2014-multi-university-training-contest-4/index.html","hash":"444ecd4a292273193aab6ae90a464864cf3a734b","modified":1484402620653},{"_id":"public/2014/07/30/hdu4005-the-war/index.html","hash":"c5f75862668337cb2ba813afd5164033720bc304","modified":1484402620653},{"_id":"public/archives/index.html","hash":"8516b72ac7af81e7f641c5f97d2fc5bdd02426d0","modified":1484402620653},{"_id":"public/archives/page/2/index.html","hash":"531011e6ed5764609462f5df543d4651d93e9915","modified":1484402620653},{"_id":"public/archives/page/3/index.html","hash":"76be621f6c3f16614126a40ae8e0bc1f7770c098","modified":1484402620653},{"_id":"public/archives/page/4/index.html","hash":"fabfec8b6780fd195c57dce77972cc771651b8cb","modified":1484402620653},{"_id":"public/archives/page/5/index.html","hash":"b9b238e38b935c38e3783ce2c7516dfb9f4e3379","modified":1484402620653},{"_id":"public/archives/page/6/index.html","hash":"ca3b096936883a5184cd0cf0a8793614dfcac6e7","modified":1484402620653},{"_id":"public/archives/page/7/index.html","hash":"ffb71eec0d8a285d1ce79ab699bfc8e84c93abec","modified":1484402620653},{"_id":"public/archives/page/8/index.html","hash":"94694ceea6f864718aa525cea554f12105574cd9","modified":1484402620653},{"_id":"public/archives/2014/index.html","hash":"748513b7c062c233ae436720f642fdb37d94c4b5","modified":1484402620653},{"_id":"public/archives/2014/page/2/index.html","hash":"15f883a48ae12aebe3eaf943108f9846a0f59952","modified":1484402620653},{"_id":"public/archives/2014/page/3/index.html","hash":"281008af2ce6c61a3f521360b5a4e6205f8e83d2","modified":1484402620653},{"_id":"public/archives/2014/page/4/index.html","hash":"ab3508e97c49ba115cd554f19276cf7c1cf41bb0","modified":1484402620653},{"_id":"public/archives/2014/page/5/index.html","hash":"aac829698846d1298295e420d4f3917df48c769a","modified":1484402620653},{"_id":"public/archives/2014/page/6/index.html","hash":"eb6f1134be12b1e53c04ddcf810c125bedc797e5","modified":1484402620653},{"_id":"public/archives/2014/07/index.html","hash":"f7c85697b9189dae28b5377f0707dddfdbc0fec7","modified":1484402620653},{"_id":"public/archives/2014/08/index.html","hash":"cd6d04acee2a156ebdcea9e1bb2b318937e429cf","modified":1484402620653},{"_id":"public/archives/2014/08/page/2/index.html","hash":"6992cdf8c5c6495a0cc83da2243411051e04408b","modified":1484402620653},{"_id":"public/archives/2014/08/page/3/index.html","hash":"29afc970df3ed12ae209ea780b205b4f73affbd6","modified":1484402620653},{"_id":"public/archives/2014/09/index.html","hash":"facae11504cba665c6ce0021c7cbc28546e46ad7","modified":1484402620653},{"_id":"public/archives/2014/10/index.html","hash":"62a8ec8c5e58c576a545a6ec38d312e69bf63534","modified":1484402620654},{"_id":"public/archives/2014/11/index.html","hash":"697194382b9e645910962b6fbb47d1345daa7496","modified":1484402620655},{"_id":"public/archives/2014/11/page/2/index.html","hash":"8868997322618fbf54f4c35773663390a88bc160","modified":1484402620655},{"_id":"public/archives/2014/12/index.html","hash":"8ebeb8712d7113fde3840a5f5956d4cccb18af28","modified":1484402620655},{"_id":"public/archives/2015/index.html","hash":"fc38b85d24a43472f522257dd83adc1bdfebf9be","modified":1484402620655},{"_id":"public/archives/2015/page/2/index.html","hash":"c2272fea914a56d56e7be6deaa330ec5b137df76","modified":1484402620655},{"_id":"public/archives/2015/02/index.html","hash":"dca1f2bef18a1603ad3cebb58a9190adbd8a3f56","modified":1484402620655},{"_id":"public/archives/2015/02/page/2/index.html","hash":"f35da26a101ae03b926a327763c82ad56d704099","modified":1484402620655},{"_id":"public/archives/2016/index.html","hash":"cbdb111f748f04e31536d8004c2835ad4412d983","modified":1484402620655},{"_id":"public/archives/2016/10/index.html","hash":"96f5e0125d6b6c75f3724abf381c65377b646421","modified":1484402620655},{"_id":"public/archives/2016/11/index.html","hash":"f20eae6dc4c2d38b758babc67d7790e5fce398d5","modified":1484402620655},{"_id":"public/categories/ACM/index.html","hash":"01fd2908429ef5a82395c1951a79d38455083368","modified":1484402620655},{"_id":"public/categories/ACM/page/2/index.html","hash":"a7e0c0968158eac796879a328d962dc0a7ee4feb","modified":1484402620655},{"_id":"public/categories/ACM/page/3/index.html","hash":"1f6854d95a02313adade10e0f60b2b6ab4ed7fef","modified":1484402620655},{"_id":"public/categories/ACM/page/4/index.html","hash":"e0853f2b30f796c044dd70dfdacb56e845f6fbaf","modified":1484402620655},{"_id":"public/categories/ASP-NET/index.html","hash":"6db1bd476ca3bf0d2b13e52f9e7cb087f1fb300a","modified":1484402620655},{"_id":"public/categories/Web/index.html","hash":"70664a9bb15a349c10800578fe04e66f0df30c35","modified":1484402620655},{"_id":"public/categories/Git/index.html","hash":"4a6206d75a6ce3b0d4633d1f4899978f4075a98f","modified":1484402620655},{"_id":"public/categories/WM/index.html","hash":"82628c842420a8ef7f5e6b4c2f24a51cf0178eed","modified":1484402620655},{"_id":"public/categories/Hexo/index.html","hash":"b6c5fa1aa91d29d52f6758e28a064a6453af171a","modified":1484402620656},{"_id":"public/categories/KDE/index.html","hash":"a831165fc2c8a889aaea04ef0dc8ce218d1bdb40","modified":1484402620656},{"_id":"public/categories/GFW/index.html","hash":"beb8dca2d3872dc76a0d9471afa427fbaf50ee74","modified":1484402620656},{"_id":"public/categories/Python/index.html","hash":"8cc7e5756d68f8fb9fe84c96e83a72177f01afd7","modified":1484402620656},{"_id":"public/categories/IDE-Editor/index.html","hash":"fbffb307e1a3bfe0b986f5268f139544dd7b635c","modified":1484402620656},{"_id":"public/categories/Wine/index.html","hash":"828a2a5f36f61f6213792dc0b335ef0b32592865","modified":1484402620656},{"_id":"public/categories/Xfce/index.html","hash":"5ba46a6e5e2e5f75cbcad28a7e10b6c6c12b008a","modified":1484402620656},{"_id":"public/page/2/index.html","hash":"ceef9ac971f56cf943fb4b9c7000e31ce9f53cb0","modified":1484402620656},{"_id":"public/page/3/index.html","hash":"3d363b18da4c9a009d73fbfc95ee0ee5a1c36d97","modified":1484402620656},{"_id":"public/page/4/index.html","hash":"b9766e055ab7a3ca112ec8b627903acbec665dc2","modified":1484402620656},{"_id":"public/page/5/index.html","hash":"b602fdee338933e1da8bc6dc0cfc7692e1188a2a","modified":1484402620656},{"_id":"public/page/6/index.html","hash":"5629f652fff198f15da736ea8ffa7b490719b3d3","modified":1484402620656},{"_id":"public/page/7/index.html","hash":"c16fdf974768ccb124cf197c6aa346e07ebee021","modified":1484402620656},{"_id":"public/page/8/index.html","hash":"70e5eb06d67dc6c6a076f1b154b8fde3a6deadd1","modified":1484402620656},{"_id":"public/tags/只言片语/index.html","hash":"50f35f7efb6f26aa9a05f0f3b54c9a76e93be03a","modified":1484402620656},{"_id":"public/tags/C/index.html","hash":"cea4566f89a07c919c7fc6039b545dfb844a08a0","modified":1484402620656},{"_id":"public/tags/asp-net-mvc4/index.html","hash":"634ea9445e12b13ef1e17dcdcc328ee919f2d321","modified":1484402620656},{"_id":"public/tags/暴力/index.html","hash":"fa72f43190f5de2c0148be6fd6bb4ae6f2889247","modified":1484402620656},{"_id":"public/tags/图论/index.html","hash":"e849087fa44aa779c4e79c6745323916fc05eb85","modified":1484402620656},{"_id":"public/tags/图论/page/2/index.html","hash":"dc537bfca508f62d6116339ceb55c27a91b2c716","modified":1484402620656},{"_id":"public/tags/javascirpt/index.html","hash":"7f428a236401fb1816756195e0f9be7b20b08536","modified":1484402620656},{"_id":"public/tags/dom/index.html","hash":"36207698042c465235d81a782ca5d0812865aaf8","modified":1484402620656},{"_id":"public/tags/html/index.html","hash":"7602a7729d9518c6f1438f6fd0a9fd8a72ea3e36","modified":1484402620656},{"_id":"public/tags/github/index.html","hash":"d86c3403e7db07a0fbad91c4ccf586aacebf5e5f","modified":1484402620656},{"_id":"public/tags/数论/index.html","hash":"4a52005a536942036fddcab65cf640f2c6f93b61","modified":1484402620656},{"_id":"public/tags/数论/page/2/index.html","hash":"6836f6c6a7f1faa406a0b4c168914161a9466ec8","modified":1484402620656},{"_id":"public/tags/DP/index.html","hash":"2877d4c76cc5f0234800e0f50d3b0307943b2d53","modified":1484402620656},{"_id":"public/tags/simplemembership/index.html","hash":"5c907ae45ccc9f20c54e92726739f493ee785989","modified":1484402620657},{"_id":"public/tags/tarjan/index.html","hash":"5fb8a080b09efecccc9c28351667800255977975","modified":1484402620657},{"_id":"public/tags/树的直径/index.html","hash":"583d4d4e036a81e39c8fe57c4cad41182fec844b","modified":1484402620657},{"_id":"public/tags/网络流/index.html","hash":"2c3c1bcbf9bafcd9f13bf766cb964323b76e37a7","modified":1484402620657},{"_id":"public/tags/linux/index.html","hash":"04ef597693a490e9e45e62f6f9b44d95ff897c03","modified":1484402620657},{"_id":"public/tags/linux/page/2/index.html","hash":"cff994b70962f2fcac7c104042976302f77f17b1","modified":1484402620657},{"_id":"public/tags/桌面/index.html","hash":"180657694eea6d607b2fd5ca9328cc70f5bbc21b","modified":1484402620658},{"_id":"public/tags/美化/index.html","hash":"6ecaaeb80781438e3311ba939d76257f7eeeb896","modified":1484402620659},{"_id":"public/tags/矩阵-暴力/index.html","hash":"5f244ed997f37b502427c8d8d8d8c6dd8237a963","modified":1484402620659},{"_id":"public/tags/DE-WM/index.html","hash":"232bc3e6a50204fe5cafd1996b31a0ecdc3b09ea","modified":1484402620659},{"_id":"public/tags/LCA/index.html","hash":"c2b6832a4bf045104380bf086e43680c57d9fb57","modified":1484402620659},{"_id":"public/tags/倍增/index.html","hash":"20e122e1c2b54b3e2761bd5508b52f395dbb745e","modified":1484402620659},{"_id":"public/tags/RMQ/index.html","hash":"ab8ff6e213a8e05a33e11fff3acfeb5d21bce642","modified":1484402620660},{"_id":"public/tags/python/index.html","hash":"f5075f7a0c8311d579ae69825f17b33f9db5e629","modified":1484402620660},{"_id":"public/tags/gtk/index.html","hash":"3ab42deec8bcbf7be2b4059ae5893785e6fc964e","modified":1484402620660},{"_id":"public/tags/shadowsocks/index.html","hash":"4a240947c2eff7dd05381286a677a6e803aa00c5","modified":1484402620660},{"_id":"public/tags/sublime-text/index.html","hash":"f351b4b2ea47995977ae033d2b8b65091f3ec0c9","modified":1484402620660},{"_id":"public/tags/组合/index.html","hash":"38a1753323567f99141d9c9eea3153796e3dddca","modified":1484402620660},{"_id":"public/tags/instantclick/index.html","hash":"2290d0de448c3702ba54c00de9b6948c279f4b4e","modified":1484402620660},{"_id":"public/tags/树形DP/index.html","hash":"3ed77b4cfa410332d4bd0abe3680bdd4e8b00dee","modified":1484402620660},{"_id":"public/tags/openstack/index.html","hash":"23d0d4559d5a6fc3ba27fec3b372293cacae948a","modified":1484402620665},{"_id":"public/tags/neutron/index.html","hash":"cddb2c4fe609aa9c7e889d70cec979fdb1b7b4c3","modified":1484402620666},{"_id":"public/2016/10/28/neutron-code/index.html","hash":"01a6214f1fd0c6c906033c3de7293541fec2989d","modified":1484402620666},{"_id":"public/2015/02/25/hexo-lightum-enhance/index.html","hash":"609a4f6d6470c2b0d1fc98d3b3a002d6aaf98a84","modified":1484402620666},{"_id":"public/2015/02/25/hexo-speedup-instantclick/index.html","hash":"cdf2e9a413ae749ace928da5828cefce571da3ef","modified":1484402620666},{"_id":"public/2015/02/24/ASP-NET-MVC4-note1-Simplemembership/index.html","hash":"b567542e7eaaf0748d0c041a076209818818398c","modified":1484402620666},{"_id":"public/2014/12/07/kde-to-mac/index.html","hash":"42f050ce3ba1ba27e83ed4c8b627bba39232ad26","modified":1484402620666},{"_id":"public/2014/11/07/zoj-month-contest-d-determinant-and-matrix/index.html","hash":"217995500d9666ec8a9dc400a250c591d1ee9ee7","modified":1484402620667},{"_id":"public/2014/11/06/baylor6622-absurdistan-roads/index.html","hash":"5f0644ac4365d53d9f7b8ef9e1054ae7a538cf08","modified":1484402620667},{"_id":"public/2014/11/05/timus-1996-cipher-message-3-kmpfft/index.html","hash":"2b7514a6b07af8082bd03934ab011b5d9d0f1e30","modified":1484402620667},{"_id":"public/2014/10/19/acm-international-collegiate-programming-contest-asia-regional-contest-tokyo-problem-d-space-golf/index.html","hash":"a925048876d15fa13b0048f51a48008e9c0ddd92","modified":1484402620667},{"_id":"public/2014/08/19/hdu-4965-fast-matrix-calculation/index.html","hash":"19a88ddd5d51328963d12868d819cab9ed17c18d","modified":1484402620667},{"_id":"public/2014/08/15/hdu-4952-number-transformation/index.html","hash":"d0ddea0cafacdac2bbb3e13eaa6772c57bcb6ba7","modified":1484402620668},{"_id":"public/2014/08/15/hdu-4945-2048/index.html","hash":"65a4714f1fe92d7292437e52596233b44616971e","modified":1484402620668},{"_id":"public/2014/08/13/hdu-2874-connections-between-cities/index.html","hash":"2ee159920c97e5f6ff1ad68aee0c6e11b0af9115","modified":1484402620668},{"_id":"public/2014/08/13/zjnu2085/index.html","hash":"406c3a068c93bf1b5c8041ac3b398c01433b9045","modified":1484402620668},{"_id":"public/2014/08/12/zjnu2082/index.html","hash":"69aa48760f57f758d9598b9c01b651885a4e2cce","modified":1484402620668},{"_id":"public/2014/08/01/zjnu2073-geasscode/index.html","hash":"2195c1dd826bf9d482b5c696676a8754b6b88f49","modified":1484402620668},{"_id":"public/2014/08/01/poj1989-distance-queries/index.html","hash":"19d053e863b1a181ed5dc89bd14ee3502e852449","modified":1484402620668},{"_id":"public/2014/08/01/poj1330-nearest-common-ancestors/index.html","hash":"d3bd35335df21d582c9967f84290ca5892953bd2","modified":1484402620668},{"_id":"public/2014/07/30/hdu4612-warm-up/index.html","hash":"211e0781c4b23e35afb0f5f478646c8d2a2352a0","modified":1484402620668},{"_id":"public/2014/07/29/hdu4888-redraw-beautiful-drawings/index.html","hash":"ae49fa6e4c8d9f09d9fcec98bc5387339c3359eb","modified":1484402620668},{"_id":"public/index.html","hash":"c7340896d62f39dfead672b262ba097fbcd5f11a","modified":1484402620669},{"_id":"public/fonts/icomoon.ttf","hash":"db33ccce951a88b6a08f147363ace84d20db93ae","modified":1484395644497},{"_id":"public/fonts/icomoon.eot","hash":"09e365cb1dfa85a63d0841b69c30020cff621dad","modified":1484395644497},{"_id":"public/fonts/icomoon.woff","hash":"c58f59e279dcc265fb43a0d8378b92064c120ce8","modified":1484395644499},{"_id":"public/fonts/icomoon.svg","hash":"f3efaca04d1f812242163713838f30147abab693","modified":1484395644500},{"_id":"public/images/algolia.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1484395644500},{"_id":"public/images/google.svg","hash":"66938eaaa4ff7c21ee6b7c3c5fefbc004ee6d7c9","modified":1484395644500},{"_id":"public/images/logo.png","hash":"8cb99b2b28095d6fefd2d70f9b203da89894cd7b","modified":1484395644500},{"_id":"public/images/azure.svg","hash":"d355a126d8d47647140022f32e755d41c5708474","modified":1484395644500},{"_id":"public/images/baidu.svg","hash":"c8c111d40c97e0c662b0b12849702e7207feeee5","modified":1484395644500},{"_id":"public/images/logo.psd","hash":"3b95ae5e8914af72154ece31d2a2401453decff3","modified":1484395644500},{"_id":"public/js/jquery.fitvids.js","hash":"57946a22c79654014eb00fb548f727d302221873","modified":1484395644527},{"_id":"public/js/app.js","hash":"69426ff578a138ab798b7ed24362bce3b6765723","modified":1484395644527},{"_id":"public/fonts/selection.json","hash":"c38f13105ee7c35a67476dd80eaa2ffd037c124b","modified":1484395644527},{"_id":"public/js/search.js","hash":"1fd7f5b716e36a432822c0af48f85cdb9c978f35","modified":1484395644527},{"_id":"public/js/jquery.min.js","hash":"e3dbb65f2b541d842b50d37304b0102a2d5f2387","modified":1484395644528},{"_id":"public/images/avatar.png","hash":"2d139540b06dd4db3a63e77708b69b64ae625594","modified":1484395644528},{"_id":"public/about/index/about.jpg","hash":"5fe63645d5dc28c2e4eb42c6c4a7ff5641b111e3","modified":1484395644528},{"_id":"public/style.css","hash":"0bd408bf622c6497952dd01546e10b3f88804a03","modified":1484395644716},{"_id":"public/images/about.jpg","hash":"a97c9f444ad256f09c48bf94ffc84e0798dae790","modified":1484395644716},{"_id":"public/2016/11/23/test-asset/test.jpg","hash":"d59ec236cb2f022c19e4167272446dc80d8ab351","modified":1484395644719},{"_id":"themes/typescript/source/less/_typo.less","hash":"6caf57cdc2c3d10998bc0297aa174511433c730b","modified":1484400164641},{"_id":"themes/typescript/layout/_partial/side.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484413740000}],"Category":[{"name":"ACM","_id":"cixx6u8mn0004wppv1phwscba"},{"name":"ASP.NET","_id":"cixx6u8mz000awppvd6cgmsco"},{"name":"Web","_id":"cixx6u8n7000mwppv5rp3sx42"},{"name":"Git","_id":"cixx6u8ne000uwppvhw59zwcx"},{"name":"WM","_id":"cixx6u8nq001awppvrijhn77n"},{"name":"Hexo","_id":"cixx6u8nw001hwppvahv9l6wl"},{"name":"KDE","_id":"cixx6u8o1001owppvvccx0vew"},{"name":"GFW","_id":"cixx6u8o80024wppv5o2xsa03"},{"name":"Python","_id":"cixx6u8ob002dwppv1ky9dnf8"},{"name":"IDE/Editor","_id":"cixx6u8oj002uwppvy1ontuws"},{"name":"Wine","_id":"cixx6u8ol0031wppvw0eihwjo"},{"name":"Xfce","_id":"cixx6u8oo0039wppv6qzc2v7x"}],"Data":[{"_id":"links","data":{"Frantic":{"link":"https://frantic1048.com/","avatar":"https://avatars1.githubusercontent.com/u/3102803?v=3&s=460","descr":"前端菊聚"},"Farseerfc":{"link":"https://farseerfc.me/","avatar":"https://farseerfc.me/images/avatar.jpg"},"KK":{"link":"https://ikk.me/"},"Hclmaster":{"link":"http://hclmaster.github.io/","avatar":"http://hclmaster.github.io/uploads/huiyuan.png"}}}],"Page":[{"title":"关于我","date":"2016-11-23T10:11:44.000Z","thumbnail":"/images/about.jpg","_content":"\n一个热衷于造轮子的少年，喜欢：\n- Python\n- 前端\n- Go\n\n同时我也喜欢：\n- Doctor Who\n- Chopin && Rachmaninov\n- 霹雳布袋戏\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2016-11-23 18:11:44\nthumbnail: /images/about.jpg\n---\n\n一个热衷于造轮子的少年，喜欢：\n- Python\n- 前端\n- Go\n\n同时我也喜欢：\n- Doctor Who\n- Chopin && Rachmaninov\n- 霹雳布袋戏\n","updated":"2016-11-23T12:34:57.524Z","path":"about/index.html","comments":1,"layout":"page","_id":"cixx6u8mf0000wppvp305xbhm","content":"<p>一个热衷于造轮子的少年，喜欢：</p>\n<ul>\n<li>Python</li>\n<li>前端</li>\n<li>Go</li>\n</ul>\n<p>同时我也喜欢：</p>\n<ul>\n<li>Doctor Who</li>\n<li>Chopin &amp;&amp; Rachmaninov</li>\n<li>霹雳布袋戏</li>\n</ul>\n","excerpt":"","more":"<p>一个热衷于造轮子的少年，喜欢：</p>\n<ul>\n<li>Python</li>\n<li>前端</li>\n<li>Go</li>\n</ul>\n<p>同时我也喜欢：</p>\n<ul>\n<li>Doctor Who</li>\n<li>Chopin &amp;&amp; Rachmaninov</li>\n<li>霹雳布袋戏</li>\n</ul>\n"},{"title":"友情链接","date":"2016-11-23T11:22:37.000Z","layout":"links","_content":"\nFuck","source":"links/index.md","raw":"---\ntitle: 友情链接\ndate: 2016-11-23 19:22:37\nlayout: links\n---\n\nFuck","updated":"2016-11-23T12:45:13.592Z","path":"links/index.html","comments":1,"_id":"cixx6u8mk0002wppvuu9mtark","content":"<p>Fuck</p>\n","excerpt":"","more":"<p>Fuck</p>\n"},{"title":"tags","date":"2016-11-23T12:22:44.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-23 20:22:44\nlayout: 'tags'\n---\n","updated":"2016-11-23T12:23:26.124Z","path":"tags/index.html","comments":1,"_id":"cixx6u8mr0006wppvuy3hu2n6","content":"","excerpt":"","more":""}],"Post":[{"title":"2014 Multi-University Training Contest 4","id":"36","date":"2014-07-31T11:09:32.000Z","_content":"心情就像倒数第二楼那样。\n\nCLJ，我也保证不打死你……\n\nPS:最后一楼朱大神还暴露了。","source":"_posts/2014-multi-university-training-contest-4.md","raw":"title: 2014 Multi-University Training Contest 4\ncategories:\n  - ACM\nid: 36\ndate: 2014-07-31 19:09:32\ntags: 只言片语\n---\n心情就像倒数第二楼那样。\n\nCLJ，我也保证不打死你……\n\nPS:最后一楼朱大神还暴露了。","slug":"2014-multi-university-training-contest-4","published":1,"updated":"2015-02-24T02:16:02.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8mg0001wppvs051ofou","content":"<p>心情就像倒数第二楼那样。</p>\n<p>CLJ，我也保证不打死你……</p>\n<p>PS:最后一楼朱大神还暴露了。</p>\n","excerpt":"","more":"<p>心情就像倒数第二楼那样。</p>\n<p>CLJ，我也保证不打死你……</p>\n<p>PS:最后一楼朱大神还暴露了。</p>\n"},{"title":"ASP.NET MVC 4笔记（二）","date":"2015-02-24T02:50:00.000Z","_content":"1. 有Timestamp修饰的表在修改已有的记录是一定要将该字段复制，也就是说一定要在Edit网页里面添加一行：\n\t\t@Html.HiddenFor(model => model.RowVersion)\n2. WebSecurity.CreateAccount必须在Userprofile里面先创建账户。\n\t\tSystem.Diagnostics.Debug.WriteLine(\"OnAction:\" + controller + \"/\" + action);\n3. 转换string数组到int数组\n\t\tint[] HostsList = Array.ConvertAll<string, int>(Request[\"HostsId\"].Split(','), u => int.Parse(u));","source":"_posts/ASP-NET-MVC4note2.md","raw":"title: ASP.NET MVC 4笔记（二）\ntags:\n  - C#\n  - asp.net mvc4\ncategories:\n  - ASP.NET\ndate: 2015-02-24 10:50:00\n---\n1. 有Timestamp修饰的表在修改已有的记录是一定要将该字段复制，也就是说一定要在Edit网页里面添加一行：\n\t\t@Html.HiddenFor(model => model.RowVersion)\n2. WebSecurity.CreateAccount必须在Userprofile里面先创建账户。\n\t\tSystem.Diagnostics.Debug.WriteLine(\"OnAction:\" + controller + \"/\" + action);\n3. 转换string数组到int数组\n\t\tint[] HostsList = Array.ConvertAll<string, int>(Request[\"HostsId\"].Split(','), u => int.Parse(u));","slug":"ASP-NET-MVC4note2","published":1,"updated":"2015-02-26T03:01:30.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8ml0003wppvzjvsf4nk","content":"<ol>\n<li>有Timestamp修饰的表在修改已有的记录是一定要将该字段复制，也就是说一定要在Edit网页里面添加一行：<pre><code>@Html.HiddenFor(model =&gt; model.RowVersion)\n</code></pre></li>\n<li>WebSecurity.CreateAccount必须在Userprofile里面先创建账户。<pre><code>System.Diagnostics.Debug.WriteLine(&quot;OnAction:&quot; + controller + &quot;/&quot; + action);\n</code></pre></li>\n<li>转换string数组到int数组<pre><code>int[] HostsList = Array.ConvertAll&lt;string, int&gt;(Request[&quot;HostsId&quot;].Split(&apos;,&apos;), u =&gt; int.Parse(u));\n</code></pre></li>\n</ol>\n","excerpt":"","more":"<ol>\n<li>有Timestamp修饰的表在修改已有的记录是一定要将该字段复制，也就是说一定要在Edit网页里面添加一行：<pre><code>@Html.HiddenFor(model =&gt; model.RowVersion)\n</code></pre></li>\n<li>WebSecurity.CreateAccount必须在Userprofile里面先创建账户。<pre><code>System.Diagnostics.Debug.WriteLine(&quot;OnAction:&quot; + controller + &quot;/&quot; + action);\n</code></pre></li>\n<li>转换string数组到int数组<pre><code>int[] HostsList = Array.ConvertAll&lt;string, int&gt;(Request[&quot;HostsId&quot;].Split(&apos;,&apos;), u =&gt; int.Parse(u));\n</code></pre></li>\n</ol>\n"},{"title":"ACM International Collegiate Programming Contest Asia Regional Contest, Tokyo Problem D Space Golf","date":"2014-10-19T13:20:03.000Z","_content":"原题pdf：[click here](http://judge.u-aizu.ac.jp/onlinejudge/contest/ICPCOOC2014/D.pdf)\n<br/>\n\n- - -\n\n日本的亚洲区域赛真心简单啊。两个小时就刷了5题有余了。排名第一的队伍才做出7道。\n\n题目真心长的可以了，看了半个小时才明白。。\n\n题意其实也就是太空中向前方抛小球，问小球能够穿过N个障碍物后到达制定地点的最小初始速度是多少。非常暴力的模拟题。离散化后直接枚举弹跳的次数再取最小值即可。注意45°方向能成功的话，那还是45°最优。\n<!--more-->\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;cmath&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define PR pair&lt;int,int&gt;\n#define MP make_pair\n#define SI(x) set::iterator\n#define VI(x) vector::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set::reverse_iterator\n#define VRI(x) vector::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define Sz(x) (int)x.size()\n#define clrQ(x) while(!x.empty)x.pop();\n#define clr(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n#define eps 1e-8\n/*start*/\nint d, n, b;\nPR ob[20];\nvector&lt;pair&lt;double, double&gt; &gt; vt;\npair&lt;double, double&gt; dpr;\ndouble a[2][2], e[2];\npair&lt;double, double&gt; Cramer(pair&lt;double, double&gt; dpr) {\n\tpair&lt;double, double&gt; res;\n\ta[1][0] = dpr.F * dpr.F;\n\ta[1][1] = dpr.F;\n\te[1] = dpr.S;\n\tdouble div = a[0][0] * a[1][1] - a[1][0] * a[0][1];\n\tres.F = (e[0] * a[1][1] - e[1] * a[0][1]) / div;\n\tres.S = (e[1] * a[0][0] - e[0] * a[1][0]) / div;\n\treturn res;\n}\nint main(int argc, char **argv) {\n\twhile (~scanf(\"%d%d%d\", &amp;d, &amp;n, &amp;b)) {\n\t\tfor (int i = 0; i &lt; n; i++) {\n\t\t\tscanf(\"%d%d\", &amp;ob[i].F, &amp;ob[i].S);\n\t\t}\n\t\tdouble ans = inf;\n\t\tfor (int c = 0; c &lt;= b; c++) {//enumerate the times bullet bounces the surface\n\t\t\tdouble dist = 1.0 * d / (c + 1);\n\t\t\tint f = 1;\n\t\t\ta[0][0] = dist * dist;\n\t\t\ta[0][1] = dist;\n\t\t\te[0] = 0;\n\t\t\tvt.clear();\n\t\t\tfor (int i = 0; i &lt; n; i++) {\n\t\t\t\tdpr = ob[i];\n\t\t\t\twhile (dpr.F + eps &gt;= dist) {\n\t\t\t\t\tdpr.F -= dist;\n\t\t\t\t}\n\t\t\t\tif (dpr.F &lt;= eps) {\n\t\t\t\t\tf = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvt.push_back(dpr);\n\t\t\t}\n\t\t\tif (f == 0) continue;\n\t\t\tpair&lt;double, double&gt; res;   \n\t\t\tfor (int i = 0; i &lt; Sz(vt); i++) {\n\t\t\t\tdpr = vt[i];\n\t\t\t\tif (i == 0) {\n\t\t\t\t\tres = Cramer(dpr);\n\t\t\t\t} else {\n\t\t\t\t\tdouble tmph = dpr.F * dpr.F * res.F + dpr.F * res.S;\n\t\t\t\t\tif (tmph + eps &lt; dpr.S) {\n\t\t\t\t\t\tres = Cramer(dpr);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tres.F = -1.0 / (2 * res.F);\n\t\t\tres.S = res.F * res.S * res.S;\n\t\t\tans = min(ans, sqrt(res.F + res.S));\n                        //if the vector's angle is less than 45\n\t\t\tif (res.S + eps &lt; res.F) ans = min(ans, sqrt(dist));\n\t\t}\n\t\tprintf(\"%.5f\\n\", ans);\n\t}\n}\n```\n","source":"_posts/acm-international-collegiate-programming-contest-asia-regional-contest-tokyo-problem-d-space-golf.md","raw":"title: \"ACM International Collegiate Programming Contest Asia Regional Contest, Tokyo Problem D Space Golf\"\ncategories:\n  - ACM\ndate: 2014-10-19 21:20:03\ntags: 暴力\n---\n原题pdf：[click here](http://judge.u-aizu.ac.jp/onlinejudge/contest/ICPCOOC2014/D.pdf)\n<br/>\n\n- - -\n\n日本的亚洲区域赛真心简单啊。两个小时就刷了5题有余了。排名第一的队伍才做出7道。\n\n题目真心长的可以了，看了半个小时才明白。。\n\n题意其实也就是太空中向前方抛小球，问小球能够穿过N个障碍物后到达制定地点的最小初始速度是多少。非常暴力的模拟题。离散化后直接枚举弹跳的次数再取最小值即可。注意45°方向能成功的话，那还是45°最优。\n<!--more-->\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;cmath&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define PR pair&lt;int,int&gt;\n#define MP make_pair\n#define SI(x) set::iterator\n#define VI(x) vector::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set::reverse_iterator\n#define VRI(x) vector::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define Sz(x) (int)x.size()\n#define clrQ(x) while(!x.empty)x.pop();\n#define clr(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n#define eps 1e-8\n/*start*/\nint d, n, b;\nPR ob[20];\nvector&lt;pair&lt;double, double&gt; &gt; vt;\npair&lt;double, double&gt; dpr;\ndouble a[2][2], e[2];\npair&lt;double, double&gt; Cramer(pair&lt;double, double&gt; dpr) {\n\tpair&lt;double, double&gt; res;\n\ta[1][0] = dpr.F * dpr.F;\n\ta[1][1] = dpr.F;\n\te[1] = dpr.S;\n\tdouble div = a[0][0] * a[1][1] - a[1][0] * a[0][1];\n\tres.F = (e[0] * a[1][1] - e[1] * a[0][1]) / div;\n\tres.S = (e[1] * a[0][0] - e[0] * a[1][0]) / div;\n\treturn res;\n}\nint main(int argc, char **argv) {\n\twhile (~scanf(\"%d%d%d\", &amp;d, &amp;n, &amp;b)) {\n\t\tfor (int i = 0; i &lt; n; i++) {\n\t\t\tscanf(\"%d%d\", &amp;ob[i].F, &amp;ob[i].S);\n\t\t}\n\t\tdouble ans = inf;\n\t\tfor (int c = 0; c &lt;= b; c++) {//enumerate the times bullet bounces the surface\n\t\t\tdouble dist = 1.0 * d / (c + 1);\n\t\t\tint f = 1;\n\t\t\ta[0][0] = dist * dist;\n\t\t\ta[0][1] = dist;\n\t\t\te[0] = 0;\n\t\t\tvt.clear();\n\t\t\tfor (int i = 0; i &lt; n; i++) {\n\t\t\t\tdpr = ob[i];\n\t\t\t\twhile (dpr.F + eps &gt;= dist) {\n\t\t\t\t\tdpr.F -= dist;\n\t\t\t\t}\n\t\t\t\tif (dpr.F &lt;= eps) {\n\t\t\t\t\tf = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvt.push_back(dpr);\n\t\t\t}\n\t\t\tif (f == 0) continue;\n\t\t\tpair&lt;double, double&gt; res;   \n\t\t\tfor (int i = 0; i &lt; Sz(vt); i++) {\n\t\t\t\tdpr = vt[i];\n\t\t\t\tif (i == 0) {\n\t\t\t\t\tres = Cramer(dpr);\n\t\t\t\t} else {\n\t\t\t\t\tdouble tmph = dpr.F * dpr.F * res.F + dpr.F * res.S;\n\t\t\t\t\tif (tmph + eps &lt; dpr.S) {\n\t\t\t\t\t\tres = Cramer(dpr);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tres.F = -1.0 / (2 * res.F);\n\t\t\tres.S = res.F * res.S * res.S;\n\t\t\tans = min(ans, sqrt(res.F + res.S));\n                        //if the vector's angle is less than 45\n\t\t\tif (res.S + eps &lt; res.F) ans = min(ans, sqrt(dist));\n\t\t}\n\t\tprintf(\"%.5f\\n\", ans);\n\t}\n}\n```\n","slug":"acm-international-collegiate-programming-contest-asia-regional-contest-tokyo-problem-d-space-golf","published":1,"updated":"2015-02-26T02:42:59.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8ms0007wppvnvcmx3fy","content":"<p>原题pdf：<a href=\"http://judge.u-aizu.ac.jp/onlinejudge/contest/ICPCOOC2014/D.pdf\" target=\"_blank\" rel=\"external\">click here</a><br><br></p>\n<hr>\n<p>日本的亚洲区域赛真心简单啊。两个小时就刷了5题有余了。排名第一的队伍才做出7道。</p>\n<p>题目真心长的可以了，看了半个小时才明白。。</p>\n<p>题意其实也就是太空中向前方抛小球，问小球能够穿过N个障碍物后到达制定地点的最小初始速度是多少。非常暴力的模拟题。离散化后直接枚举弹跳的次数再取最小值即可。注意45°方向能成功的话，那还是45°最优。<br><a id=\"more\"></a><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;map&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;set&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cmath&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;stack&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;queue&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;string&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstdio&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;vector&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cctype&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cassert&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;utility&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;numeric&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstring&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;iostream&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;algorithm&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pr pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PR pair&amp;lt;int,int&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MP make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SI(x) set::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VI(x) vector::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SRI(x) set::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VRI(x) vector::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Sz(x) (int)x.size()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrQ(x) while(!x.empty)x.pop();</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clr(x,y) memset(x,y,sizeof(x));</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = ~<span class=\"number\">0u</span> &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL lnf = ~<span class=\"number\">0u</span>ll &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-8</span></div><div class=\"line\"><span class=\"comment\">/*start*/</span></div><div class=\"line\"><span class=\"keyword\">int</span> d, n, b;</div><div class=\"line\">PR ob[<span class=\"number\">20</span>];</div><div class=\"line\"><span class=\"built_in\">vector</span>&amp;lt;pair&amp;lt;<span class=\"keyword\">double</span>, <span class=\"keyword\">double</span>&amp;gt; &amp;gt; vt;</div><div class=\"line\">pair&amp;lt;<span class=\"keyword\">double</span>, <span class=\"keyword\">double</span>&amp;gt; dpr;</div><div class=\"line\"><span class=\"keyword\">double</span> a[<span class=\"number\">2</span>][<span class=\"number\">2</span>], e[<span class=\"number\">2</span>];</div><div class=\"line\">pair&amp;lt;<span class=\"keyword\">double</span>, <span class=\"keyword\">double</span>&amp;gt; Cramer(pair&amp;lt;<span class=\"keyword\">double</span>, <span class=\"keyword\">double</span>&amp;gt; dpr) &#123;</div><div class=\"line\">\tpair&amp;lt;<span class=\"keyword\">double</span>, <span class=\"keyword\">double</span>&amp;gt; res;</div><div class=\"line\">\ta[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = dpr.F * dpr.F;</div><div class=\"line\">\ta[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = dpr.F;</div><div class=\"line\">\te[<span class=\"number\">1</span>] = dpr.S;</div><div class=\"line\">\t<span class=\"keyword\">double</span> div = a[<span class=\"number\">0</span>][<span class=\"number\">0</span>] * a[<span class=\"number\">1</span>][<span class=\"number\">1</span>] - a[<span class=\"number\">1</span>][<span class=\"number\">0</span>] * a[<span class=\"number\">0</span>][<span class=\"number\">1</span>];</div><div class=\"line\">\tres.F = (e[<span class=\"number\">0</span>] * a[<span class=\"number\">1</span>][<span class=\"number\">1</span>] - e[<span class=\"number\">1</span>] * a[<span class=\"number\">0</span>][<span class=\"number\">1</span>]) / div;</div><div class=\"line\">\tres.S = (e[<span class=\"number\">1</span>] * a[<span class=\"number\">0</span>][<span class=\"number\">0</span>] - e[<span class=\"number\">0</span>] * a[<span class=\"number\">1</span>][<span class=\"number\">0</span>]) / div;</div><div class=\"line\">\t<span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;amp;d, &amp;amp;n, &amp;amp;b)) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; n; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;amp;ob[i].F, &amp;amp;ob[i].S);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">double</span> ans = inf;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &amp;lt;= b; c++) &#123;<span class=\"comment\">//enumerate the times bullet bounces the surface</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">double</span> dist = <span class=\"number\">1.0</span> * d / (c + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> f = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\ta[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = dist * dist;</div><div class=\"line\">\t\t\ta[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = dist;</div><div class=\"line\">\t\t\te[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\tvt.clear();</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; n; i++) &#123;</div><div class=\"line\">\t\t\t\tdpr = ob[i];</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (dpr.F + eps &amp;gt;= dist) &#123;</div><div class=\"line\">\t\t\t\t\tdpr.F -= dist;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (dpr.F &amp;lt;= eps) &#123;</div><div class=\"line\">\t\t\t\t\tf = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tvt.push_back(dpr);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (f == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\tpair&amp;lt;<span class=\"keyword\">double</span>, <span class=\"keyword\">double</span>&amp;gt; res;   </div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; Sz(vt); i++) &#123;</div><div class=\"line\">\t\t\t\tdpr = vt[i];</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\t\tres = Cramer(dpr);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">double</span> tmph = dpr.F * dpr.F * res.F + dpr.F * res.S;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (tmph + eps &amp;lt; dpr.S) &#123;</div><div class=\"line\">\t\t\t\t\t\tres = Cramer(dpr);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tres.F = <span class=\"number\">-1.0</span> / (<span class=\"number\">2</span> * res.F);</div><div class=\"line\">\t\t\tres.S = res.F * res.S * res.S;</div><div class=\"line\">\t\t\tans = min(ans, <span class=\"built_in\">sqrt</span>(res.F + res.S));</div><div class=\"line\">                        <span class=\"comment\">//if the vector's angle is less than 45</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (res.S + eps &amp;lt; res.F) ans = min(ans, <span class=\"built_in\">sqrt</span>(dist));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%.5f\\n\"</span>, ans);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>原题pdf：<a href=\"http://judge.u-aizu.ac.jp/onlinejudge/contest/ICPCOOC2014/D.pdf\">click here</a><br><br/></p>\n<hr>\n<p>日本的亚洲区域赛真心简单啊。两个小时就刷了5题有余了。排名第一的队伍才做出7道。</p>\n<p>题目真心长的可以了，看了半个小时才明白。。</p>\n<p>题意其实也就是太空中向前方抛小球，问小球能够穿过N个障碍物后到达制定地点的最小初始速度是多少。非常暴力的模拟题。离散化后直接枚举弹跳的次数再取最小值即可。注意45°方向能成功的话，那还是45°最优。<br>","more":"<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;map&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;set&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cmath&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;stack&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;queue&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;string&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstdio&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;vector&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cctype&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cassert&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;utility&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;numeric&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstring&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;iostream&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;algorithm&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pr pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PR pair&amp;lt;int,int&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MP make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SI(x) set::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VI(x) vector::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SRI(x) set::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VRI(x) vector::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Sz(x) (int)x.size()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrQ(x) while(!x.empty)x.pop();</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clr(x,y) memset(x,y,sizeof(x));</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = ~<span class=\"number\">0u</span> &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL lnf = ~<span class=\"number\">0u</span>ll &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-8</span></div><div class=\"line\"><span class=\"comment\">/*start*/</span></div><div class=\"line\"><span class=\"keyword\">int</span> d, n, b;</div><div class=\"line\">PR ob[<span class=\"number\">20</span>];</div><div class=\"line\"><span class=\"built_in\">vector</span>&amp;lt;pair&amp;lt;<span class=\"keyword\">double</span>, <span class=\"keyword\">double</span>&amp;gt; &amp;gt; vt;</div><div class=\"line\">pair&amp;lt;<span class=\"keyword\">double</span>, <span class=\"keyword\">double</span>&amp;gt; dpr;</div><div class=\"line\"><span class=\"keyword\">double</span> a[<span class=\"number\">2</span>][<span class=\"number\">2</span>], e[<span class=\"number\">2</span>];</div><div class=\"line\">pair&amp;lt;<span class=\"keyword\">double</span>, <span class=\"keyword\">double</span>&amp;gt; Cramer(pair&amp;lt;<span class=\"keyword\">double</span>, <span class=\"keyword\">double</span>&amp;gt; dpr) &#123;</div><div class=\"line\">\tpair&amp;lt;<span class=\"keyword\">double</span>, <span class=\"keyword\">double</span>&amp;gt; res;</div><div class=\"line\">\ta[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = dpr.F * dpr.F;</div><div class=\"line\">\ta[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = dpr.F;</div><div class=\"line\">\te[<span class=\"number\">1</span>] = dpr.S;</div><div class=\"line\">\t<span class=\"keyword\">double</span> div = a[<span class=\"number\">0</span>][<span class=\"number\">0</span>] * a[<span class=\"number\">1</span>][<span class=\"number\">1</span>] - a[<span class=\"number\">1</span>][<span class=\"number\">0</span>] * a[<span class=\"number\">0</span>][<span class=\"number\">1</span>];</div><div class=\"line\">\tres.F = (e[<span class=\"number\">0</span>] * a[<span class=\"number\">1</span>][<span class=\"number\">1</span>] - e[<span class=\"number\">1</span>] * a[<span class=\"number\">0</span>][<span class=\"number\">1</span>]) / div;</div><div class=\"line\">\tres.S = (e[<span class=\"number\">1</span>] * a[<span class=\"number\">0</span>][<span class=\"number\">0</span>] - e[<span class=\"number\">0</span>] * a[<span class=\"number\">1</span>][<span class=\"number\">0</span>]) / div;</div><div class=\"line\">\t<span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;amp;d, &amp;amp;n, &amp;amp;b)) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; n; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;amp;ob[i].F, &amp;amp;ob[i].S);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">double</span> ans = inf;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &amp;lt;= b; c++) &#123;<span class=\"comment\">//enumerate the times bullet bounces the surface</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">double</span> dist = <span class=\"number\">1.0</span> * d / (c + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> f = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\ta[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = dist * dist;</div><div class=\"line\">\t\t\ta[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = dist;</div><div class=\"line\">\t\t\te[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\tvt.clear();</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; n; i++) &#123;</div><div class=\"line\">\t\t\t\tdpr = ob[i];</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (dpr.F + eps &amp;gt;= dist) &#123;</div><div class=\"line\">\t\t\t\t\tdpr.F -= dist;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (dpr.F &amp;lt;= eps) &#123;</div><div class=\"line\">\t\t\t\t\tf = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tvt.push_back(dpr);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (f == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\tpair&amp;lt;<span class=\"keyword\">double</span>, <span class=\"keyword\">double</span>&amp;gt; res;   </div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; Sz(vt); i++) &#123;</div><div class=\"line\">\t\t\t\tdpr = vt[i];</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\t\tres = Cramer(dpr);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">double</span> tmph = dpr.F * dpr.F * res.F + dpr.F * res.S;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (tmph + eps &amp;lt; dpr.S) &#123;</div><div class=\"line\">\t\t\t\t\t\tres = Cramer(dpr);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tres.F = <span class=\"number\">-1.0</span> / (<span class=\"number\">2</span> * res.F);</div><div class=\"line\">\t\t\tres.S = res.F * res.S * res.S;</div><div class=\"line\">\t\t\tans = min(ans, <span class=\"built_in\">sqrt</span>(res.F + res.S));</div><div class=\"line\">                        <span class=\"comment\">//if the vector's angle is less than 45</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (res.S + eps &amp;lt; res.F) ans = min(ans, <span class=\"built_in\">sqrt</span>(dist));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%.5f\\n\"</span>, ans);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"baylor 6622 Absurdistan Roads（ NWERC Contest）","id":"137","date":"2014-11-06T09:05:34.000Z","_content":"\n原题pdf：[click here](https://icpcarchive.ecs.baylor.edu/external/66/6622.pdf)\n##Description\nThe people of Absurdistan discovered how to build roads only last year. After the discovery, every city\ndecided to build their own road connecting their city with another city. Each newly built road can be\nused in both directions.\n\nAbsurdistan is full of surprising coincidences. It took all N cities precisely one year to build their\nroads. And even more surprisingly, in the end it was possible to travel from every city to every other\ncity using the newly built roads.\n\n<!--more-->\nYou bought a tourist guide which does not have a map of the country with the new roads. It only\ncontains a huge table with the shortest distances between all pairs of cities using the newly built roads.\n\nYou would like to know between which pairs of cities there are roads and how long they are, because\nyou want to reconstruct the map of the N newly built roads from the table of shortest distances.\n\nYou get a table of shortest distances between all pairs of cities in Absurdistan using the N roads\nbuilt last year. From this table, you must reconstruct the road network of Absurdistan. There might\nbe multiple road networks with N roads with that same table of shortest distances, but you are happy\nwith any one of those networks.\n\n##Input\nFor each test case:  \n\n• A line containing an integer N (2 ≤ N ≤ 2000) — the number of cities and roads.  \n\n• N lines with N numbers each. The j-th number of the i-th line is the shortest distance from city i to city j.\n\n• All distances between two distinct cities will be positive and at most 1 000 000. The\ndistance from i to i will always be 0 and the distance from i to j will be the same as the distance\nfrom j to i.\n\n##Output\nFor each test case:\n\n• Print N lines with three integers ‘a b c’ denoting that there is a road between cities 1 ≤ a ≤ N\nand 1 ≤ b ≤ N of length 1 ≤ c ≤ 1000000, where a ̸= b. If there are multiple solutions, you can\nprint any one and you can print the roads in any order. At least one solution is guaranteed to\nexist.\n\n• Print a blank line between every two test cases.\n##Sample Input\n4  \n0 1 2 1  \n1 0 2 1  \n2 2 0 1  \n1 1 1 0  \n4  \n0 1 1 1  \n1 0 2 2  \n1 2 0 2  \n1 2 2 0  \n3  \n0 4 1  \n4 0 3  \n1 3 0  \n##Sample Output\n2 1 1  \n4 1 1  \n4 2 1  \n4 3 1  \n2 1 1  \n3 1 1  \n4 1 1  \n2 1 1  \n3 1 1  \n2 1 4  \n3 2 3  \n<br/>\n- - -\n\nNWERC 题目还挺简单的。  \n题意就是一个N个顶点，N条边的无向图。告诉你两两点之间的最短路。让你重构这个图。(随意输出任意一张满足以上条件的图）  \n这题的突破口就是N条边。要想想如果只有N-1条边，那么这个图就是一个树了。所以，我们可以先构造最小生成树，再来考虑最后一条边。  \n可以先将构造好的树求一遍floyd，然后再跟题目的最短路相比较，如果两点u,v求出的最短路w\\`与题目给的最短路w不一致（可以断言：w\\`&gt;w），那么就将w作为最后一条边的边长加在u，v之间即可。这样的边可能会找到很多，事实上只需要加上任意一条就使所有的w\\`都等于w了。\n需要注意的是，可能整个树就已经满足题目了。这样的话，最后一条边只需要重复任意一条树边就好了。\n\n```C++\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nconst int N = 2010;\nconst int inf = 1 << 25;\nint p[N];\nint ufind(int x) {\n\treturn x == p[x] ? x : p[x] = ufind(p[x]);\n}\nbool Union(int x, int y) {\n\tint fx = ufind(x);\n\tint fy = ufind(y);\n\tif (fx == fy)\n\t\treturn false;\n\tp[fx] = fy;\n\treturn true;\n}\nint n;\nstruct Edge {\n\tint u, v, w;\n\tEdge(int u = 0, int v = 0, int w = 0) :\n\t\t\tu(u), v(v), w(w) {\n\t}\n\tbool operator<(const Edge& othr) const {\n\t\treturn w < othr.w;\n\t}\n};\nvector<Edge> vt;\nvector<Edge> res;\nint f[N][N];\nint main() {\n\tbool first = true;\n\twhile (~scanf(\"%d\", &n)) {\n\t\tvt.clear();\n\t\tres.clear();\n\t\tif (!first) printf(\"\\n\");\n\t\telse first = false;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfor (int x, j = 1; j <= n; j++) {\n\t\t\t\tscanf(\"%d\", &x);\n\t\t\t\tif (j > i)\n\t\t\t\t\tvt.push_back(Edge(i, j, x));\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i <= n; i++) p[i] = i;\n\t\tsort(vt.begin(), vt.end());\n\t\tfor(int i=1;i<=n;i++) fill(f[i]+1,f[i]+1+n,inf);\n\t\tfor (int cnt = 0, i = 0; i < (int) vt.size(); i++) {\n\t\t\tif (Union(vt[i].u, vt[i].v)) {\n\t\t\t\tf[vt[i].u][vt[i].v] = vt[i].w;\n\t\t\t\tf[vt[i].v][vt[i].u] = vt[i].w;\n\t\t\t\tcnt++;\n\t\t\t\tres.push_back(Edge(vt[i].u, vt[i].v, vt[i].w));\n\t\t\t\tif (cnt >= n - 1) break;\n\t\t\t}\n\t\t}\n\n\t\tfor (int k = 1; k <= n; k++) {\n\t\t\tfor (int i = 1; i <= n; i++) {\n\t\t\t\tfor (int j = 1; j <= n; j++) {\n\t\t\t\t\tif (f[i][k] == inf) break;\n\t\t\t\t\tif (f[i][j] > f[i][k] + f[k][j]) {\n\t\t\t\t\t\tf[i][j] = f[i][k] + f[k][j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint flag = true;\n\t\tfor (int i = 0; i < (int) vt.size(); i++) {\n\t\t\tEdge now = vt[i];\n\t\t\tif (f[now.u][now.v] != now.w) {\n\t\t\t\tres.push_back(Edge(now.u, now.v, now.w));\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag) res.push_back(res.back());\n\t\tfor (int i = 0; i < (int) res.size(); i++) {\n\t\t\tprintf(\"%d %d %d\\n\", res[i].u, res[i].v, res[i].w);\n\t\t}\n\t}\n}\n```","source":"_posts/baylor6622-absurdistan-roads.md","raw":"title: baylor 6622 Absurdistan Roads（ NWERC Contest）\ncategories:\n  - ACM\nid: 137\ndate: 2014-11-06 17:05:34\ntags: 图论\n---\n\n原题pdf：[click here](https://icpcarchive.ecs.baylor.edu/external/66/6622.pdf)\n##Description\nThe people of Absurdistan discovered how to build roads only last year. After the discovery, every city\ndecided to build their own road connecting their city with another city. Each newly built road can be\nused in both directions.\n\nAbsurdistan is full of surprising coincidences. It took all N cities precisely one year to build their\nroads. And even more surprisingly, in the end it was possible to travel from every city to every other\ncity using the newly built roads.\n\n<!--more-->\nYou bought a tourist guide which does not have a map of the country with the new roads. It only\ncontains a huge table with the shortest distances between all pairs of cities using the newly built roads.\n\nYou would like to know between which pairs of cities there are roads and how long they are, because\nyou want to reconstruct the map of the N newly built roads from the table of shortest distances.\n\nYou get a table of shortest distances between all pairs of cities in Absurdistan using the N roads\nbuilt last year. From this table, you must reconstruct the road network of Absurdistan. There might\nbe multiple road networks with N roads with that same table of shortest distances, but you are happy\nwith any one of those networks.\n\n##Input\nFor each test case:  \n\n• A line containing an integer N (2 ≤ N ≤ 2000) — the number of cities and roads.  \n\n• N lines with N numbers each. The j-th number of the i-th line is the shortest distance from city i to city j.\n\n• All distances between two distinct cities will be positive and at most 1 000 000. The\ndistance from i to i will always be 0 and the distance from i to j will be the same as the distance\nfrom j to i.\n\n##Output\nFor each test case:\n\n• Print N lines with three integers ‘a b c’ denoting that there is a road between cities 1 ≤ a ≤ N\nand 1 ≤ b ≤ N of length 1 ≤ c ≤ 1000000, where a ̸= b. If there are multiple solutions, you can\nprint any one and you can print the roads in any order. At least one solution is guaranteed to\nexist.\n\n• Print a blank line between every two test cases.\n##Sample Input\n4  \n0 1 2 1  \n1 0 2 1  \n2 2 0 1  \n1 1 1 0  \n4  \n0 1 1 1  \n1 0 2 2  \n1 2 0 2  \n1 2 2 0  \n3  \n0 4 1  \n4 0 3  \n1 3 0  \n##Sample Output\n2 1 1  \n4 1 1  \n4 2 1  \n4 3 1  \n2 1 1  \n3 1 1  \n4 1 1  \n2 1 1  \n3 1 1  \n2 1 4  \n3 2 3  \n<br/>\n- - -\n\nNWERC 题目还挺简单的。  \n题意就是一个N个顶点，N条边的无向图。告诉你两两点之间的最短路。让你重构这个图。(随意输出任意一张满足以上条件的图）  \n这题的突破口就是N条边。要想想如果只有N-1条边，那么这个图就是一个树了。所以，我们可以先构造最小生成树，再来考虑最后一条边。  \n可以先将构造好的树求一遍floyd，然后再跟题目的最短路相比较，如果两点u,v求出的最短路w\\`与题目给的最短路w不一致（可以断言：w\\`&gt;w），那么就将w作为最后一条边的边长加在u，v之间即可。这样的边可能会找到很多，事实上只需要加上任意一条就使所有的w\\`都等于w了。\n需要注意的是，可能整个树就已经满足题目了。这样的话，最后一条边只需要重复任意一条树边就好了。\n\n```C++\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nconst int N = 2010;\nconst int inf = 1 << 25;\nint p[N];\nint ufind(int x) {\n\treturn x == p[x] ? x : p[x] = ufind(p[x]);\n}\nbool Union(int x, int y) {\n\tint fx = ufind(x);\n\tint fy = ufind(y);\n\tif (fx == fy)\n\t\treturn false;\n\tp[fx] = fy;\n\treturn true;\n}\nint n;\nstruct Edge {\n\tint u, v, w;\n\tEdge(int u = 0, int v = 0, int w = 0) :\n\t\t\tu(u), v(v), w(w) {\n\t}\n\tbool operator<(const Edge& othr) const {\n\t\treturn w < othr.w;\n\t}\n};\nvector<Edge> vt;\nvector<Edge> res;\nint f[N][N];\nint main() {\n\tbool first = true;\n\twhile (~scanf(\"%d\", &n)) {\n\t\tvt.clear();\n\t\tres.clear();\n\t\tif (!first) printf(\"\\n\");\n\t\telse first = false;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfor (int x, j = 1; j <= n; j++) {\n\t\t\t\tscanf(\"%d\", &x);\n\t\t\t\tif (j > i)\n\t\t\t\t\tvt.push_back(Edge(i, j, x));\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i <= n; i++) p[i] = i;\n\t\tsort(vt.begin(), vt.end());\n\t\tfor(int i=1;i<=n;i++) fill(f[i]+1,f[i]+1+n,inf);\n\t\tfor (int cnt = 0, i = 0; i < (int) vt.size(); i++) {\n\t\t\tif (Union(vt[i].u, vt[i].v)) {\n\t\t\t\tf[vt[i].u][vt[i].v] = vt[i].w;\n\t\t\t\tf[vt[i].v][vt[i].u] = vt[i].w;\n\t\t\t\tcnt++;\n\t\t\t\tres.push_back(Edge(vt[i].u, vt[i].v, vt[i].w));\n\t\t\t\tif (cnt >= n - 1) break;\n\t\t\t}\n\t\t}\n\n\t\tfor (int k = 1; k <= n; k++) {\n\t\t\tfor (int i = 1; i <= n; i++) {\n\t\t\t\tfor (int j = 1; j <= n; j++) {\n\t\t\t\t\tif (f[i][k] == inf) break;\n\t\t\t\t\tif (f[i][j] > f[i][k] + f[k][j]) {\n\t\t\t\t\t\tf[i][j] = f[i][k] + f[k][j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint flag = true;\n\t\tfor (int i = 0; i < (int) vt.size(); i++) {\n\t\t\tEdge now = vt[i];\n\t\t\tif (f[now.u][now.v] != now.w) {\n\t\t\t\tres.push_back(Edge(now.u, now.v, now.w));\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag) res.push_back(res.back());\n\t\tfor (int i = 0; i < (int) res.size(); i++) {\n\t\t\tprintf(\"%d %d %d\\n\", res[i].u, res[i].v, res[i].w);\n\t\t}\n\t}\n}\n```","slug":"baylor6622-absurdistan-roads","published":1,"updated":"2015-02-26T02:43:52.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8mw0008wppvjuz7ufh4","content":"<p>原题pdf：<a href=\"https://icpcarchive.ecs.baylor.edu/external/66/6622.pdf\" target=\"_blank\" rel=\"external\">click here</a></p>\n<p>##Description<br>The people of Absurdistan discovered how to build roads only last year. After the discovery, every city<br>decided to build their own road connecting their city with another city. Each newly built road can be<br>used in both directions.</p>\n<p>Absurdistan is full of surprising coincidences. It took all N cities precisely one year to build their<br>roads. And even more surprisingly, in the end it was possible to travel from every city to every other<br>city using the newly built roads.</p>\n<a id=\"more\"></a>\n<p>You bought a tourist guide which does not have a map of the country with the new roads. It only<br>contains a huge table with the shortest distances between all pairs of cities using the newly built roads.</p>\n<p>You would like to know between which pairs of cities there are roads and how long they are, because<br>you want to reconstruct the map of the N newly built roads from the table of shortest distances.</p>\n<p>You get a table of shortest distances between all pairs of cities in Absurdistan using the N roads<br>built last year. From this table, you must reconstruct the road network of Absurdistan. There might<br>be multiple road networks with N roads with that same table of shortest distances, but you are happy<br>with any one of those networks.</p>\n<p>##Input<br>For each test case:  </p>\n<p>• A line containing an integer N (2 ≤ N ≤ 2000) — the number of cities and roads.  </p>\n<p>• N lines with N numbers each. The j-th number of the i-th line is the shortest distance from city i to city j.</p>\n<p>• All distances between two distinct cities will be positive and at most 1 000 000. The<br>distance from i to i will always be 0 and the distance from i to j will be the same as the distance<br>from j to i.</p>\n<p>##Output<br>For each test case:</p>\n<p>• Print N lines with three integers ‘a b c’ denoting that there is a road between cities 1 ≤ a ≤ N<br>and 1 ≤ b ≤ N of length 1 ≤ c ≤ 1000000, where a ̸= b. If there are multiple solutions, you can<br>print any one and you can print the roads in any order. At least one solution is guaranteed to<br>exist.</p>\n<p>• Print a blank line between every two test cases.</p>\n<p>##Sample Input<br>4<br>0 1 2 1<br>1 0 2 1<br>2 2 0 1<br>1 1 1 0<br>4<br>0 1 1 1<br>1 0 2 2<br>1 2 0 2<br>1 2 2 0<br>3<br>0 4 1<br>4 0 3<br>1 3 0  </p>\n<p>##Sample Output<br>2 1 1<br>4 1 1<br>4 2 1<br>4 3 1<br>2 1 1<br>3 1 1<br>4 1 1<br>2 1 1<br>3 1 1<br>2 1 4<br>3 2 3<br><br></p>\n<hr>\n<p>NWERC 题目还挺简单的。<br>题意就是一个N个顶点，N条边的无向图。告诉你两两点之间的最短路。让你重构这个图。(随意输出任意一张满足以上条件的图）<br>这题的突破口就是N条边。要想想如果只有N-1条边，那么这个图就是一个树了。所以，我们可以先构造最小生成树，再来考虑最后一条边。<br>可以先将构造好的树求一遍floyd，然后再跟题目的最短路相比较，如果两点u,v求出的最短路w`与题目给的最短路w不一致（可以断言：w`&gt;w），那么就将w作为最后一条边的边长加在u，v之间即可。这样的边可能会找到很多，事实上只需要加上任意一条就使所有的w`都等于w了。<br>需要注意的是，可能整个树就已经满足题目了。这样的话，最后一条边只需要重复任意一条树边就好了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2010</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">25</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> p[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ufind</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> x == p[x] ? x : p[x] = ufind(p[x]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Union</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> fx = ufind(x);</div><div class=\"line\">\t<span class=\"keyword\">int</span> fy = ufind(y);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (fx == fy)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\tp[fx] = fy;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">struct</span> Edge &#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> u, v, w;</div><div class=\"line\">\tEdge(<span class=\"keyword\">int</span> u = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> v = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> w = <span class=\"number\">0</span>) :</div><div class=\"line\">\t\t\tu(u), v(v), w(w) &#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> Edge&amp; othr) <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> w &lt; othr.w;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;Edge&gt; vt;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;Edge&gt; res;</div><div class=\"line\"><span class=\"keyword\">int</span> f[N][N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">bool</span> first = <span class=\"literal\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n)) &#123;</div><div class=\"line\">\t\tvt.clear();</div><div class=\"line\">\t\tres.clear();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!first) <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> first = <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x, j = <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (j &gt; i)</div><div class=\"line\">\t\t\t\t\tvt.push_back(Edge(i, j, x));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) p[i] = i;</div><div class=\"line\">\t\tsort(vt.begin(), vt.end());</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) fill(f[i]+<span class=\"number\">1</span>,f[i]+<span class=\"number\">1</span>+n,inf);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>; i &lt; (<span class=\"keyword\">int</span>) vt.size(); i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Union(vt[i].u, vt[i].v)) &#123;</div><div class=\"line\">\t\t\t\tf[vt[i].u][vt[i].v] = vt[i].w;</div><div class=\"line\">\t\t\t\tf[vt[i].v][vt[i].u] = vt[i].w;</div><div class=\"line\">\t\t\t\tcnt++;</div><div class=\"line\">\t\t\t\tres.push_back(Edge(vt[i].u, vt[i].v, vt[i].w));</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (cnt &gt;= n - <span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; k++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (f[i][k] == inf) <span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (f[i][j] &gt; f[i][k] + f[k][j]) &#123;</div><div class=\"line\">\t\t\t\t\t\tf[i][j] = f[i][k] + f[k][j];</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> flag = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"keyword\">int</span>) vt.size(); i++) &#123;</div><div class=\"line\">\t\t\tEdge now = vt[i];</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (f[now.u][now.v] != now.w) &#123;</div><div class=\"line\">\t\t\t\tres.push_back(Edge(now.u, now.v, now.w));</div><div class=\"line\">\t\t\t\tflag = <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (flag) res.push_back(res.back());</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"keyword\">int</span>) res.size(); i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d %d\\n\"</span>, res[i].u, res[i].v, res[i].w);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<p>原题pdf：<a href=\"https://icpcarchive.ecs.baylor.edu/external/66/6622.pdf\">click here</a></p>\n<p>##Description<br>The people of Absurdistan discovered how to build roads only last year. After the discovery, every city<br>decided to build their own road connecting their city with another city. Each newly built road can be<br>used in both directions.</p>\n<p>Absurdistan is full of surprising coincidences. It took all N cities precisely one year to build their<br>roads. And even more surprisingly, in the end it was possible to travel from every city to every other<br>city using the newly built roads.</p>","more":"<p>You bought a tourist guide which does not have a map of the country with the new roads. It only<br>contains a huge table with the shortest distances between all pairs of cities using the newly built roads.</p>\n<p>You would like to know between which pairs of cities there are roads and how long they are, because<br>you want to reconstruct the map of the N newly built roads from the table of shortest distances.</p>\n<p>You get a table of shortest distances between all pairs of cities in Absurdistan using the N roads<br>built last year. From this table, you must reconstruct the road network of Absurdistan. There might<br>be multiple road networks with N roads with that same table of shortest distances, but you are happy<br>with any one of those networks.</p>\n<p>##Input<br>For each test case:  </p>\n<p>• A line containing an integer N (2 ≤ N ≤ 2000) — the number of cities and roads.  </p>\n<p>• N lines with N numbers each. The j-th number of the i-th line is the shortest distance from city i to city j.</p>\n<p>• All distances between two distinct cities will be positive and at most 1 000 000. The<br>distance from i to i will always be 0 and the distance from i to j will be the same as the distance<br>from j to i.</p>\n<p>##Output<br>For each test case:</p>\n<p>• Print N lines with three integers ‘a b c’ denoting that there is a road between cities 1 ≤ a ≤ N<br>and 1 ≤ b ≤ N of length 1 ≤ c ≤ 1000000, where a ̸= b. If there are multiple solutions, you can<br>print any one and you can print the roads in any order. At least one solution is guaranteed to<br>exist.</p>\n<p>• Print a blank line between every two test cases.</p>\n<p>##Sample Input<br>4<br>0 1 2 1<br>1 0 2 1<br>2 2 0 1<br>1 1 1 0<br>4<br>0 1 1 1<br>1 0 2 2<br>1 2 0 2<br>1 2 2 0<br>3<br>0 4 1<br>4 0 3<br>1 3 0  </p>\n<p>##Sample Output<br>2 1 1<br>4 1 1<br>4 2 1<br>4 3 1<br>2 1 1<br>3 1 1<br>4 1 1<br>2 1 1<br>3 1 1<br>2 1 4<br>3 2 3<br><br/></p>\n<hr>\n<p>NWERC 题目还挺简单的。<br>题意就是一个N个顶点，N条边的无向图。告诉你两两点之间的最短路。让你重构这个图。(随意输出任意一张满足以上条件的图）<br>这题的突破口就是N条边。要想想如果只有N-1条边，那么这个图就是一个树了。所以，我们可以先构造最小生成树，再来考虑最后一条边。<br>可以先将构造好的树求一遍floyd，然后再跟题目的最短路相比较，如果两点u,v求出的最短路w`与题目给的最短路w不一致（可以断言：w`&gt;w），那么就将w作为最后一条边的边长加在u，v之间即可。这样的边可能会找到很多，事实上只需要加上任意一条就使所有的w`都等于w了。<br>需要注意的是，可能整个树就已经满足题目了。这样的话，最后一条边只需要重复任意一条树边就好了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2010</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">25</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> p[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ufind</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> x == p[x] ? x : p[x] = ufind(p[x]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Union</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> fx = ufind(x);</div><div class=\"line\">\t<span class=\"keyword\">int</span> fy = ufind(y);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (fx == fy)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\tp[fx] = fy;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">struct</span> Edge &#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> u, v, w;</div><div class=\"line\">\tEdge(<span class=\"keyword\">int</span> u = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> v = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> w = <span class=\"number\">0</span>) :</div><div class=\"line\">\t\t\tu(u), v(v), w(w) &#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> Edge&amp; othr) <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> w &lt; othr.w;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;Edge&gt; vt;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;Edge&gt; res;</div><div class=\"line\"><span class=\"keyword\">int</span> f[N][N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">bool</span> first = <span class=\"literal\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n)) &#123;</div><div class=\"line\">\t\tvt.clear();</div><div class=\"line\">\t\tres.clear();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!first) <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> first = <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x, j = <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (j &gt; i)</div><div class=\"line\">\t\t\t\t\tvt.push_back(Edge(i, j, x));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) p[i] = i;</div><div class=\"line\">\t\tsort(vt.begin(), vt.end());</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) fill(f[i]+<span class=\"number\">1</span>,f[i]+<span class=\"number\">1</span>+n,inf);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>; i &lt; (<span class=\"keyword\">int</span>) vt.size(); i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Union(vt[i].u, vt[i].v)) &#123;</div><div class=\"line\">\t\t\t\tf[vt[i].u][vt[i].v] = vt[i].w;</div><div class=\"line\">\t\t\t\tf[vt[i].v][vt[i].u] = vt[i].w;</div><div class=\"line\">\t\t\t\tcnt++;</div><div class=\"line\">\t\t\t\tres.push_back(Edge(vt[i].u, vt[i].v, vt[i].w));</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (cnt &gt;= n - <span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; k++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (f[i][k] == inf) <span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (f[i][j] &gt; f[i][k] + f[k][j]) &#123;</div><div class=\"line\">\t\t\t\t\t\tf[i][j] = f[i][k] + f[k][j];</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> flag = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"keyword\">int</span>) vt.size(); i++) &#123;</div><div class=\"line\">\t\t\tEdge now = vt[i];</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (f[now.u][now.v] != now.w) &#123;</div><div class=\"line\">\t\t\t\tres.push_back(Edge(now.u, now.v, now.w));</div><div class=\"line\">\t\t\t\tflag = <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (flag) res.push_back(res.back());</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"keyword\">int</span>) res.size(); i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d %d\\n\"</span>, res[i].u, res[i].v, res[i].w);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"JS DOM API分析","date":"2016-11-02T13:07:21.000Z","_content":"\n## Element.classList\n返回DOMTokenList,IE version>=10不完全支持。\n1. 不支持classList.contains的第二个参数(force)\n2. add和remove方法不支持多参数\n3. SVG,MathML结点没有classList属性\n\n## Node种类\n### Node.nodeName\n|Interface|nodeName|\n|:---------|:--------|\n|Comment|#comment|\n|Document|#document|\n|DocumentFragment|#document-fragment|\n\n<!--more-->\n## Node的树遍历\nNode树遍历普遍要考虑空白文字结点。(whitespace textNode)。\n### Node.childNodes\n返回一个NodeList，表示该结点的所有子结点，包括文字结点和注释，该NodeList里面全部是object，并没有string。可以使用ParentNode.children来获得所有纯Element结点集合。\n### Node.firstChild\n返回结点的第一个子结点。可能是whitespace textNode。\n可以使用Element.firstElementChild来获得Element结点。\n### Node.lastChild\n返回结点的最后一个子结点。可能是whitespace textNode。\n可以使用Element.lastElementChild来获得Element结点。\n### Node.nextSibling\n返回下一个兄弟结点，可能是whitespace textNode。可以使用Element.nextElementSibling获得Element结点。\n### Node.previousSibling\n返回前一个兄弟结点，可能whitespace textNode。可以使用Element.previousElementSibling获得Element结点。\n\n## Node.innerText\n是一个非标准的属性，返回当前结点包括其子结点的所有文字。可以使用标准方法Node.textContent代替。\n## Node.textContent\n## Node.parentElement\n返回当前Node的父Element元素，如果没有父Element元素，返回null。\n## Node.parentNode\n一个元素的parentNode可能是另一个元素、Document或者DocumentFragment。\nDocument和DocumentFragment的parentNode是null，同样，一个刚刚创建的node，如果还没有加到dom树里面，它的parentNode同样是null。\n```javascript\n//移除某element：\nele.parentNode.removeChild(ele);\n```\n","source":"_posts/dom-compatibility-note.md","raw":"---\ntitle: JS DOM API分析\ndate: 2016-11-02 21:07:21\ncategories:\n- Web\ntags: [javascirpt,dom,html]\n---\n\n## Element.classList\n返回DOMTokenList,IE version>=10不完全支持。\n1. 不支持classList.contains的第二个参数(force)\n2. add和remove方法不支持多参数\n3. SVG,MathML结点没有classList属性\n\n## Node种类\n### Node.nodeName\n|Interface|nodeName|\n|:---------|:--------|\n|Comment|#comment|\n|Document|#document|\n|DocumentFragment|#document-fragment|\n\n<!--more-->\n## Node的树遍历\nNode树遍历普遍要考虑空白文字结点。(whitespace textNode)。\n### Node.childNodes\n返回一个NodeList，表示该结点的所有子结点，包括文字结点和注释，该NodeList里面全部是object，并没有string。可以使用ParentNode.children来获得所有纯Element结点集合。\n### Node.firstChild\n返回结点的第一个子结点。可能是whitespace textNode。\n可以使用Element.firstElementChild来获得Element结点。\n### Node.lastChild\n返回结点的最后一个子结点。可能是whitespace textNode。\n可以使用Element.lastElementChild来获得Element结点。\n### Node.nextSibling\n返回下一个兄弟结点，可能是whitespace textNode。可以使用Element.nextElementSibling获得Element结点。\n### Node.previousSibling\n返回前一个兄弟结点，可能whitespace textNode。可以使用Element.previousElementSibling获得Element结点。\n\n## Node.innerText\n是一个非标准的属性，返回当前结点包括其子结点的所有文字。可以使用标准方法Node.textContent代替。\n## Node.textContent\n## Node.parentElement\n返回当前Node的父Element元素，如果没有父Element元素，返回null。\n## Node.parentNode\n一个元素的parentNode可能是另一个元素、Document或者DocumentFragment。\nDocument和DocumentFragment的parentNode是null，同样，一个刚刚创建的node，如果还没有加到dom树里面，它的parentNode同样是null。\n```javascript\n//移除某element：\nele.parentNode.removeChild(ele);\n```\n","slug":"dom-compatibility-note","published":1,"updated":"2017-01-14T17:03:45.000Z","_id":"cixx6u8my0009wppvffcj6yr0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Element-classList\"><a href=\"#Element-classList\" class=\"headerlink\" title=\"Element.classList\"></a>Element.classList</h2><p>返回DOMTokenList,IE version&gt;=10不完全支持。</p>\n<ol>\n<li>不支持classList.contains的第二个参数(force)</li>\n<li>add和remove方法不支持多参数</li>\n<li>SVG,MathML结点没有classList属性</li>\n</ol>\n<h2 id=\"Node种类\"><a href=\"#Node种类\" class=\"headerlink\" title=\"Node种类\"></a>Node种类</h2><h3 id=\"Node-nodeName\"><a href=\"#Node-nodeName\" class=\"headerlink\" title=\"Node.nodeName\"></a>Node.nodeName</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Interface</th>\n<th style=\"text-align:left\">nodeName</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Comment</td>\n<td style=\"text-align:left\">#comment</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Document</td>\n<td style=\"text-align:left\">#document</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DocumentFragment</td>\n<td style=\"text-align:left\">#document-fragment</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<h2 id=\"Node的树遍历\"><a href=\"#Node的树遍历\" class=\"headerlink\" title=\"Node的树遍历\"></a>Node的树遍历</h2><p>Node树遍历普遍要考虑空白文字结点。(whitespace textNode)。</p>\n<h3 id=\"Node-childNodes\"><a href=\"#Node-childNodes\" class=\"headerlink\" title=\"Node.childNodes\"></a>Node.childNodes</h3><p>返回一个NodeList，表示该结点的所有子结点，包括文字结点和注释，该NodeList里面全部是object，并没有string。可以使用ParentNode.children来获得所有纯Element结点集合。</p>\n<h3 id=\"Node-firstChild\"><a href=\"#Node-firstChild\" class=\"headerlink\" title=\"Node.firstChild\"></a>Node.firstChild</h3><p>返回结点的第一个子结点。可能是whitespace textNode。<br>可以使用Element.firstElementChild来获得Element结点。</p>\n<h3 id=\"Node-lastChild\"><a href=\"#Node-lastChild\" class=\"headerlink\" title=\"Node.lastChild\"></a>Node.lastChild</h3><p>返回结点的最后一个子结点。可能是whitespace textNode。<br>可以使用Element.lastElementChild来获得Element结点。</p>\n<h3 id=\"Node-nextSibling\"><a href=\"#Node-nextSibling\" class=\"headerlink\" title=\"Node.nextSibling\"></a>Node.nextSibling</h3><p>返回下一个兄弟结点，可能是whitespace textNode。可以使用Element.nextElementSibling获得Element结点。</p>\n<h3 id=\"Node-previousSibling\"><a href=\"#Node-previousSibling\" class=\"headerlink\" title=\"Node.previousSibling\"></a>Node.previousSibling</h3><p>返回前一个兄弟结点，可能whitespace textNode。可以使用Element.previousElementSibling获得Element结点。</p>\n<h2 id=\"Node-innerText\"><a href=\"#Node-innerText\" class=\"headerlink\" title=\"Node.innerText\"></a>Node.innerText</h2><p>是一个非标准的属性，返回当前结点包括其子结点的所有文字。可以使用标准方法Node.textContent代替。</p>\n<h2 id=\"Node-textContent\"><a href=\"#Node-textContent\" class=\"headerlink\" title=\"Node.textContent\"></a>Node.textContent</h2><h2 id=\"Node-parentElement\"><a href=\"#Node-parentElement\" class=\"headerlink\" title=\"Node.parentElement\"></a>Node.parentElement</h2><p>返回当前Node的父Element元素，如果没有父Element元素，返回null。</p>\n<h2 id=\"Node-parentNode\"><a href=\"#Node-parentNode\" class=\"headerlink\" title=\"Node.parentNode\"></a>Node.parentNode</h2><p>一个元素的parentNode可能是另一个元素、Document或者DocumentFragment。<br>Document和DocumentFragment的parentNode是null，同样，一个刚刚创建的node，如果还没有加到dom树里面，它的parentNode同样是null。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//移除某element：</span></div><div class=\"line\">ele.parentNode.removeChild(ele);</div></pre></td></tr></table></figure></p>\n","excerpt":"<h2 id=\"Element-classList\"><a href=\"#Element-classList\" class=\"headerlink\" title=\"Element.classList\"></a>Element.classList</h2><p>返回DOMTokenList,IE version&gt;=10不完全支持。</p>\n<ol>\n<li>不支持classList.contains的第二个参数(force)</li>\n<li>add和remove方法不支持多参数</li>\n<li>SVG,MathML结点没有classList属性</li>\n</ol>\n<h2 id=\"Node种类\"><a href=\"#Node种类\" class=\"headerlink\" title=\"Node种类\"></a>Node种类</h2><h3 id=\"Node-nodeName\"><a href=\"#Node-nodeName\" class=\"headerlink\" title=\"Node.nodeName\"></a>Node.nodeName</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Interface</th>\n<th style=\"text-align:left\">nodeName</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Comment</td>\n<td style=\"text-align:left\">#comment</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Document</td>\n<td style=\"text-align:left\">#document</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DocumentFragment</td>\n<td style=\"text-align:left\">#document-fragment</td>\n</tr>\n</tbody>\n</table>","more":"<h2 id=\"Node的树遍历\"><a href=\"#Node的树遍历\" class=\"headerlink\" title=\"Node的树遍历\"></a>Node的树遍历</h2><p>Node树遍历普遍要考虑空白文字结点。(whitespace textNode)。</p>\n<h3 id=\"Node-childNodes\"><a href=\"#Node-childNodes\" class=\"headerlink\" title=\"Node.childNodes\"></a>Node.childNodes</h3><p>返回一个NodeList，表示该结点的所有子结点，包括文字结点和注释，该NodeList里面全部是object，并没有string。可以使用ParentNode.children来获得所有纯Element结点集合。</p>\n<h3 id=\"Node-firstChild\"><a href=\"#Node-firstChild\" class=\"headerlink\" title=\"Node.firstChild\"></a>Node.firstChild</h3><p>返回结点的第一个子结点。可能是whitespace textNode。<br>可以使用Element.firstElementChild来获得Element结点。</p>\n<h3 id=\"Node-lastChild\"><a href=\"#Node-lastChild\" class=\"headerlink\" title=\"Node.lastChild\"></a>Node.lastChild</h3><p>返回结点的最后一个子结点。可能是whitespace textNode。<br>可以使用Element.lastElementChild来获得Element结点。</p>\n<h3 id=\"Node-nextSibling\"><a href=\"#Node-nextSibling\" class=\"headerlink\" title=\"Node.nextSibling\"></a>Node.nextSibling</h3><p>返回下一个兄弟结点，可能是whitespace textNode。可以使用Element.nextElementSibling获得Element结点。</p>\n<h3 id=\"Node-previousSibling\"><a href=\"#Node-previousSibling\" class=\"headerlink\" title=\"Node.previousSibling\"></a>Node.previousSibling</h3><p>返回前一个兄弟结点，可能whitespace textNode。可以使用Element.previousElementSibling获得Element结点。</p>\n<h2 id=\"Node-innerText\"><a href=\"#Node-innerText\" class=\"headerlink\" title=\"Node.innerText\"></a>Node.innerText</h2><p>是一个非标准的属性，返回当前结点包括其子结点的所有文字。可以使用标准方法Node.textContent代替。</p>\n<h2 id=\"Node-textContent\"><a href=\"#Node-textContent\" class=\"headerlink\" title=\"Node.textContent\"></a>Node.textContent</h2><h2 id=\"Node-parentElement\"><a href=\"#Node-parentElement\" class=\"headerlink\" title=\"Node.parentElement\"></a>Node.parentElement</h2><p>返回当前Node的父Element元素，如果没有父Element元素，返回null。</p>\n<h2 id=\"Node-parentNode\"><a href=\"#Node-parentNode\" class=\"headerlink\" title=\"Node.parentNode\"></a>Node.parentNode</h2><p>一个元素的parentNode可能是另一个元素、Document或者DocumentFragment。<br>Document和DocumentFragment的parentNode是null，同样，一个刚刚创建的node，如果还没有加到dom树里面，它的parentNode同样是null。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//移除某element：</span></div><div class=\"line\">ele.parentNode.removeChild(ele);</div></pre></td></tr></table></figure></p>"},{"title":"github使用札记","date":"2014-08-10T05:01:03.000Z","_content":"\n1. 生成ssh key:\n\t\tssh-keygen -t rsa -C \"stkevintan@foxmail.com\"\n\n\t输入合适的密码。然后将生成的pub公钥粘贴到github上：[click here](https://github.com/settings/ssh)\n2. 版本推送命令：<!--more-->\n        ### Create a new repository on the command line\n\n            touch README.md\n            git init\n            git add README.md\n            git commit -m \"first commit\"\n            git remote add origin <span class=\"js-live-clone-url\">https://github.com/stkevintan/资源名.git</span>\n            <span class=\"js-selectable-text\">git push -u origin master</span>`</pre>\n\n            ### Push an existing repository from the command line\n\n            <pre>`git remote add origin <span class=\"js-live-clone-url\">https://github.com/stkevintan/资源名.git</span>\n            <span class=\"js-selectable-text\">git push -u origin master</span>\n3. 修改或删除passphrase。([Details](https://help.github.com/articles/working-with-ssh-key-passphrases/))\n\t\tssh-keygen -p","source":"_posts/github-tips.md","raw":"title: github使用札记\ntags:\n  - github\ncategories:\n  - Git\ndate: 2014-08-10 13:01:03\n---\n\n1. 生成ssh key:\n\t\tssh-keygen -t rsa -C \"stkevintan@foxmail.com\"\n\n\t输入合适的密码。然后将生成的pub公钥粘贴到github上：[click here](https://github.com/settings/ssh)\n2. 版本推送命令：<!--more-->\n        ### Create a new repository on the command line\n\n            touch README.md\n            git init\n            git add README.md\n            git commit -m \"first commit\"\n            git remote add origin <span class=\"js-live-clone-url\">https://github.com/stkevintan/资源名.git</span>\n            <span class=\"js-selectable-text\">git push -u origin master</span>`</pre>\n\n            ### Push an existing repository from the command line\n\n            <pre>`git remote add origin <span class=\"js-live-clone-url\">https://github.com/stkevintan/资源名.git</span>\n            <span class=\"js-selectable-text\">git push -u origin master</span>\n3. 修改或删除passphrase。([Details](https://help.github.com/articles/working-with-ssh-key-passphrases/))\n\t\tssh-keygen -p","slug":"github-tips","published":1,"updated":"2015-02-26T03:00:55.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8n0000dwppvylwi9l7f","content":"<ol>\n<li><p>生成ssh key:</p>\n<pre><code>ssh-keygen -t rsa -C &quot;stkevintan@foxmail.com&quot;\n</code></pre><p> 输入合适的密码。然后将生成的pub公钥粘贴到github上：<a href=\"https://github.com/settings/ssh\" target=\"_blank\" rel=\"external\">click here</a></p>\n</li>\n<li><p>版本推送命令：<a id=\"more\"></a></p>\n<pre><code>### Create a new repository on the command line\n\n    touch README.md\n    git init\n    git add README.md\n    git commit -m &quot;first commit&quot;\n    git remote add origin &lt;span class=&quot;js-live-clone-url&quot;&gt;https://github.com/stkevintan/资源名.git&lt;/span&gt;\n    &lt;span class=&quot;js-selectable-text&quot;&gt;git push -u origin master&lt;/span&gt;`&lt;/pre&gt;\n\n    ### Push an existing repository from the command line\n\n    &lt;pre&gt;`git remote add origin &lt;span class=&quot;js-live-clone-url&quot;&gt;https://github.com/stkevintan/资源名.git&lt;/span&gt;\n    &lt;span class=&quot;js-selectable-text&quot;&gt;git push -u origin master&lt;/span&gt;\n</code></pre></li>\n<li>修改或删除passphrase。(<a href=\"https://help.github.com/articles/working-with-ssh-key-passphrases/\" target=\"_blank\" rel=\"external\">Details</a>)<pre><code>ssh-keygen -p\n</code></pre></li>\n</ol>\n","excerpt":"<ol>\n<li><p>生成ssh key:</p>\n<pre><code>ssh-keygen -t rsa -C &quot;stkevintan@foxmail.com&quot;\n</code></pre><p> 输入合适的密码。然后将生成的pub公钥粘贴到github上：<a href=\"https://github.com/settings/ssh\">click here</a></p>\n</li>\n<li><p>版本推送命令：","more":"</p>\n<pre><code>### Create a new repository on the command line\n\n    touch README.md\n    git init\n    git add README.md\n    git commit -m &quot;first commit&quot;\n    git remote add origin &lt;span class=&quot;js-live-clone-url&quot;&gt;https://github.com/stkevintan/资源名.git&lt;/span&gt;\n    &lt;span class=&quot;js-selectable-text&quot;&gt;git push -u origin master&lt;/span&gt;`&lt;/pre&gt;\n\n    ### Push an existing repository from the command line\n\n    &lt;pre&gt;`git remote add origin &lt;span class=&quot;js-live-clone-url&quot;&gt;https://github.com/stkevintan/资源名.git&lt;/span&gt;\n    &lt;span class=&quot;js-selectable-text&quot;&gt;git push -u origin master&lt;/span&gt;\n</code></pre></li>\n<li>修改或删除passphrase。(<a href=\"https://help.github.com/articles/working-with-ssh-key-passphrases/\">Details</a>)<pre><code>ssh-keygen -p\n</code></pre></li>\n</ol>"},{"title":"FFT求快速卷积的思考","date":"2014-11-06T12:15:54.000Z","_content":"\n离散型卷积的定义是：$$y(n)=\\sum_{m=0}^{n} x(m)h(n-m)$$\n\n注意，h函数是反转的。\n\n在Chipher Messages一题中，b串需要反转再与a串匹配。\n\n比如说：\n\na串： 110110110，则：\n\nb\\`串：1011&lt;------这里才是原来b串的头。但是向上对应到a串时，已经是m-1这个位置了。所以说，小于m-1的卷积是没有意义的。\n\n于是，base=m。整体匹配。\n<!--more-->\n\n同样的，比如杭电1402用FFT求A×B那一题。\n\n可以把A串看成卷积中的x函数，而把B串的**每一个字符**看成h函数。那么卷积就可以看成是一个模拟乘法的过程。\n\n因为h函数是要求逆序的，但是此时的h函数只有**一个字符**所以反转操作无意义。这时候的base=1。单个匹配。\n\n估计FFT就这两种情况了。因为如果1&lt;base&lt;m，那么就应该直接将b串分解成若干base长度的串了。","source":"_posts/fft-thoughts.md","raw":"title: FFT求快速卷积的思考\ncategories: ACM\ndate: 2014-11-06 20:15:54\ntags: [数论,只言片语]\n---\n\n离散型卷积的定义是：$$y(n)=\\sum_{m=0}^{n} x(m)h(n-m)$$\n\n注意，h函数是反转的。\n\n在Chipher Messages一题中，b串需要反转再与a串匹配。\n\n比如说：\n\na串： 110110110，则：\n\nb\\`串：1011&lt;------这里才是原来b串的头。但是向上对应到a串时，已经是m-1这个位置了。所以说，小于m-1的卷积是没有意义的。\n\n于是，base=m。整体匹配。\n<!--more-->\n\n同样的，比如杭电1402用FFT求A×B那一题。\n\n可以把A串看成卷积中的x函数，而把B串的**每一个字符**看成h函数。那么卷积就可以看成是一个模拟乘法的过程。\n\n因为h函数是要求逆序的，但是此时的h函数只有**一个字符**所以反转操作无意义。这时候的base=1。单个匹配。\n\n估计FFT就这两种情况了。因为如果1&lt;base&lt;m，那么就应该直接将b串分解成若干base长度的串了。","slug":"fft-thoughts","published":1,"updated":"2015-02-26T02:44:23.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8n2000fwppv97fiwf53","content":"<p>离散型卷积的定义是：$$y(n)=\\sum_{m=0}^{n} x(m)h(n-m)$$</p>\n<p>注意，h函数是反转的。</p>\n<p>在Chipher Messages一题中，b串需要反转再与a串匹配。</p>\n<p>比如说：</p>\n<p>a串： 110110110，则：</p>\n<p>b`串：1011&lt;——这里才是原来b串的头。但是向上对应到a串时，已经是m-1这个位置了。所以说，小于m-1的卷积是没有意义的。</p>\n<p>于是，base=m。整体匹配。<br><a id=\"more\"></a></p>\n<p>同样的，比如杭电1402用FFT求A×B那一题。</p>\n<p>可以把A串看成卷积中的x函数，而把B串的<strong>每一个字符</strong>看成h函数。那么卷积就可以看成是一个模拟乘法的过程。</p>\n<p>因为h函数是要求逆序的，但是此时的h函数只有<strong>一个字符</strong>所以反转操作无意义。这时候的base=1。单个匹配。</p>\n<p>估计FFT就这两种情况了。因为如果1&lt;base&lt;m，那么就应该直接将b串分解成若干base长度的串了。</p>\n","excerpt":"<p>离散型卷积的定义是：$$y(n)=\\sum_{m=0}^{n} x(m)h(n-m)$$</p>\n<p>注意，h函数是反转的。</p>\n<p>在Chipher Messages一题中，b串需要反转再与a串匹配。</p>\n<p>比如说：</p>\n<p>a串： 110110110，则：</p>\n<p>b`串：1011&lt;——这里才是原来b串的头。但是向上对应到a串时，已经是m-1这个位置了。所以说，小于m-1的卷积是没有意义的。</p>\n<p>于是，base=m。整体匹配。<br>","more":"</p>\n<p>同样的，比如杭电1402用FFT求A×B那一题。</p>\n<p>可以把A串看成卷积中的x函数，而把B串的<strong>每一个字符</strong>看成h函数。那么卷积就可以看成是一个模拟乘法的过程。</p>\n<p>因为h函数是要求逆序的，但是此时的h函数只有<strong>一个字符</strong>所以反转操作无意义。这时候的base=1。单个匹配。</p>\n<p>估计FFT就这两种情况了。因为如果1&lt;base&lt;m，那么就应该直接将b串分解成若干base长度的串了。</p>"},{"title":"HDU 4945 2048","id":"91","date":"2014-08-15T08:56:19.000Z","_content":"\n**<span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 3000/1500 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)\nTotal Submission(s): 590    Accepted Submission(s): 136\n</span>**\n<div class=\"panel_title\" align=\"left\">Problem Description</div>\n<div class=\"panel_content\">\n\nTeacher Mai is addicted to game 2048\\. But finally he finds it's too hard to get 2048\\. So he wants to change the rule:\n\nYou are given some numbers. Every time you can choose two numbers of the same value from them and merge these two numbers into their sum. And these two numbers disappear meanwhile.\n\nIf we can get 2048 from a set of numbers with this operation, Teacher Mai think this multiset is good.\n\nYou have n numbers, A<sub>1</sub>,...,A<sub>n</sub>. Teacher Mai ask you how many subsequences of A are good.\n\nThe number can be very large, just output the number modulo 998244353.\n<!--more-->\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Input</div>\n<div class=\"panel_content\">\n\nThere are multiple test cases, terminated by a line \"0\".\n\nFor each test case, the first line contains an integer n (1&lt;=n&lt;=10^5), the next line contains n integers a<sub>i</sub> (0&lt;=a<sub>i</sub>&lt;=2048).\n\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Output</div>\n<div class=\"panel_content\">For each test case, output one line \"Case #k: ans\", where k is the case number counting from 1, ans is the number module 998244353.</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Input</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">4 1024 512 256 256 4 1024 1024 1024 1024 5 1024 512 512 512 1 0</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Output</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">\n\nCase #1: 1 Case #2: 11 Case #3: 8\n<div style=\"font-family: Times New Roman; font-size: 14px; background-color: f4fbff; border: #B7CBFF 1px dashed; padding: 6px;\">\n<div style=\"font-family: Arial; font-weight: bold; color: #7ca9ed; border-bottom: #B7CBFF 1px dashed;\">_Hint_</div>\nIn the first case, we should choose all the numbers. In the second case, all the subsequences which contain more than one number are good.\n\n</div>\n&nbsp;\n\n</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Source</div>\n<div class=\"panel_content\">[ 2014 Multi-University Training Contest 8 ](http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2014%20Multi-University%20Training%20Contest%208&amp;source=1&amp;searchmode=source)</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Recommend</div>\n<div class=\"panel_content\">hujie   |   We have carefully selected several similar problems for you:  [4955](http://acm.hdu.edu.cn/showproblem.php?pid=4955) [4954](http://acm.hdu.edu.cn/showproblem.php?pid=4954) [4953](http://acm.hdu.edu.cn/showproblem.php?pid=4953) [4952](http://acm.hdu.edu.cn/showproblem.php?pid=4952) [4951](http://acm.hdu.edu.cn/showproblem.php?pid=4951)</div>\n<br/>\n- - -\n\n\n<div class=\"panel_content\">貌似这几天第一次做的DP题啊。想象一下二进制就能明白——当子序列的2次幂数字之和大于等于2048时这个序列就是good序列了。正面dp要dp出2048~100000肯定要超时，而反面dp只需要dp出0~2047就够了。复杂度大大降低O（11＊2048*2048）。</div>\n<div class=\"panel_content\">标程写的很厉害！尤其是逆元的处理！</div>\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;cmath&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define PR pair&lt;int,int&gt;\n#define MP make_pair\n#define SI(x) set&lt;x&gt;::iterator\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set&lt;x&gt;::reverse_iterator\n#define VRI(x) vector&lt;x&gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define Sz(x) (int)x.size()\n#define clrQ(x) while(!x.empty)x.pop();\n#define clr(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n/*start*/\n#define MOD 998244353\nint cnt[3010];\nLL f[101000], g[101000];\nint pn, n, __;\nint dp[13][1025]; //表示取了2^0、2^1、2^2、……、2^i种元素，总和加起来等于j*2^(i+1)的所有情况\ninline int getint() {\n    int ret = 0;\n    bool ok = 0;\n    for (;;) {\n        int c = getchar();\n        if (c &gt;= '0' &amp;&amp; c &lt;= '9') ret = (ret &lt;&lt; 3) + ret + ret + c - '0', ok = 1;\n        else if (ok) return ret;\n    }\n}\ninline LL powmod(LL b, int x) {\n    LL res = 1;\n    for (b %= MOD; x; x &gt;&gt;= 1) {\n        if (x &amp; 1) res = res * b % MOD;\n        b = b * b % MOD;\n    }\n    return res;\n}\nint main(int argc, char **argv) {\n    f[0] = 1;\n    for (int i = 1; i &lt;= 100000; i++)\n        f[i] = f[i - 1] * i % MOD;\n    g[100000] = powmod(f[100000], MOD - 2);\n    for (int i = 99999; i &gt;= 0; i--)\n        g[i] = g[i + 1] * (i + 1) % MOD;\n\n    while (1) {\n        n = getint();\n        if (n == 0) break;\n        for (int k = 1; k &lt;= 2048; k &lt;&lt;= 1)\n            cnt[k] = 0;\n        for (int i = 0; i &lt; n; i++) {\n            cnt[getint()]++;\n        }\n        pn = 0;\n        for (int k = 1; k &lt;= 2048; k &lt;&lt;= 1)\n            pn += cnt[k];\n        for (int i = 0, m = 1024; i &lt;= 11; i++, m &gt;&gt;= 1) {\n            for (int j = 0; j &lt;= m; j++) {\n                dp[i][j] = 0;\n            }\n        }\n        int ct = cnt[1];\n        LL cof = f[ct];\n        for (int i = 0; i &lt;= ct &amp;&amp; i &lt; 2048; i++) {\n            dp[0][i &gt;&gt; 1] += g[ct - i] * g[i] % MOD;\n            if (dp[0][i &gt;&gt; 1] &gt; MOD) dp[0][i &gt;&gt; 1] -= MOD;\n        }\n\n        for (int i = 1, m = 1024; i &lt;= 11; i++, m &gt;&gt;= 1) {\n            ct = cnt[1 &lt;&lt; i];\n            cof = cof * f[ct] % MOD;\n            for (int j = 0; j &lt; m; j++) { \n                if (dp[i - 1][j]) {\n                    for (int k = 0; k &lt;= ct &amp;&amp; j + k &lt; m; k++) {//不要把满足good的序列转移上去。\n                        dp[i][(j + k) &gt;&gt; 1] += dp[i - 1][j] * g[k] % MOD * g[ct - k] % MOD;\n                        if (dp[i][(j + k) &gt;&gt; 1] &gt; MOD) dp[i][(j + k) &gt;&gt; 1] -= MOD;\n                    }\n                }\n            }\n        }\n\n        int ans = (powmod(2, pn) - dp[11][0] * cof) % MOD\n                * powmod(2, n - pn)%MOD;\n        if (ans &lt; 0) ans += MOD;\n        printf(\"Case #%d: %d\\n\", ++__, ans);\n    }\n}\n```","source":"_posts/hdu-4945-2048.md","raw":"title: HDU 4945 2048\ncategories:\n  - ACM\nid: 91\ndate: 2014-08-15 16:56:19\ntags: DP\n---\n\n**<span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 3000/1500 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)\nTotal Submission(s): 590    Accepted Submission(s): 136\n</span>**\n<div class=\"panel_title\" align=\"left\">Problem Description</div>\n<div class=\"panel_content\">\n\nTeacher Mai is addicted to game 2048\\. But finally he finds it's too hard to get 2048\\. So he wants to change the rule:\n\nYou are given some numbers. Every time you can choose two numbers of the same value from them and merge these two numbers into their sum. And these two numbers disappear meanwhile.\n\nIf we can get 2048 from a set of numbers with this operation, Teacher Mai think this multiset is good.\n\nYou have n numbers, A<sub>1</sub>,...,A<sub>n</sub>. Teacher Mai ask you how many subsequences of A are good.\n\nThe number can be very large, just output the number modulo 998244353.\n<!--more-->\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Input</div>\n<div class=\"panel_content\">\n\nThere are multiple test cases, terminated by a line \"0\".\n\nFor each test case, the first line contains an integer n (1&lt;=n&lt;=10^5), the next line contains n integers a<sub>i</sub> (0&lt;=a<sub>i</sub>&lt;=2048).\n\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Output</div>\n<div class=\"panel_content\">For each test case, output one line \"Case #k: ans\", where k is the case number counting from 1, ans is the number module 998244353.</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Input</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">4 1024 512 256 256 4 1024 1024 1024 1024 5 1024 512 512 512 1 0</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Output</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">\n\nCase #1: 1 Case #2: 11 Case #3: 8\n<div style=\"font-family: Times New Roman; font-size: 14px; background-color: f4fbff; border: #B7CBFF 1px dashed; padding: 6px;\">\n<div style=\"font-family: Arial; font-weight: bold; color: #7ca9ed; border-bottom: #B7CBFF 1px dashed;\">_Hint_</div>\nIn the first case, we should choose all the numbers. In the second case, all the subsequences which contain more than one number are good.\n\n</div>\n&nbsp;\n\n</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Source</div>\n<div class=\"panel_content\">[ 2014 Multi-University Training Contest 8 ](http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2014%20Multi-University%20Training%20Contest%208&amp;source=1&amp;searchmode=source)</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Recommend</div>\n<div class=\"panel_content\">hujie   |   We have carefully selected several similar problems for you:  [4955](http://acm.hdu.edu.cn/showproblem.php?pid=4955) [4954](http://acm.hdu.edu.cn/showproblem.php?pid=4954) [4953](http://acm.hdu.edu.cn/showproblem.php?pid=4953) [4952](http://acm.hdu.edu.cn/showproblem.php?pid=4952) [4951](http://acm.hdu.edu.cn/showproblem.php?pid=4951)</div>\n<br/>\n- - -\n\n\n<div class=\"panel_content\">貌似这几天第一次做的DP题啊。想象一下二进制就能明白——当子序列的2次幂数字之和大于等于2048时这个序列就是good序列了。正面dp要dp出2048~100000肯定要超时，而反面dp只需要dp出0~2047就够了。复杂度大大降低O（11＊2048*2048）。</div>\n<div class=\"panel_content\">标程写的很厉害！尤其是逆元的处理！</div>\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;cmath&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define PR pair&lt;int,int&gt;\n#define MP make_pair\n#define SI(x) set&lt;x&gt;::iterator\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set&lt;x&gt;::reverse_iterator\n#define VRI(x) vector&lt;x&gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define Sz(x) (int)x.size()\n#define clrQ(x) while(!x.empty)x.pop();\n#define clr(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n/*start*/\n#define MOD 998244353\nint cnt[3010];\nLL f[101000], g[101000];\nint pn, n, __;\nint dp[13][1025]; //表示取了2^0、2^1、2^2、……、2^i种元素，总和加起来等于j*2^(i+1)的所有情况\ninline int getint() {\n    int ret = 0;\n    bool ok = 0;\n    for (;;) {\n        int c = getchar();\n        if (c &gt;= '0' &amp;&amp; c &lt;= '9') ret = (ret &lt;&lt; 3) + ret + ret + c - '0', ok = 1;\n        else if (ok) return ret;\n    }\n}\ninline LL powmod(LL b, int x) {\n    LL res = 1;\n    for (b %= MOD; x; x &gt;&gt;= 1) {\n        if (x &amp; 1) res = res * b % MOD;\n        b = b * b % MOD;\n    }\n    return res;\n}\nint main(int argc, char **argv) {\n    f[0] = 1;\n    for (int i = 1; i &lt;= 100000; i++)\n        f[i] = f[i - 1] * i % MOD;\n    g[100000] = powmod(f[100000], MOD - 2);\n    for (int i = 99999; i &gt;= 0; i--)\n        g[i] = g[i + 1] * (i + 1) % MOD;\n\n    while (1) {\n        n = getint();\n        if (n == 0) break;\n        for (int k = 1; k &lt;= 2048; k &lt;&lt;= 1)\n            cnt[k] = 0;\n        for (int i = 0; i &lt; n; i++) {\n            cnt[getint()]++;\n        }\n        pn = 0;\n        for (int k = 1; k &lt;= 2048; k &lt;&lt;= 1)\n            pn += cnt[k];\n        for (int i = 0, m = 1024; i &lt;= 11; i++, m &gt;&gt;= 1) {\n            for (int j = 0; j &lt;= m; j++) {\n                dp[i][j] = 0;\n            }\n        }\n        int ct = cnt[1];\n        LL cof = f[ct];\n        for (int i = 0; i &lt;= ct &amp;&amp; i &lt; 2048; i++) {\n            dp[0][i &gt;&gt; 1] += g[ct - i] * g[i] % MOD;\n            if (dp[0][i &gt;&gt; 1] &gt; MOD) dp[0][i &gt;&gt; 1] -= MOD;\n        }\n\n        for (int i = 1, m = 1024; i &lt;= 11; i++, m &gt;&gt;= 1) {\n            ct = cnt[1 &lt;&lt; i];\n            cof = cof * f[ct] % MOD;\n            for (int j = 0; j &lt; m; j++) { \n                if (dp[i - 1][j]) {\n                    for (int k = 0; k &lt;= ct &amp;&amp; j + k &lt; m; k++) {//不要把满足good的序列转移上去。\n                        dp[i][(j + k) &gt;&gt; 1] += dp[i - 1][j] * g[k] % MOD * g[ct - k] % MOD;\n                        if (dp[i][(j + k) &gt;&gt; 1] &gt; MOD) dp[i][(j + k) &gt;&gt; 1] -= MOD;\n                    }\n                }\n            }\n        }\n\n        int ans = (powmod(2, pn) - dp[11][0] * cof) % MOD\n                * powmod(2, n - pn)%MOD;\n        if (ans &lt; 0) ans += MOD;\n        printf(\"Case #%d: %d\\n\", ++__, ans);\n    }\n}\n```","slug":"hdu-4945-2048","published":1,"updated":"2015-02-26T02:47:19.640Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8n4000jwppvy4osdyne","content":"<p><strong><span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 3000/1500 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)<br>Total Submission(s): 590    Accepted Submission(s): 136<br></span></strong></p>\n<p><div class=\"panel_title\" align=\"left\">Problem Description</div></p>\n<div class=\"panel_content\">\n\n<p>Teacher Mai is addicted to game 2048. But finally he finds it’s too hard to get 2048. So he wants to change the rule:</p>\n<p>You are given some numbers. Every time you can choose two numbers of the same value from them and merge these two numbers into their sum. And these two numbers disappear meanwhile.</p>\n<p>If we can get 2048 from a set of numbers with this operation, Teacher Mai think this multiset is good.</p>\n<p>You have n numbers, A<sub>1</sub>,…,A<sub>n</sub>. Teacher Mai ask you how many subsequences of A are good.</p>\n<p>The number can be very large, just output the number modulo 998244353.<br><a id=\"more\"></a><br></p></div><p></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Input</div></p>\n<div class=\"panel_content\">\n\n<p>There are multiple test cases, terminated by a line “0”.</p>\n<p>For each test case, the first line contains an integer n (1&lt;=n&lt;=10^5), the next line contains n integers a<sub>i</sub> (0&lt;=a<sub>i</sub>&lt;=2048).</p>\n<p></p></div><p></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Output</div></p>\n<p><div class=\"panel_content\">For each test case, output one line “Case #k: ans”, where k is the case number counting from 1, ans is the number module 998244353.</div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Input</div></p>\n<p><div class=\"panel_content\"></div></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">4 1024 512 256 256 4 1024 1024 1024 1024 5 1024 512 512 512 1 0</div><br></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Output</div></p>\n<p><div class=\"panel_content\"></div></p>\n<div style=\"font-family: Courier New,Courier,monospace;\">\n\n<p>Case #1: 1 Case #2: 11 Case #3: 8</p>\n<p><div style=\"font-family: Times New Roman; font-size: 14px; background-color: f4fbff; border: #B7CBFF 1px dashed; padding: 6px;\"></div></p>\n<p><div style=\"font-family: Arial; font-weight: bold; color: #7ca9ed; border-bottom: #B7CBFF 1px dashed;\"><em>Hint</em></div><br>In the first case, we should choose all the numbers. In the second case, all the subsequences which contain more than one number are good.</p>\n<p></p></div><br>&nbsp;<p></p>\n<p><br></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Source</div></p>\n<p><div class=\"panel_content\"><a href=\"http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2014%20Multi-University%20Training%20Contest%208&amp;source=1&amp;searchmode=source\" target=\"_blank\" rel=\"external\"> 2014 Multi-University Training Contest 8 </a></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Recommend</div></p>\n<p><div class=\"panel_content\">hujie   |   We have carefully selected several similar problems for you:  <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4955\" target=\"_blank\" rel=\"external\">4955</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4954\" target=\"_blank\" rel=\"external\">4954</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4953\" target=\"_blank\" rel=\"external\">4953</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4952\" target=\"_blank\" rel=\"external\">4952</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4951\" target=\"_blank\" rel=\"external\">4951</a></div><br><br></p>\n<hr>\n<p><div class=\"panel_content\">貌似这几天第一次做的DP题啊。想象一下二进制就能明白——当子序列的2次幂数字之和大于等于2048时这个序列就是good序列了。正面dp要dp出2048~100000肯定要超时，而反面dp只需要dp出0~2047就够了。复杂度大大降低O（11＊2048*2048）。</div></p>\n<p><div class=\"panel_content\">标程写的很厉害！尤其是逆元的处理！</div><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;map&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;set&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cmath&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;stack&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;queue&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;string&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstdio&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;vector&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cctype&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cassert&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;utility&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;numeric&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstring&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;iostream&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;algorithm&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pr pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PR pair&amp;lt;int,int&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MP make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Sz(x) (int)x.size()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrQ(x) while(!x.empty)x.pop();</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clr(x,y) memset(x,y,sizeof(x));</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = ~<span class=\"number\">0u</span> &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL lnf = ~<span class=\"number\">0u</span>ll &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"comment\">/*start*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOD 998244353</span></div><div class=\"line\"><span class=\"keyword\">int</span> cnt[<span class=\"number\">3010</span>];</div><div class=\"line\">LL f[<span class=\"number\">101000</span>], g[<span class=\"number\">101000</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> pn, n, <span class=\"number\">__</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">13</span>][<span class=\"number\">1025</span>]; <span class=\"comment\">//表示取了2^0、2^1、2^2、……、2^i种元素，总和加起来等于j*2^(i+1)的所有情况</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">getint</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">bool</span> ok = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> c = getchar();</div><div class=\"line\">        <span class=\"keyword\">if</span> (c &amp;gt;= <span class=\"string\">'0'</span> &amp;amp;&amp;amp; c &amp;lt;= <span class=\"string\">'9'</span>) ret = (ret &amp;lt;&amp;lt; <span class=\"number\">3</span>) + ret + ret + c - <span class=\"string\">'0'</span>, ok = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ok) <span class=\"keyword\">return</span> ret;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> LL <span class=\"title\">powmod</span><span class=\"params\">(LL b, <span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    LL res = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (b %= MOD; x; x &amp;gt;&amp;gt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (x &amp;amp; <span class=\"number\">1</span>) res = res * b % MOD;</div><div class=\"line\">        b = b * b % MOD;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</div><div class=\"line\">    f[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= <span class=\"number\">100000</span>; i++)</div><div class=\"line\">        f[i] = f[i - <span class=\"number\">1</span>] * i % MOD;</div><div class=\"line\">    g[<span class=\"number\">100000</span>] = powmod(f[<span class=\"number\">100000</span>], MOD - <span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">99999</span>; i &amp;gt;= <span class=\"number\">0</span>; i--)</div><div class=\"line\">        g[i] = g[i + <span class=\"number\">1</span>] * (i + <span class=\"number\">1</span>) % MOD;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</div><div class=\"line\">        n = getint();</div><div class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &amp;lt;= <span class=\"number\">2048</span>; k &amp;lt;&amp;lt;= <span class=\"number\">1</span>)</div><div class=\"line\">            cnt[k] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            cnt[getint()]++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        pn = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &amp;lt;= <span class=\"number\">2048</span>; k &amp;lt;&amp;lt;= <span class=\"number\">1</span>)</div><div class=\"line\">            pn += cnt[k];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, m = <span class=\"number\">1024</span>; i &amp;lt;= <span class=\"number\">11</span>; i++, m &amp;gt;&amp;gt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &amp;lt;= m; j++) &#123;</div><div class=\"line\">                dp[i][j] = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> ct = cnt[<span class=\"number\">1</span>];</div><div class=\"line\">        LL cof = f[ct];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt;= ct &amp;amp;&amp;amp; i &amp;lt; <span class=\"number\">2048</span>; i++) &#123;</div><div class=\"line\">            dp[<span class=\"number\">0</span>][i &amp;gt;&amp;gt; <span class=\"number\">1</span>] += g[ct - i] * g[i] % MOD;</div><div class=\"line\">            <span class=\"keyword\">if</span> (dp[<span class=\"number\">0</span>][i &amp;gt;&amp;gt; <span class=\"number\">1</span>] &amp;gt; MOD) dp[<span class=\"number\">0</span>][i &amp;gt;&amp;gt; <span class=\"number\">1</span>] -= MOD;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>, m = <span class=\"number\">1024</span>; i &amp;lt;= <span class=\"number\">11</span>; i++, m &amp;gt;&amp;gt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            ct = cnt[<span class=\"number\">1</span> &amp;lt;&amp;lt; i];</div><div class=\"line\">            cof = cof * f[ct] % MOD;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &amp;lt; m; j++) &#123; </div><div class=\"line\">                <span class=\"keyword\">if</span> (dp[i - <span class=\"number\">1</span>][j]) &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &amp;lt;= ct &amp;amp;&amp;amp; j + k &amp;lt; m; k++) &#123;<span class=\"comment\">//不要把满足good的序列转移上去。</span></div><div class=\"line\">                        dp[i][(j + k) &amp;gt;&amp;gt; <span class=\"number\">1</span>] += dp[i - <span class=\"number\">1</span>][j] * g[k] % MOD * g[ct - k] % MOD;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (dp[i][(j + k) &amp;gt;&amp;gt; <span class=\"number\">1</span>] &amp;gt; MOD) dp[i][(j + k) &amp;gt;&amp;gt; <span class=\"number\">1</span>] -= MOD;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> ans = (powmod(<span class=\"number\">2</span>, pn) - dp[<span class=\"number\">11</span>][<span class=\"number\">0</span>] * cof) % MOD</div><div class=\"line\">                * powmod(<span class=\"number\">2</span>, n - pn)%MOD;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ans &amp;lt; <span class=\"number\">0</span>) ans += MOD;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Case #%d: %d\\n\"</span>, ++<span class=\"number\">__</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p><strong><span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 3000/1500 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)<br>Total Submission(s): 590    Accepted Submission(s): 136<br></span></strong></p>\n<p><div class=\"panel_title\" align=\"left\">Problem Description</div></p>\n<div class=\"panel_content\">\n\n<p>Teacher Mai is addicted to game 2048. But finally he finds it’s too hard to get 2048. So he wants to change the rule:</p>\n<p>You are given some numbers. Every time you can choose two numbers of the same value from them and merge these two numbers into their sum. And these two numbers disappear meanwhile.</p>\n<p>If we can get 2048 from a set of numbers with this operation, Teacher Mai think this multiset is good.</p>\n<p>You have n numbers, A<sub>1</sub>,…,A<sub>n</sub>. Teacher Mai ask you how many subsequences of A are good.</p>\n<p>The number can be very large, just output the number modulo 998244353.<br>","more":"<br></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Input</div></p>\n<div class=\"panel_content\">\n\n<p>There are multiple test cases, terminated by a line “0”.</p>\n<p>For each test case, the first line contains an integer n (1&lt;=n&lt;=10^5), the next line contains n integers a<sub>i</sub> (0&lt;=a<sub>i</sub>&lt;=2048).</p>\n<p></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Output</div></p>\n<p><div class=\"panel_content\">For each test case, output one line “Case #k: ans”, where k is the case number counting from 1, ans is the number module 998244353.</div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Input</div></p>\n<p><div class=\"panel_content\"></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">4 1024 512 256 256 4 1024 1024 1024 1024 5 1024 512 512 512 1 0</div><br></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Output</div></p>\n<p><div class=\"panel_content\"></p>\n<div style=\"font-family: Courier New,Courier,monospace;\">\n\n<p>Case #1: 1 Case #2: 11 Case #3: 8</p>\n<p><div style=\"font-family: Times New Roman; font-size: 14px; background-color: f4fbff; border: #B7CBFF 1px dashed; padding: 6px;\"></p>\n<p><div style=\"font-family: Arial; font-weight: bold; color: #7ca9ed; border-bottom: #B7CBFF 1px dashed;\"><em>Hint</em></div><br>In the first case, we should choose all the numbers. In the second case, all the subsequences which contain more than one number are good.</p>\n<p></div><br>&nbsp;</p>\n<p></div><br></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Source</div></p>\n<p><div class=\"panel_content\"><a href=\"http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2014%20Multi-University%20Training%20Contest%208&amp;source=1&amp;searchmode=source\"> 2014 Multi-University Training Contest 8 </a></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Recommend</div></p>\n<p><div class=\"panel_content\">hujie   |   We have carefully selected several similar problems for you:  <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4955\">4955</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4954\">4954</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4953\">4953</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4952\">4952</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4951\">4951</a></div><br><br/></p>\n<hr>\n<p><div class=\"panel_content\">貌似这几天第一次做的DP题啊。想象一下二进制就能明白——当子序列的2次幂数字之和大于等于2048时这个序列就是good序列了。正面dp要dp出2048~100000肯定要超时，而反面dp只需要dp出0~2047就够了。复杂度大大降低O（11＊2048*2048）。</div></p>\n<p><div class=\"panel_content\">标程写的很厉害！尤其是逆元的处理！</div><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;map&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;set&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cmath&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;stack&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;queue&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;string&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstdio&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;vector&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cctype&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cassert&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;utility&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;numeric&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstring&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;iostream&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;algorithm&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pr pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PR pair&amp;lt;int,int&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MP make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Sz(x) (int)x.size()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrQ(x) while(!x.empty)x.pop();</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clr(x,y) memset(x,y,sizeof(x));</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = ~<span class=\"number\">0u</span> &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL lnf = ~<span class=\"number\">0u</span>ll &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"comment\">/*start*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOD 998244353</span></div><div class=\"line\"><span class=\"keyword\">int</span> cnt[<span class=\"number\">3010</span>];</div><div class=\"line\">LL f[<span class=\"number\">101000</span>], g[<span class=\"number\">101000</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> pn, n, <span class=\"number\">__</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">13</span>][<span class=\"number\">1025</span>]; <span class=\"comment\">//表示取了2^0、2^1、2^2、……、2^i种元素，总和加起来等于j*2^(i+1)的所有情况</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">getint</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">bool</span> ok = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> c = getchar();</div><div class=\"line\">        <span class=\"keyword\">if</span> (c &amp;gt;= <span class=\"string\">'0'</span> &amp;amp;&amp;amp; c &amp;lt;= <span class=\"string\">'9'</span>) ret = (ret &amp;lt;&amp;lt; <span class=\"number\">3</span>) + ret + ret + c - <span class=\"string\">'0'</span>, ok = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ok) <span class=\"keyword\">return</span> ret;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> LL <span class=\"title\">powmod</span><span class=\"params\">(LL b, <span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    LL res = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (b %= MOD; x; x &amp;gt;&amp;gt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (x &amp;amp; <span class=\"number\">1</span>) res = res * b % MOD;</div><div class=\"line\">        b = b * b % MOD;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</div><div class=\"line\">    f[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= <span class=\"number\">100000</span>; i++)</div><div class=\"line\">        f[i] = f[i - <span class=\"number\">1</span>] * i % MOD;</div><div class=\"line\">    g[<span class=\"number\">100000</span>] = powmod(f[<span class=\"number\">100000</span>], MOD - <span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">99999</span>; i &amp;gt;= <span class=\"number\">0</span>; i--)</div><div class=\"line\">        g[i] = g[i + <span class=\"number\">1</span>] * (i + <span class=\"number\">1</span>) % MOD;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</div><div class=\"line\">        n = getint();</div><div class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &amp;lt;= <span class=\"number\">2048</span>; k &amp;lt;&amp;lt;= <span class=\"number\">1</span>)</div><div class=\"line\">            cnt[k] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            cnt[getint()]++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        pn = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &amp;lt;= <span class=\"number\">2048</span>; k &amp;lt;&amp;lt;= <span class=\"number\">1</span>)</div><div class=\"line\">            pn += cnt[k];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, m = <span class=\"number\">1024</span>; i &amp;lt;= <span class=\"number\">11</span>; i++, m &amp;gt;&amp;gt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &amp;lt;= m; j++) &#123;</div><div class=\"line\">                dp[i][j] = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> ct = cnt[<span class=\"number\">1</span>];</div><div class=\"line\">        LL cof = f[ct];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt;= ct &amp;amp;&amp;amp; i &amp;lt; <span class=\"number\">2048</span>; i++) &#123;</div><div class=\"line\">            dp[<span class=\"number\">0</span>][i &amp;gt;&amp;gt; <span class=\"number\">1</span>] += g[ct - i] * g[i] % MOD;</div><div class=\"line\">            <span class=\"keyword\">if</span> (dp[<span class=\"number\">0</span>][i &amp;gt;&amp;gt; <span class=\"number\">1</span>] &amp;gt; MOD) dp[<span class=\"number\">0</span>][i &amp;gt;&amp;gt; <span class=\"number\">1</span>] -= MOD;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>, m = <span class=\"number\">1024</span>; i &amp;lt;= <span class=\"number\">11</span>; i++, m &amp;gt;&amp;gt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            ct = cnt[<span class=\"number\">1</span> &amp;lt;&amp;lt; i];</div><div class=\"line\">            cof = cof * f[ct] % MOD;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &amp;lt; m; j++) &#123; </div><div class=\"line\">                <span class=\"keyword\">if</span> (dp[i - <span class=\"number\">1</span>][j]) &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &amp;lt;= ct &amp;amp;&amp;amp; j + k &amp;lt; m; k++) &#123;<span class=\"comment\">//不要把满足good的序列转移上去。</span></div><div class=\"line\">                        dp[i][(j + k) &amp;gt;&amp;gt; <span class=\"number\">1</span>] += dp[i - <span class=\"number\">1</span>][j] * g[k] % MOD * g[ct - k] % MOD;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (dp[i][(j + k) &amp;gt;&amp;gt; <span class=\"number\">1</span>] &amp;gt; MOD) dp[i][(j + k) &amp;gt;&amp;gt; <span class=\"number\">1</span>] -= MOD;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> ans = (powmod(<span class=\"number\">2</span>, pn) - dp[<span class=\"number\">11</span>][<span class=\"number\">0</span>] * cof) % MOD</div><div class=\"line\">                * powmod(<span class=\"number\">2</span>, n - pn)%MOD;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ans &amp;lt; <span class=\"number\">0</span>) ans += MOD;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Case #%d: %d\\n\"</span>, ++<span class=\"number\">__</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"ASP.NET MVC4笔记（一） 扩展Simplemembership","date":"2015-02-24T02:45:07.000Z","_content":"```C#\nusing System.Web.Mvc;\n\nnamespace MvcClassManageSystem.ActionFilters\n{\n    public class LogStateFilterAttribute : ActionFilterAttribute\n    {\n        public override void OnActionExecuting(ActionExecutingContext filterContext)\n        {\n            base.OnActionExecuting(filterContext);\n            //string controller = filterContext.RouteData.Values[\"controller\"].ToString();\n            //string action = filterContext.RouteData.Values[\"action\"].ToString();\n            //System.Diagnostics.Debug.WriteLine(\"OnAction:\" + controller + \"/\" + action);\n\n            if (WebMatrix.WebData.WebSecurity.IsAuthenticated == true)\n            {\n                filterContext.Result = new RedirectToRouteResult(new System.Web.Routing.RouteValueDictionary(new { Controller = \"Home\", action = \"Index\" }));\n            }\n        }\n    }\n}\n```\n<!--more-->\n```C#\npublic static class WebUtility\n    {\n        private static SimpleMembershipProvider membership = (SimpleMembershipProvider)Membership.Provider;\n        public static void CreateUserAndAccount(UserProfile userProfile, string Password)\n        {\n            WebSecurity.CreateUserAndAccount(userProfile.UserName, Password, new\n            {\n                //TO DO 数据库/模型更改之后别忘记修改此处！！！\n                ClassId = userProfile.ClassId,\n                UserExtraInfo_Phone = userProfile.UserExtraInfo.Phone,\n                UserExtraInfo_Gender = userProfile.UserExtraInfo.Gender,\n                UserExtraInfo_BirthDay = userProfile.UserExtraInfo.BirthDay,\n                UserExtraInfo_UserDesc = userProfile.UserExtraInfo.UserDesc\n            });\n        }\n        public static void DeleteUserAndAccount(string UserName)\n        {\n            membership.DeleteAccount(UserName);\n            Roles.RemoveUserFromRoles(UserName, Roles.GetRolesForUser(UserName));\n            membership.DeleteUser(UserName, true);\n        }\n        public static void ResetPassword(string UserName, string NewPassword)\n        {\n            WebSecurity.ResetPassword(WebSecurity.GeneratePasswordResetToken(UserName, 1), NewPassword);\n        }\n    }\n```\n\n```C#\nusing System.Web.Mvc;\nnamespace MvcClassManageSystem.Filters\n{\n    public class MyAuthorizeAttribute : AuthorizeAttribute\n    {\n        protected override void HandleUnauthorizedRequest(AuthorizationContext filterContext)\n        {\n            base.HandleUnauthorizedRequest(filterContext);\n            if (filterContext.HttpContext.User.Identity.IsAuthenticated)\n            {\n                filterContext.Result = new RedirectResult(\"/Account/AccessError\");\n            }\n        }\n    }\n}\n```\n\n```C#\nusing System.Data.Entity;\nusing System.Linq;\nusing System.Web.Security;\nusing WebMatrix.WebData;\nnamespace MvcClassManageSystem.Models\n{\n    public class InitSecurityDb : DropCreateDatabaseAlways<DBManager>\n    {\n        protected override void Seed(DBManager context)\n        {\n            WebSecurity.InitializeDatabaseConnection(\"DefaultConnection\", \"UserProfile\", \"UserId\", \"UserName\", autoCreateTables: true);\n            var roles = (SimpleRoleProvider)Roles.Provider;\n \n            string[] RolesList = new string[] { \"Admin\", \"Teacher\", \"Student\" };\n            foreach (var item in RolesList)\n            {\n                if (!roles.RoleExists(item))\n                {\n                    roles.CreateRole(item);\n                }\n            }\n            //设置初始班级\n            int ClassIndex = 0;\n            using (var db = new DBManager())\n            {\n                var ret = db.ClassProfiles.SingleOrDefault(m => m.ClassName.CompareTo(\"未知班级\") == 0);\n                if (ret == null)\n                {\n                    ret = db.ClassProfiles.Add(new ClassProfile\n                    {\n                        ClassName = \"未知班级\",\n                        Desc = \"班级未知或无意义\"\n                    });\n                    db.SaveChanges();\n                }\n                ClassIndex = ret.ClassId;\n            }\n            if (!WebSecurity.UserExists(\"管理员\"))\n            {\n                WebUtility.CreateUserAndAccount(new UserProfile()\n                {\n                    UserName = \"管理员\",\n                    ClassId = ClassIndex,\n                    UserExtraInfo = new UserExtraInfo()\n                    {\n                        Phone = \"18267912632\",\n                        Gender = MvcClassManageSystem.Models.Gender.男,\n                        BirthDay = new System.DateTime(1993, 9, 28),\n                        UserDesc = \"本站的管理员！\"\n                    }\n                }, \"admin\");\n                System.Web.Security.Roles.AddUserToRole(\"管理员\", \"Admin\");\n            }\n        }\n    }\n}\n```\n```C#\n protected void Application_Start()\n        {\n            Database.SetInitializer<DBManager>(new InitSecurityDb());\n            DBManager db = new DBManager();\n            db.Database.Initialize(true);\n            if (!WebSecurity.Initialized)\n            {\n                WebSecurity.InitializeDatabaseConnection(\"DefaultConnection\", \"UserProfile\", \"UserId\", \"UserName\", autoCreateTables: true);\n            }\n\n            AreaRegistration.RegisterAllAreas();\n            WebApiConfig.Register(GlobalConfiguration.Configuration);\n            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);\n            RouteConfig.RegisterRoutes(RouteTable.Routes);\n            BundleConfig.RegisterBundles(BundleTable.Bundles);\n            AuthConfig.RegisterAuth();\n        }\n```","source":"_posts/ASP-NET-MVC4-note1-Simplemembership.md","raw":"title: ASP.NET MVC4笔记（一） 扩展Simplemembership\ndate: 2015-02-24 10:45:07\ntags: [C#,asp.net mvc4,simplemembership]\ncategories: ASP.NET\n---\n```C#\nusing System.Web.Mvc;\n\nnamespace MvcClassManageSystem.ActionFilters\n{\n    public class LogStateFilterAttribute : ActionFilterAttribute\n    {\n        public override void OnActionExecuting(ActionExecutingContext filterContext)\n        {\n            base.OnActionExecuting(filterContext);\n            //string controller = filterContext.RouteData.Values[\"controller\"].ToString();\n            //string action = filterContext.RouteData.Values[\"action\"].ToString();\n            //System.Diagnostics.Debug.WriteLine(\"OnAction:\" + controller + \"/\" + action);\n\n            if (WebMatrix.WebData.WebSecurity.IsAuthenticated == true)\n            {\n                filterContext.Result = new RedirectToRouteResult(new System.Web.Routing.RouteValueDictionary(new { Controller = \"Home\", action = \"Index\" }));\n            }\n        }\n    }\n}\n```\n<!--more-->\n```C#\npublic static class WebUtility\n    {\n        private static SimpleMembershipProvider membership = (SimpleMembershipProvider)Membership.Provider;\n        public static void CreateUserAndAccount(UserProfile userProfile, string Password)\n        {\n            WebSecurity.CreateUserAndAccount(userProfile.UserName, Password, new\n            {\n                //TO DO 数据库/模型更改之后别忘记修改此处！！！\n                ClassId = userProfile.ClassId,\n                UserExtraInfo_Phone = userProfile.UserExtraInfo.Phone,\n                UserExtraInfo_Gender = userProfile.UserExtraInfo.Gender,\n                UserExtraInfo_BirthDay = userProfile.UserExtraInfo.BirthDay,\n                UserExtraInfo_UserDesc = userProfile.UserExtraInfo.UserDesc\n            });\n        }\n        public static void DeleteUserAndAccount(string UserName)\n        {\n            membership.DeleteAccount(UserName);\n            Roles.RemoveUserFromRoles(UserName, Roles.GetRolesForUser(UserName));\n            membership.DeleteUser(UserName, true);\n        }\n        public static void ResetPassword(string UserName, string NewPassword)\n        {\n            WebSecurity.ResetPassword(WebSecurity.GeneratePasswordResetToken(UserName, 1), NewPassword);\n        }\n    }\n```\n\n```C#\nusing System.Web.Mvc;\nnamespace MvcClassManageSystem.Filters\n{\n    public class MyAuthorizeAttribute : AuthorizeAttribute\n    {\n        protected override void HandleUnauthorizedRequest(AuthorizationContext filterContext)\n        {\n            base.HandleUnauthorizedRequest(filterContext);\n            if (filterContext.HttpContext.User.Identity.IsAuthenticated)\n            {\n                filterContext.Result = new RedirectResult(\"/Account/AccessError\");\n            }\n        }\n    }\n}\n```\n\n```C#\nusing System.Data.Entity;\nusing System.Linq;\nusing System.Web.Security;\nusing WebMatrix.WebData;\nnamespace MvcClassManageSystem.Models\n{\n    public class InitSecurityDb : DropCreateDatabaseAlways<DBManager>\n    {\n        protected override void Seed(DBManager context)\n        {\n            WebSecurity.InitializeDatabaseConnection(\"DefaultConnection\", \"UserProfile\", \"UserId\", \"UserName\", autoCreateTables: true);\n            var roles = (SimpleRoleProvider)Roles.Provider;\n \n            string[] RolesList = new string[] { \"Admin\", \"Teacher\", \"Student\" };\n            foreach (var item in RolesList)\n            {\n                if (!roles.RoleExists(item))\n                {\n                    roles.CreateRole(item);\n                }\n            }\n            //设置初始班级\n            int ClassIndex = 0;\n            using (var db = new DBManager())\n            {\n                var ret = db.ClassProfiles.SingleOrDefault(m => m.ClassName.CompareTo(\"未知班级\") == 0);\n                if (ret == null)\n                {\n                    ret = db.ClassProfiles.Add(new ClassProfile\n                    {\n                        ClassName = \"未知班级\",\n                        Desc = \"班级未知或无意义\"\n                    });\n                    db.SaveChanges();\n                }\n                ClassIndex = ret.ClassId;\n            }\n            if (!WebSecurity.UserExists(\"管理员\"))\n            {\n                WebUtility.CreateUserAndAccount(new UserProfile()\n                {\n                    UserName = \"管理员\",\n                    ClassId = ClassIndex,\n                    UserExtraInfo = new UserExtraInfo()\n                    {\n                        Phone = \"18267912632\",\n                        Gender = MvcClassManageSystem.Models.Gender.男,\n                        BirthDay = new System.DateTime(1993, 9, 28),\n                        UserDesc = \"本站的管理员！\"\n                    }\n                }, \"admin\");\n                System.Web.Security.Roles.AddUserToRole(\"管理员\", \"Admin\");\n            }\n        }\n    }\n}\n```\n```C#\n protected void Application_Start()\n        {\n            Database.SetInitializer<DBManager>(new InitSecurityDb());\n            DBManager db = new DBManager();\n            db.Database.Initialize(true);\n            if (!WebSecurity.Initialized)\n            {\n                WebSecurity.InitializeDatabaseConnection(\"DefaultConnection\", \"UserProfile\", \"UserId\", \"UserName\", autoCreateTables: true);\n            }\n\n            AreaRegistration.RegisterAllAreas();\n            WebApiConfig.Register(GlobalConfiguration.Configuration);\n            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);\n            RouteConfig.RegisterRoutes(RouteTable.Routes);\n            BundleConfig.RegisterBundles(BundleTable.Bundles);\n            AuthConfig.RegisterAuth();\n        }\n```","slug":"ASP-NET-MVC4-note1-Simplemembership","published":1,"updated":"2015-02-26T03:01:51.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8n6000kwppvrsx2vlqt","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System.Web.Mvc;</div><div class=\"line\"></div><div class=\"line\">namespace MvcClassManageSystem.ActionFilters</div><div class=\"line\">&#123;</div><div class=\"line\">    public class LogStateFilterAttribute : ActionFilterAttribute</div><div class=\"line\">    &#123;</div><div class=\"line\">        public override void OnActionExecuting(ActionExecutingContext filterContext)</div><div class=\"line\">        &#123;</div><div class=\"line\">            base.OnActionExecuting(filterContext);</div><div class=\"line\">            //string controller = filterContext.RouteData.Values[&quot;controller&quot;].ToString();</div><div class=\"line\">            //string action = filterContext.RouteData.Values[&quot;action&quot;].ToString();</div><div class=\"line\">            //System.Diagnostics.Debug.WriteLine(&quot;OnAction:&quot; + controller + &quot;/&quot; + action);</div><div class=\"line\"></div><div class=\"line\">            if (WebMatrix.WebData.WebSecurity.IsAuthenticated == true)</div><div class=\"line\">            &#123;</div><div class=\"line\">                filterContext.Result = new RedirectToRouteResult(new System.Web.Routing.RouteValueDictionary(new &#123; Controller = &quot;Home&quot;, action = &quot;Index&quot; &#125;));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static class WebUtility</div><div class=\"line\">    &#123;</div><div class=\"line\">        private static SimpleMembershipProvider membership = (SimpleMembershipProvider)Membership.Provider;</div><div class=\"line\">        public static void CreateUserAndAccount(UserProfile userProfile, string Password)</div><div class=\"line\">        &#123;</div><div class=\"line\">            WebSecurity.CreateUserAndAccount(userProfile.UserName, Password, new</div><div class=\"line\">            &#123;</div><div class=\"line\">                //TO DO 数据库/模型更改之后别忘记修改此处！！！</div><div class=\"line\">                ClassId = userProfile.ClassId,</div><div class=\"line\">                UserExtraInfo_Phone = userProfile.UserExtraInfo.Phone,</div><div class=\"line\">                UserExtraInfo_Gender = userProfile.UserExtraInfo.Gender,</div><div class=\"line\">                UserExtraInfo_BirthDay = userProfile.UserExtraInfo.BirthDay,</div><div class=\"line\">                UserExtraInfo_UserDesc = userProfile.UserExtraInfo.UserDesc</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        public static void DeleteUserAndAccount(string UserName)</div><div class=\"line\">        &#123;</div><div class=\"line\">            membership.DeleteAccount(UserName);</div><div class=\"line\">            Roles.RemoveUserFromRoles(UserName, Roles.GetRolesForUser(UserName));</div><div class=\"line\">            membership.DeleteUser(UserName, true);</div><div class=\"line\">        &#125;</div><div class=\"line\">        public static void ResetPassword(string UserName, string NewPassword)</div><div class=\"line\">        &#123;</div><div class=\"line\">            WebSecurity.ResetPassword(WebSecurity.GeneratePasswordResetToken(UserName, 1), NewPassword);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System.Web.Mvc;</div><div class=\"line\">namespace MvcClassManageSystem.Filters</div><div class=\"line\">&#123;</div><div class=\"line\">    public class MyAuthorizeAttribute : AuthorizeAttribute</div><div class=\"line\">    &#123;</div><div class=\"line\">        protected override void HandleUnauthorizedRequest(AuthorizationContext filterContext)</div><div class=\"line\">        &#123;</div><div class=\"line\">            base.HandleUnauthorizedRequest(filterContext);</div><div class=\"line\">            if (filterContext.HttpContext.User.Identity.IsAuthenticated)</div><div class=\"line\">            &#123;</div><div class=\"line\">                filterContext.Result = new RedirectResult(&quot;/Account/AccessError&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System.Data.Entity;</div><div class=\"line\">using System.Linq;</div><div class=\"line\">using System.Web.Security;</div><div class=\"line\">using WebMatrix.WebData;</div><div class=\"line\">namespace MvcClassManageSystem.Models</div><div class=\"line\">&#123;</div><div class=\"line\">    public class InitSecurityDb : DropCreateDatabaseAlways&lt;DBManager&gt;</div><div class=\"line\">    &#123;</div><div class=\"line\">        protected override void Seed(DBManager context)</div><div class=\"line\">        &#123;</div><div class=\"line\">            WebSecurity.InitializeDatabaseConnection(&quot;DefaultConnection&quot;, &quot;UserProfile&quot;, &quot;UserId&quot;, &quot;UserName&quot;, autoCreateTables: true);</div><div class=\"line\">            var roles = (SimpleRoleProvider)Roles.Provider;</div><div class=\"line\"> </div><div class=\"line\">            string[] RolesList = new string[] &#123; &quot;Admin&quot;, &quot;Teacher&quot;, &quot;Student&quot; &#125;;</div><div class=\"line\">            foreach (var item in RolesList)</div><div class=\"line\">            &#123;</div><div class=\"line\">                if (!roles.RoleExists(item))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    roles.CreateRole(item);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //设置初始班级</div><div class=\"line\">            int ClassIndex = 0;</div><div class=\"line\">            using (var db = new DBManager())</div><div class=\"line\">            &#123;</div><div class=\"line\">                var ret = db.ClassProfiles.SingleOrDefault(m =&gt; m.ClassName.CompareTo(&quot;未知班级&quot;) == 0);</div><div class=\"line\">                if (ret == null)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    ret = db.ClassProfiles.Add(new ClassProfile</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        ClassName = &quot;未知班级&quot;,</div><div class=\"line\">                        Desc = &quot;班级未知或无意义&quot;</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    db.SaveChanges();</div><div class=\"line\">                &#125;</div><div class=\"line\">                ClassIndex = ret.ClassId;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (!WebSecurity.UserExists(&quot;管理员&quot;))</div><div class=\"line\">            &#123;</div><div class=\"line\">                WebUtility.CreateUserAndAccount(new UserProfile()</div><div class=\"line\">                &#123;</div><div class=\"line\">                    UserName = &quot;管理员&quot;,</div><div class=\"line\">                    ClassId = ClassIndex,</div><div class=\"line\">                    UserExtraInfo = new UserExtraInfo()</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        Phone = &quot;18267912632&quot;,</div><div class=\"line\">                        Gender = MvcClassManageSystem.Models.Gender.男,</div><div class=\"line\">                        BirthDay = new System.DateTime(1993, 9, 28),</div><div class=\"line\">                        UserDesc = &quot;本站的管理员！&quot;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;, &quot;admin&quot;);</div><div class=\"line\">                System.Web.Security.Roles.AddUserToRole(&quot;管理员&quot;, &quot;Admin&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"> protected void Application_Start()</div><div class=\"line\">        &#123;</div><div class=\"line\">            Database.SetInitializer&lt;DBManager&gt;(new InitSecurityDb());</div><div class=\"line\">            DBManager db = new DBManager();</div><div class=\"line\">            db.Database.Initialize(true);</div><div class=\"line\">            if (!WebSecurity.Initialized)</div><div class=\"line\">            &#123;</div><div class=\"line\">                WebSecurity.InitializeDatabaseConnection(&quot;DefaultConnection&quot;, &quot;UserProfile&quot;, &quot;UserId&quot;, &quot;UserName&quot;, autoCreateTables: true);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            AreaRegistration.RegisterAllAreas();</div><div class=\"line\">            WebApiConfig.Register(GlobalConfiguration.Configuration);</div><div class=\"line\">            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);</div><div class=\"line\">            RouteConfig.RegisterRoutes(RouteTable.Routes);</div><div class=\"line\">            BundleConfig.RegisterBundles(BundleTable.Bundles);</div><div class=\"line\">            AuthConfig.RegisterAuth();</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>","excerpt":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System.Web.Mvc;</div><div class=\"line\"></div><div class=\"line\">namespace MvcClassManageSystem.ActionFilters</div><div class=\"line\">&#123;</div><div class=\"line\">    public class LogStateFilterAttribute : ActionFilterAttribute</div><div class=\"line\">    &#123;</div><div class=\"line\">        public override void OnActionExecuting(ActionExecutingContext filterContext)</div><div class=\"line\">        &#123;</div><div class=\"line\">            base.OnActionExecuting(filterContext);</div><div class=\"line\">            //string controller = filterContext.RouteData.Values[&quot;controller&quot;].ToString();</div><div class=\"line\">            //string action = filterContext.RouteData.Values[&quot;action&quot;].ToString();</div><div class=\"line\">            //System.Diagnostics.Debug.WriteLine(&quot;OnAction:&quot; + controller + &quot;/&quot; + action);</div><div class=\"line\"></div><div class=\"line\">            if (WebMatrix.WebData.WebSecurity.IsAuthenticated == true)</div><div class=\"line\">            &#123;</div><div class=\"line\">                filterContext.Result = new RedirectToRouteResult(new System.Web.Routing.RouteValueDictionary(new &#123; Controller = &quot;Home&quot;, action = &quot;Index&quot; &#125;));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static class WebUtility</div><div class=\"line\">    &#123;</div><div class=\"line\">        private static SimpleMembershipProvider membership = (SimpleMembershipProvider)Membership.Provider;</div><div class=\"line\">        public static void CreateUserAndAccount(UserProfile userProfile, string Password)</div><div class=\"line\">        &#123;</div><div class=\"line\">            WebSecurity.CreateUserAndAccount(userProfile.UserName, Password, new</div><div class=\"line\">            &#123;</div><div class=\"line\">                //TO DO 数据库/模型更改之后别忘记修改此处！！！</div><div class=\"line\">                ClassId = userProfile.ClassId,</div><div class=\"line\">                UserExtraInfo_Phone = userProfile.UserExtraInfo.Phone,</div><div class=\"line\">                UserExtraInfo_Gender = userProfile.UserExtraInfo.Gender,</div><div class=\"line\">                UserExtraInfo_BirthDay = userProfile.UserExtraInfo.BirthDay,</div><div class=\"line\">                UserExtraInfo_UserDesc = userProfile.UserExtraInfo.UserDesc</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        public static void DeleteUserAndAccount(string UserName)</div><div class=\"line\">        &#123;</div><div class=\"line\">            membership.DeleteAccount(UserName);</div><div class=\"line\">            Roles.RemoveUserFromRoles(UserName, Roles.GetRolesForUser(UserName));</div><div class=\"line\">            membership.DeleteUser(UserName, true);</div><div class=\"line\">        &#125;</div><div class=\"line\">        public static void ResetPassword(string UserName, string NewPassword)</div><div class=\"line\">        &#123;</div><div class=\"line\">            WebSecurity.ResetPassword(WebSecurity.GeneratePasswordResetToken(UserName, 1), NewPassword);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System.Web.Mvc;</div><div class=\"line\">namespace MvcClassManageSystem.Filters</div><div class=\"line\">&#123;</div><div class=\"line\">    public class MyAuthorizeAttribute : AuthorizeAttribute</div><div class=\"line\">    &#123;</div><div class=\"line\">        protected override void HandleUnauthorizedRequest(AuthorizationContext filterContext)</div><div class=\"line\">        &#123;</div><div class=\"line\">            base.HandleUnauthorizedRequest(filterContext);</div><div class=\"line\">            if (filterContext.HttpContext.User.Identity.IsAuthenticated)</div><div class=\"line\">            &#123;</div><div class=\"line\">                filterContext.Result = new RedirectResult(&quot;/Account/AccessError&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System.Data.Entity;</div><div class=\"line\">using System.Linq;</div><div class=\"line\">using System.Web.Security;</div><div class=\"line\">using WebMatrix.WebData;</div><div class=\"line\">namespace MvcClassManageSystem.Models</div><div class=\"line\">&#123;</div><div class=\"line\">    public class InitSecurityDb : DropCreateDatabaseAlways&lt;DBManager&gt;</div><div class=\"line\">    &#123;</div><div class=\"line\">        protected override void Seed(DBManager context)</div><div class=\"line\">        &#123;</div><div class=\"line\">            WebSecurity.InitializeDatabaseConnection(&quot;DefaultConnection&quot;, &quot;UserProfile&quot;, &quot;UserId&quot;, &quot;UserName&quot;, autoCreateTables: true);</div><div class=\"line\">            var roles = (SimpleRoleProvider)Roles.Provider;</div><div class=\"line\"> </div><div class=\"line\">            string[] RolesList = new string[] &#123; &quot;Admin&quot;, &quot;Teacher&quot;, &quot;Student&quot; &#125;;</div><div class=\"line\">            foreach (var item in RolesList)</div><div class=\"line\">            &#123;</div><div class=\"line\">                if (!roles.RoleExists(item))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    roles.CreateRole(item);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //设置初始班级</div><div class=\"line\">            int ClassIndex = 0;</div><div class=\"line\">            using (var db = new DBManager())</div><div class=\"line\">            &#123;</div><div class=\"line\">                var ret = db.ClassProfiles.SingleOrDefault(m =&gt; m.ClassName.CompareTo(&quot;未知班级&quot;) == 0);</div><div class=\"line\">                if (ret == null)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    ret = db.ClassProfiles.Add(new ClassProfile</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        ClassName = &quot;未知班级&quot;,</div><div class=\"line\">                        Desc = &quot;班级未知或无意义&quot;</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    db.SaveChanges();</div><div class=\"line\">                &#125;</div><div class=\"line\">                ClassIndex = ret.ClassId;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (!WebSecurity.UserExists(&quot;管理员&quot;))</div><div class=\"line\">            &#123;</div><div class=\"line\">                WebUtility.CreateUserAndAccount(new UserProfile()</div><div class=\"line\">                &#123;</div><div class=\"line\">                    UserName = &quot;管理员&quot;,</div><div class=\"line\">                    ClassId = ClassIndex,</div><div class=\"line\">                    UserExtraInfo = new UserExtraInfo()</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        Phone = &quot;18267912632&quot;,</div><div class=\"line\">                        Gender = MvcClassManageSystem.Models.Gender.男,</div><div class=\"line\">                        BirthDay = new System.DateTime(1993, 9, 28),</div><div class=\"line\">                        UserDesc = &quot;本站的管理员！&quot;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;, &quot;admin&quot;);</div><div class=\"line\">                System.Web.Security.Roles.AddUserToRole(&quot;管理员&quot;, &quot;Admin&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"> protected void Application_Start()</div><div class=\"line\">        &#123;</div><div class=\"line\">            Database.SetInitializer&lt;DBManager&gt;(new InitSecurityDb());</div><div class=\"line\">            DBManager db = new DBManager();</div><div class=\"line\">            db.Database.Initialize(true);</div><div class=\"line\">            if (!WebSecurity.Initialized)</div><div class=\"line\">            &#123;</div><div class=\"line\">                WebSecurity.InitializeDatabaseConnection(&quot;DefaultConnection&quot;, &quot;UserProfile&quot;, &quot;UserId&quot;, &quot;UserName&quot;, autoCreateTables: true);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            AreaRegistration.RegisterAllAreas();</div><div class=\"line\">            WebApiConfig.Register(GlobalConfiguration.Configuration);</div><div class=\"line\">            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);</div><div class=\"line\">            RouteConfig.RegisterRoutes(RouteTable.Routes);</div><div class=\"line\">            BundleConfig.RegisterBundles(BundleTable.Bundles);</div><div class=\"line\">            AuthConfig.RegisterAuth();</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>"},{"title":"HDU 4952 Number Transformation","id":"93","date":"2014-08-15T09:22:13.000Z","_content":"\n**<span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)\nTotal Submission(s): 612    Accepted Submission(s): 310\n</span>**\n<div class=\"panel_title\" align=\"left\">Problem Description</div>\n<div class=\"panel_content\">Teacher Mai has an integer x.\n\nHe does the following operations k times. In the i-th operation, x becomes the least integer no less than x, which is the multiple of i.\n\nHe wants to know what is the number x now.</div>\n<div class=\"panel_bottom\"></div>\n<!--more-->\n&nbsp;\n\n<div class=\"panel_title\" align=\"left\">Input</div>\n<div class=\"panel_content\">There are multiple test cases, terminated by a line \"0 0\".\n\nFor each test case, the only one line contains two integers x,k(1&lt;=x&lt;=10^10, 1&lt;=k&lt;=10^10).</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Output</div>\n<div class=\"panel_content\">For each test case, output one line \"Case #k: x\", where k is the case number counting from 1.</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Input</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">2520 10 2520 20 0 0</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Output</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">Case #1: 2520 Case #2: 2600</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Source</div>\n<div class=\"panel_content\">[ 2014 Multi-University Training Contest 8 ](http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2014%20Multi-University%20Training%20Contest%208&amp;source=1&amp;searchmode=source)</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Recommend</div>\n<div class=\"panel_content\">hujie   |   We have carefully selected several similar problems for you:  [4955](http://acm.hdu.edu.cn/showproblem.php?pid=4955) [4954](http://acm.hdu.edu.cn/showproblem.php?pid=4954) [4953](http://acm.hdu.edu.cn/showproblem.php?pid=4953) [4951](http://acm.hdu.edu.cn/showproblem.php?pid=4951) [4950](http://acm.hdu.edu.cn/showproblem.php?pid=4950)</div>\n<br/>\n\n- - -\n\n\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;cmath&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define PR pair&lt;int,int&gt;\n#define MP make_pair\n#define SI(x) set&lt;x&gt;::iterator\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set&lt;x&gt;::reverse_iterator\n#define VRI(x) vector&lt;x&gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define Sz(x) (int)x.size()\n#define clrQ(x) while(!x.empty)x.pop();\n#define clr(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n/*start*/\nint __;\n#define type LL\ninline type getint() {\n    type ret=0;bool ok=0;\n    for(;;) {\n        int c=getchar();\n        if(c&gt;='0'&amp;&amp;c&lt;='9')ret=(ret&lt;&lt;3)+ret+ret+c-'0',ok=1;\n        else if(ok)return ret;\n    }\n}\n#undef type\nint main(int argc, char **argv) {\n    LL x, k;\n    while (1) {\n        x=getint();\n        k=getint();\n        if (x == 0 &amp;&amp; k == 0) break;\n        for(int i=1;i&lt;k;i++){\n            if(x&lt;i+1)break;\n            x-=x/(i+1);\n        }\n        printf(\"Case #%d: \"LLS\"\\n\",++__,x*k);\n    }\n}\n```","source":"_posts/hdu-4952-number-transformation.md","raw":"title: HDU 4952 Number Transformation\ncategories:\n  - ACM\nid: 93\ndate: 2014-08-15 17:22:13\ntags: [数论,暴力]\n---\n\n**<span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)\nTotal Submission(s): 612    Accepted Submission(s): 310\n</span>**\n<div class=\"panel_title\" align=\"left\">Problem Description</div>\n<div class=\"panel_content\">Teacher Mai has an integer x.\n\nHe does the following operations k times. In the i-th operation, x becomes the least integer no less than x, which is the multiple of i.\n\nHe wants to know what is the number x now.</div>\n<div class=\"panel_bottom\"></div>\n<!--more-->\n&nbsp;\n\n<div class=\"panel_title\" align=\"left\">Input</div>\n<div class=\"panel_content\">There are multiple test cases, terminated by a line \"0 0\".\n\nFor each test case, the only one line contains two integers x,k(1&lt;=x&lt;=10^10, 1&lt;=k&lt;=10^10).</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Output</div>\n<div class=\"panel_content\">For each test case, output one line \"Case #k: x\", where k is the case number counting from 1.</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Input</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">2520 10 2520 20 0 0</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Output</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">Case #1: 2520 Case #2: 2600</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Source</div>\n<div class=\"panel_content\">[ 2014 Multi-University Training Contest 8 ](http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2014%20Multi-University%20Training%20Contest%208&amp;source=1&amp;searchmode=source)</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Recommend</div>\n<div class=\"panel_content\">hujie   |   We have carefully selected several similar problems for you:  [4955](http://acm.hdu.edu.cn/showproblem.php?pid=4955) [4954](http://acm.hdu.edu.cn/showproblem.php?pid=4954) [4953](http://acm.hdu.edu.cn/showproblem.php?pid=4953) [4951](http://acm.hdu.edu.cn/showproblem.php?pid=4951) [4950](http://acm.hdu.edu.cn/showproblem.php?pid=4950)</div>\n<br/>\n\n- - -\n\n\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;cmath&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define PR pair&lt;int,int&gt;\n#define MP make_pair\n#define SI(x) set&lt;x&gt;::iterator\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set&lt;x&gt;::reverse_iterator\n#define VRI(x) vector&lt;x&gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define Sz(x) (int)x.size()\n#define clrQ(x) while(!x.empty)x.pop();\n#define clr(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n/*start*/\nint __;\n#define type LL\ninline type getint() {\n    type ret=0;bool ok=0;\n    for(;;) {\n        int c=getchar();\n        if(c&gt;='0'&amp;&amp;c&lt;='9')ret=(ret&lt;&lt;3)+ret+ret+c-'0',ok=1;\n        else if(ok)return ret;\n    }\n}\n#undef type\nint main(int argc, char **argv) {\n    LL x, k;\n    while (1) {\n        x=getint();\n        k=getint();\n        if (x == 0 &amp;&amp; k == 0) break;\n        for(int i=1;i&lt;k;i++){\n            if(x&lt;i+1)break;\n            x-=x/(i+1);\n        }\n        printf(\"Case #%d: \"LLS\"\\n\",++__,x*k);\n    }\n}\n```","slug":"hdu-4952-number-transformation","published":1,"updated":"2015-02-26T02:47:42.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8n9000owppv4ou3bz6n","content":"<p><strong><span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)<br>Total Submission(s): 612    Accepted Submission(s): 310<br></span></strong></p>\n<p><div class=\"panel_title\" align=\"left\">Problem Description</div></p>\n<p><div class=\"panel_content\">Teacher Mai has an integer x.</div></p>\n<p>He does the following operations k times. In the i-th operation, x becomes the least integer no less than x, which is the multiple of i.</p>\n<p>He wants to know what is the number x now.</p>\n<p><div class=\"panel_bottom\"></div><br><a id=\"more\"></a><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Input</div></p>\n<p><div class=\"panel_content\">There are multiple test cases, terminated by a line “0 0”.</div></p>\n<p>For each test case, the only one line contains two integers x,k(1&lt;=x&lt;=10^10, 1&lt;=k&lt;=10^10).</p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Output</div></p>\n<p><div class=\"panel_content\">For each test case, output one line “Case #k: x”, where k is the case number counting from 1.</div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Input</div></p>\n<p><div class=\"panel_content\"></div></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">2520 10 2520 20 0 0</div><br></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Output</div></p>\n<p><div class=\"panel_content\"></div></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">Case #1: 2520 Case #2: 2600</div><br></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Source</div></p>\n<p><div class=\"panel_content\"><a href=\"http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2014%20Multi-University%20Training%20Contest%208&amp;source=1&amp;searchmode=source\" target=\"_blank\" rel=\"external\"> 2014 Multi-University Training Contest 8 </a></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Recommend</div></p>\n<p><div class=\"panel_content\">hujie   |   We have carefully selected several similar problems for you:  <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4955\" target=\"_blank\" rel=\"external\">4955</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4954\" target=\"_blank\" rel=\"external\">4954</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4953\" target=\"_blank\" rel=\"external\">4953</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4951\" target=\"_blank\" rel=\"external\">4951</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4950\" target=\"_blank\" rel=\"external\">4950</a></div><br><br></p>\n<hr>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;map&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;set&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cmath&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;stack&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;queue&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;string&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstdio&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;vector&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cctype&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cassert&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;utility&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;numeric&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstring&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;iostream&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;algorithm&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pr pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PR pair&amp;lt;int,int&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MP make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Sz(x) (int)x.size()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrQ(x) while(!x.empty)x.pop();</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clr(x,y) memset(x,y,sizeof(x));</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = ~<span class=\"number\">0u</span> &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL lnf = ~<span class=\"number\">0u</span>ll &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"comment\">/*start*/</span></div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"number\">__</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> type LL</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> type <span class=\"title\">getint</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    type ret=<span class=\"number\">0</span>;<span class=\"keyword\">bool</span> ok=<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(;;) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> c=getchar();</div><div class=\"line\">        <span class=\"keyword\">if</span>(c&amp;gt;=<span class=\"string\">'0'</span>&amp;amp;&amp;amp;c&amp;lt;=<span class=\"string\">'9'</span>)ret=(ret&amp;lt;&amp;lt;<span class=\"number\">3</span>)+ret+ret+c-<span class=\"string\">'0'</span>,ok=<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ok)<span class=\"keyword\">return</span> ret;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">undef</span> type</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</div><div class=\"line\">    LL x, k;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</div><div class=\"line\">        x=getint();</div><div class=\"line\">        k=getint();</div><div class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span> &amp;amp;&amp;amp; k == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&amp;lt;k;i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(x&amp;lt;i+<span class=\"number\">1</span>)<span class=\"keyword\">break</span>;</div><div class=\"line\">            x-=x/(i+<span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Case #%d: \"</span>LLS<span class=\"string\">\"\\n\"</span>,++<span class=\"number\">__</span>,x*k);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<p><strong><span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)<br>Total Submission(s): 612    Accepted Submission(s): 310<br></span></strong></p>\n<p><div class=\"panel_title\" align=\"left\">Problem Description</div></p>\n<p><div class=\"panel_content\">Teacher Mai has an integer x.</p>\n<p>He does the following operations k times. In the i-th operation, x becomes the least integer no less than x, which is the multiple of i.</p>\n<p>He wants to know what is the number x now.</div></p>\n<p><div class=\"panel_bottom\"></div><br>","more":"<br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Input</div></p>\n<p><div class=\"panel_content\">There are multiple test cases, terminated by a line “0 0”.</p>\n<p>For each test case, the only one line contains two integers x,k(1&lt;=x&lt;=10^10, 1&lt;=k&lt;=10^10).</div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Output</div></p>\n<p><div class=\"panel_content\">For each test case, output one line “Case #k: x”, where k is the case number counting from 1.</div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Input</div></p>\n<p><div class=\"panel_content\"></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">2520 10 2520 20 0 0</div><br></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Output</div></p>\n<p><div class=\"panel_content\"></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">Case #1: 2520 Case #2: 2600</div><br></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Source</div></p>\n<p><div class=\"panel_content\"><a href=\"http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2014%20Multi-University%20Training%20Contest%208&amp;source=1&amp;searchmode=source\"> 2014 Multi-University Training Contest 8 </a></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Recommend</div></p>\n<p><div class=\"panel_content\">hujie   |   We have carefully selected several similar problems for you:  <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4955\">4955</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4954\">4954</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4953\">4953</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4951\">4951</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4950\">4950</a></div><br><br/></p>\n<hr>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;map&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;set&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cmath&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;stack&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;queue&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;string&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstdio&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;vector&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cctype&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cassert&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;utility&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;numeric&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstring&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;iostream&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;algorithm&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pr pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PR pair&amp;lt;int,int&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MP make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Sz(x) (int)x.size()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrQ(x) while(!x.empty)x.pop();</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clr(x,y) memset(x,y,sizeof(x));</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = ~<span class=\"number\">0u</span> &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL lnf = ~<span class=\"number\">0u</span>ll &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"comment\">/*start*/</span></div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"number\">__</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> type LL</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> type <span class=\"title\">getint</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    type ret=<span class=\"number\">0</span>;<span class=\"keyword\">bool</span> ok=<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(;;) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> c=getchar();</div><div class=\"line\">        <span class=\"keyword\">if</span>(c&amp;gt;=<span class=\"string\">'0'</span>&amp;amp;&amp;amp;c&amp;lt;=<span class=\"string\">'9'</span>)ret=(ret&amp;lt;&amp;lt;<span class=\"number\">3</span>)+ret+ret+c-<span class=\"string\">'0'</span>,ok=<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ok)<span class=\"keyword\">return</span> ret;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">undef</span> type</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</div><div class=\"line\">    LL x, k;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</div><div class=\"line\">        x=getint();</div><div class=\"line\">        k=getint();</div><div class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span> &amp;amp;&amp;amp; k == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&amp;lt;k;i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(x&amp;lt;i+<span class=\"number\">1</span>)<span class=\"keyword\">break</span>;</div><div class=\"line\">            x-=x/(i+<span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Case #%d: \"</span>LLS<span class=\"string\">\"\\n\"</span>,++<span class=\"number\">__</span>,x*k);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"HDU4612 Warm up","id":"29","date":"2014-07-30T11:37:32.000Z","_content":"\n\n**<span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 65535/65535 K (Java/Others)\nTotal Submission(s): 3532    Accepted Submission(s): 813</span>**\n<div class=\"panel_title\" align=\"left\">Problem Description</div>\n<div class=\"panel_content\">　 　N planets are connected by M bidirectional channels that allow instant transportation. It's always possible to travel between any two planets through these channels.\nIf we can isolate some planets from others by breaking only one channel , the channel is called a bridge of the transportation system.\nPeople don't like to be isolated. So they ask what's the minimal number of bridges they can have if they decide to build a new channel.\nNote that there could be more than one channel between two planets.</div>\n<!--more-->\n<div class=\"panel_title\" align=\"left\">Input</div>\n<div class=\"panel_content\">　　The input contains multiple cases.\nEach case starts with two positive integers N and M , indicating the number of planets and the number of channels.\n(2&lt;=N&lt;=200000, 1&lt;=M&lt;=1000000)\nNext M lines each contains two positive integers A and B, indicating a channel between planet A and B in the system. Planets are numbered by 1..N.\nA line with two integers '0' terminates the input.</div>\n<div class=\"panel_title\" align=\"left\">Output</div>\n<div class=\"panel_content\">　　For each case, output the minimal number of bridges after building a new channel in a line.</div>\n<div class=\"panel_title\" align=\"left\">Sample Input</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">4 4 1 2 1 3 1 4 2 3 0 0</div>\n</div>\n<div class=\"panel_title\" align=\"left\">Sample Output</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">0</div>\n</div>\n<div class=\"panel_title\" align=\"left\">Source</div>\n<div class=\"panel_content\">[ 2013 Multi-University Training Contest 2 ](http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2013%20Multi-University%20Training%20Contest%202&amp;source=1&amp;searchmode=source)</div>\n<br/>\n\n- - -\n\n\n```C++\n#pragma comment(linker, \"/STACK:1024000000,1024000000\")//C++加栈\n#include\n#include\n#include\n#include\n#include\n#include\n#include\n#include<map>\n#include\n#include\n#include\nusing namespace std;\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\n#define N 200005\n#define M 1000005\nint n, m;\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\nstruct edge {\n\tint v, nxt;\n} e[M &lt;&lt; 1];\nstruct bridge {\n\tint u, v;\n\tbridge(int u, int v) {\n\t\tthis-&gt;u = u;\n\t\tthis-&gt;v = v;\n\t}\n};\nint pos, head[N];\nint top, stk[N];\nint pre[N], dfs_clock, belong[N], bcnt;\nvector brg;\nvoid InitEdge() {\n\tmemset(head, -1, sizeof(head));\n\tpos = 0;\n}\nvoid add(int u, int v) {\n\te[pos].v = v;\n\te[pos].nxt = head[u];\n\thead[u] = pos++;\n}\nint dfs(int u, int fa) {\n\tint lowu = pre[u] = ++dfs_clock;\n\tstk[top++] = u;\n\tbool vis = true;\n\tfor (int i = head[u]; ~i; i = e[i].nxt) {\n\t\tint v = e[i].v;\n\t\tif (v == fa &amp;&amp; vis) {\n\t\t\tvis = false; //u-v的反向边一定是v-u邻接表里的第一条边。\n\t\t\tcontinue;\n\t\t}\n\t\tif (!pre[v]) {\n\t\t\tint lowv = dfs(v, u);\n\t\t\tlowu = min(lowu, lowv);\n\t\t\tif (lowv &gt; pre[u]) { //u-v为桥\n\t\t\t\tbrg.push_back(bridge(u, v));\n\t\t\t}\n\t\t} else lowu = min(lowu, pre[v]);\n\t}\n\tif (pre[u] == lowu) {\n\t\tbcnt++;\n\t\tdo {\n\t\t\tbelong[stk[--top]] = bcnt;\n\t\t} while (stk[top] != u);\n\t}\n\treturn lowu;\n}\nvoid tarjan() {\n\ttop = bcnt = dfs_clock = 0;\n\tmemset(pre, 0, sizeof(pre));\n\tmemset(belong, 0, sizeof(belong));\n\tbrg.clear();\n\tfor (int i = 1; i &lt;= n; i++) {\n\t\tif (!pre[i]) dfs(i, -1);\n\t}\n}\nvoid rebuild() { //根据桥来缩点重构图\n\tInitEdge();\n\tfor (int i = 0; i &lt; (int) brg.size(); i++) {\n\t\tint u = belong[brg[i].u];\n\t\tint v = belong[brg[i].v];\n\t\tadd(u, v);\n\t\tadd(v, u);\n\t}\n}\nint diameter = 0;\nint findR(int u, int fa) {\n\tint h1 = 0, h2 = 0; // 以u为根，h1最高的儿子，h2次高儿子。放在dfs里面两者不会重合。\n\tfor (int i = head[u]; ~i; i = e[i].nxt) {\n\t\tint v = e[i].v;\n\t\tif (v == fa) continue;\n\t\tint h = findR(v, u) + 1; //若路径有权重，则把1改为u-v的权重\n\t\tif (h &gt; h1) h2 = h1, h1 = h;\n\t\telse h2 = max(h, h2);\n\t}\n\tdiameter = max(diameter, h1 + h2);\n\treturn h1;\n}\nvoid tree_diameter() {\n\tdiameter = 0;\n\tfindR(1, -1);\n}\nint main() {\n\twhile (scanf(\"%d%d\", &amp;n, &amp;m), n || m) {\n\t\tint u, v;\n\t\tInitEdge();\n\t\tfor (int i = 0; i &lt; m; i++) {\n\t\t\tscanf(\"%d%d\", &amp;u, &amp;v);\n\t\t\tadd(u, v);\n\t\t\tadd(v, u);\n\t\t}\n\t\ttarjan();\n\t\trebuild();\n\t\ttree_diameter();\n\t\tprintf(\"%d\\n\", bcnt - diameter - 1);\n\t}\n}\n```","source":"_posts/hdu4612-warm-up.md","raw":"title: HDU4612 Warm up\ntags:\n  - tarjan\n  - 图论\n  - 树的直径\ncategories:\n  - ACM\nid: 29\ndate: 2014-07-30 19:37:32\n---\n\n\n**<span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 65535/65535 K (Java/Others)\nTotal Submission(s): 3532    Accepted Submission(s): 813</span>**\n<div class=\"panel_title\" align=\"left\">Problem Description</div>\n<div class=\"panel_content\">　 　N planets are connected by M bidirectional channels that allow instant transportation. It's always possible to travel between any two planets through these channels.\nIf we can isolate some planets from others by breaking only one channel , the channel is called a bridge of the transportation system.\nPeople don't like to be isolated. So they ask what's the minimal number of bridges they can have if they decide to build a new channel.\nNote that there could be more than one channel between two planets.</div>\n<!--more-->\n<div class=\"panel_title\" align=\"left\">Input</div>\n<div class=\"panel_content\">　　The input contains multiple cases.\nEach case starts with two positive integers N and M , indicating the number of planets and the number of channels.\n(2&lt;=N&lt;=200000, 1&lt;=M&lt;=1000000)\nNext M lines each contains two positive integers A and B, indicating a channel between planet A and B in the system. Planets are numbered by 1..N.\nA line with two integers '0' terminates the input.</div>\n<div class=\"panel_title\" align=\"left\">Output</div>\n<div class=\"panel_content\">　　For each case, output the minimal number of bridges after building a new channel in a line.</div>\n<div class=\"panel_title\" align=\"left\">Sample Input</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">4 4 1 2 1 3 1 4 2 3 0 0</div>\n</div>\n<div class=\"panel_title\" align=\"left\">Sample Output</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">0</div>\n</div>\n<div class=\"panel_title\" align=\"left\">Source</div>\n<div class=\"panel_content\">[ 2013 Multi-University Training Contest 2 ](http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2013%20Multi-University%20Training%20Contest%202&amp;source=1&amp;searchmode=source)</div>\n<br/>\n\n- - -\n\n\n```C++\n#pragma comment(linker, \"/STACK:1024000000,1024000000\")//C++加栈\n#include\n#include\n#include\n#include\n#include\n#include\n#include\n#include<map>\n#include\n#include\n#include\nusing namespace std;\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\n#define N 200005\n#define M 1000005\nint n, m;\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\nstruct edge {\n\tint v, nxt;\n} e[M &lt;&lt; 1];\nstruct bridge {\n\tint u, v;\n\tbridge(int u, int v) {\n\t\tthis-&gt;u = u;\n\t\tthis-&gt;v = v;\n\t}\n};\nint pos, head[N];\nint top, stk[N];\nint pre[N], dfs_clock, belong[N], bcnt;\nvector brg;\nvoid InitEdge() {\n\tmemset(head, -1, sizeof(head));\n\tpos = 0;\n}\nvoid add(int u, int v) {\n\te[pos].v = v;\n\te[pos].nxt = head[u];\n\thead[u] = pos++;\n}\nint dfs(int u, int fa) {\n\tint lowu = pre[u] = ++dfs_clock;\n\tstk[top++] = u;\n\tbool vis = true;\n\tfor (int i = head[u]; ~i; i = e[i].nxt) {\n\t\tint v = e[i].v;\n\t\tif (v == fa &amp;&amp; vis) {\n\t\t\tvis = false; //u-v的反向边一定是v-u邻接表里的第一条边。\n\t\t\tcontinue;\n\t\t}\n\t\tif (!pre[v]) {\n\t\t\tint lowv = dfs(v, u);\n\t\t\tlowu = min(lowu, lowv);\n\t\t\tif (lowv &gt; pre[u]) { //u-v为桥\n\t\t\t\tbrg.push_back(bridge(u, v));\n\t\t\t}\n\t\t} else lowu = min(lowu, pre[v]);\n\t}\n\tif (pre[u] == lowu) {\n\t\tbcnt++;\n\t\tdo {\n\t\t\tbelong[stk[--top]] = bcnt;\n\t\t} while (stk[top] != u);\n\t}\n\treturn lowu;\n}\nvoid tarjan() {\n\ttop = bcnt = dfs_clock = 0;\n\tmemset(pre, 0, sizeof(pre));\n\tmemset(belong, 0, sizeof(belong));\n\tbrg.clear();\n\tfor (int i = 1; i &lt;= n; i++) {\n\t\tif (!pre[i]) dfs(i, -1);\n\t}\n}\nvoid rebuild() { //根据桥来缩点重构图\n\tInitEdge();\n\tfor (int i = 0; i &lt; (int) brg.size(); i++) {\n\t\tint u = belong[brg[i].u];\n\t\tint v = belong[brg[i].v];\n\t\tadd(u, v);\n\t\tadd(v, u);\n\t}\n}\nint diameter = 0;\nint findR(int u, int fa) {\n\tint h1 = 0, h2 = 0; // 以u为根，h1最高的儿子，h2次高儿子。放在dfs里面两者不会重合。\n\tfor (int i = head[u]; ~i; i = e[i].nxt) {\n\t\tint v = e[i].v;\n\t\tif (v == fa) continue;\n\t\tint h = findR(v, u) + 1; //若路径有权重，则把1改为u-v的权重\n\t\tif (h &gt; h1) h2 = h1, h1 = h;\n\t\telse h2 = max(h, h2);\n\t}\n\tdiameter = max(diameter, h1 + h2);\n\treturn h1;\n}\nvoid tree_diameter() {\n\tdiameter = 0;\n\tfindR(1, -1);\n}\nint main() {\n\twhile (scanf(\"%d%d\", &amp;n, &amp;m), n || m) {\n\t\tint u, v;\n\t\tInitEdge();\n\t\tfor (int i = 0; i &lt; m; i++) {\n\t\t\tscanf(\"%d%d\", &amp;u, &amp;v);\n\t\t\tadd(u, v);\n\t\t\tadd(v, u);\n\t\t}\n\t\ttarjan();\n\t\trebuild();\n\t\ttree_diameter();\n\t\tprintf(\"%d\\n\", bcnt - diameter - 1);\n\t}\n}\n```","slug":"hdu4612-warm-up","published":1,"updated":"2015-02-26T02:46:13.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8nb000rwppvn0gcn6bw","content":"<p><strong><span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 65535/65535 K (Java/Others)<br>Total Submission(s): 3532    Accepted Submission(s): 813</span></strong></p>\n<p><div class=\"panel_title\" align=\"left\">Problem Description</div></p>\n<p><div class=\"panel_content\">　 　N planets are connected by M bidirectional channels that allow instant transportation. It’s always possible to travel between any two planets through these channels.<br>If we can isolate some planets from others by breaking only one channel , the channel is called a bridge of the transportation system.<br>People don’t like to be isolated. So they ask what’s the minimal number of bridges they can have if they decide to build a new channel.<br>Note that there could be more than one channel between two planets.</div><br><a id=\"more\"></a></p>\n<p><div class=\"panel_title\" align=\"left\">Input</div></p>\n<p><div class=\"panel_content\">　　The input contains multiple cases.<br>Each case starts with two positive integers N and M , indicating the number of planets and the number of channels.<br>(2&lt;=N&lt;=200000, 1&lt;=M&lt;=1000000)<br>Next M lines each contains two positive integers A and B, indicating a channel between planet A and B in the system. Planets are numbered by 1..N.<br>A line with two integers ‘0’ terminates the input.</div></p>\n<p><div class=\"panel_title\" align=\"left\">Output</div></p>\n<p><div class=\"panel_content\">　　For each case, output the minimal number of bridges after building a new channel in a line.</div></p>\n<p><div class=\"panel_title\" align=\"left\">Sample Input</div></p>\n<p><div class=\"panel_content\"></div></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">4 4 1 2 1 3 1 4 2 3 0 0</div><br></p>\n<p><div class=\"panel_title\" align=\"left\">Sample Output</div></p>\n<p><div class=\"panel_content\"></div></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">0</div><br></p>\n<p><div class=\"panel_title\" align=\"left\">Source</div></p>\n<p><div class=\"panel_content\"><a href=\"http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2013%20Multi-University%20Training%20Contest%202&amp;source=1&amp;searchmode=source\" target=\"_blank\" rel=\"external\"> 2013 Multi-University Training Contest 2 </a></div><br><br></p>\n<hr>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(linker, <span class=\"meta-string\">\"/STACK:1024000000,1024000000\"</span>)<span class=\"comment\">//C++加栈</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 200005</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 1000005</span></div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = ~<span class=\"number\">0u</span> &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL lnf = ~<span class=\"number\">0u</span>ll &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">struct</span> edge &#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> v, nxt;</div><div class=\"line\">&#125; e[M &amp;lt;&amp;lt; <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">struct</span> bridge &#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> u, v;</div><div class=\"line\">\tbridge(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>-&amp;gt;u = u;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>-&amp;gt;v = v;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">int</span> pos, head[N];</div><div class=\"line\"><span class=\"keyword\">int</span> top, stk[N];</div><div class=\"line\"><span class=\"keyword\">int</span> pre[N], dfs_clock, belong[N], bcnt;</div><div class=\"line\"><span class=\"built_in\">vector</span> brg;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InitEdge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</div><div class=\"line\">\tpos = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</div><div class=\"line\">\te[pos].v = v;</div><div class=\"line\">\te[pos].nxt = head[u];</div><div class=\"line\">\thead[u] = pos++;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> lowu = pre[u] = ++dfs_clock;</div><div class=\"line\">\tstk[top++] = u;</div><div class=\"line\">\t<span class=\"keyword\">bool</span> vis = <span class=\"literal\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> v = e[i].v;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (v == fa &amp;amp;&amp;amp; vis) &#123;</div><div class=\"line\">\t\t\tvis = <span class=\"literal\">false</span>; <span class=\"comment\">//u-v的反向边一定是v-u邻接表里的第一条边。</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!pre[v]) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> lowv = dfs(v, u);</div><div class=\"line\">\t\t\tlowu = min(lowu, lowv);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (lowv &amp;gt; pre[u]) &#123; <span class=\"comment\">//u-v为桥</span></div><div class=\"line\">\t\t\t\tbrg.push_back(bridge(u, v));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> lowu = min(lowu, pre[v]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pre[u] == lowu) &#123;</div><div class=\"line\">\t\tbcnt++;</div><div class=\"line\">\t\t<span class=\"keyword\">do</span> &#123;</div><div class=\"line\">\t\t\tbelong[stk[--top]] = bcnt;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">while</span> (stk[top] != u);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> lowu;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\ttop = bcnt = dfs_clock = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(pre, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(pre));</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(belong, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(belong));</div><div class=\"line\">\tbrg.clear();</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= n; i++) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!pre[i]) dfs(i, <span class=\"number\">-1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rebuild</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">//根据桥来缩点重构图</span></div><div class=\"line\">\tInitEdge();</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; (<span class=\"keyword\">int</span>) brg.size(); i++) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> u = belong[brg[i].u];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> v = belong[brg[i].v];</div><div class=\"line\">\t\tadd(u, v);</div><div class=\"line\">\t\tadd(v, u);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> diameter = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findR</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> h1 = <span class=\"number\">0</span>, h2 = <span class=\"number\">0</span>; <span class=\"comment\">// 以u为根，h1最高的儿子，h2次高儿子。放在dfs里面两者不会重合。</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> v = e[i].v;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (v == fa) <span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> h = findR(v, u) + <span class=\"number\">1</span>; <span class=\"comment\">//若路径有权重，则把1改为u-v的权重</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (h &amp;gt; h1) h2 = h1, h1 = h;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> h2 = max(h, h2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tdiameter = max(diameter, h1 + h2);</div><div class=\"line\">\t<span class=\"keyword\">return</span> h1;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">tree_diameter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tdiameter = <span class=\"number\">0</span>;</div><div class=\"line\">\tfindR(<span class=\"number\">1</span>, <span class=\"number\">-1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;amp;n, &amp;amp;m), n || m) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> u, v;</div><div class=\"line\">\t\tInitEdge();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; m; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;amp;u, &amp;amp;v);</div><div class=\"line\">\t\t\tadd(u, v);</div><div class=\"line\">\t\t\tadd(v, u);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\ttarjan();</div><div class=\"line\">\t\trebuild();</div><div class=\"line\">\t\ttree_diameter();</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, bcnt - diameter - <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<p><strong><span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 65535/65535 K (Java/Others)<br>Total Submission(s): 3532    Accepted Submission(s): 813</span></strong></p>\n<p><div class=\"panel_title\" align=\"left\">Problem Description</div></p>\n<p><div class=\"panel_content\">　 　N planets are connected by M bidirectional channels that allow instant transportation. It’s always possible to travel between any two planets through these channels.<br>If we can isolate some planets from others by breaking only one channel , the channel is called a bridge of the transportation system.<br>People don’t like to be isolated. So they ask what’s the minimal number of bridges they can have if they decide to build a new channel.<br>Note that there could be more than one channel between two planets.</div><br>","more":"</p>\n<p><div class=\"panel_title\" align=\"left\">Input</div></p>\n<p><div class=\"panel_content\">　　The input contains multiple cases.<br>Each case starts with two positive integers N and M , indicating the number of planets and the number of channels.<br>(2&lt;=N&lt;=200000, 1&lt;=M&lt;=1000000)<br>Next M lines each contains two positive integers A and B, indicating a channel between planet A and B in the system. Planets are numbered by 1..N.<br>A line with two integers ‘0’ terminates the input.</div></p>\n<p><div class=\"panel_title\" align=\"left\">Output</div></p>\n<p><div class=\"panel_content\">　　For each case, output the minimal number of bridges after building a new channel in a line.</div></p>\n<p><div class=\"panel_title\" align=\"left\">Sample Input</div></p>\n<p><div class=\"panel_content\"></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">4 4 1 2 1 3 1 4 2 3 0 0</div><br></div></p>\n<p><div class=\"panel_title\" align=\"left\">Sample Output</div></p>\n<p><div class=\"panel_content\"></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">0</div><br></div></p>\n<p><div class=\"panel_title\" align=\"left\">Source</div></p>\n<p><div class=\"panel_content\"><a href=\"http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2013%20Multi-University%20Training%20Contest%202&amp;source=1&amp;searchmode=source\"> 2013 Multi-University Training Contest 2 </a></div><br><br/></p>\n<hr>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(linker, <span class=\"meta-string\">\"/STACK:1024000000,1024000000\"</span>)<span class=\"comment\">//C++加栈</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 200005</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 1000005</span></div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = ~<span class=\"number\">0u</span> &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL lnf = ~<span class=\"number\">0u</span>ll &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">struct</span> edge &#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> v, nxt;</div><div class=\"line\">&#125; e[M &amp;lt;&amp;lt; <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">struct</span> bridge &#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> u, v;</div><div class=\"line\">\tbridge(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>-&amp;gt;u = u;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>-&amp;gt;v = v;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">int</span> pos, head[N];</div><div class=\"line\"><span class=\"keyword\">int</span> top, stk[N];</div><div class=\"line\"><span class=\"keyword\">int</span> pre[N], dfs_clock, belong[N], bcnt;</div><div class=\"line\"><span class=\"built_in\">vector</span> brg;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InitEdge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</div><div class=\"line\">\tpos = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</div><div class=\"line\">\te[pos].v = v;</div><div class=\"line\">\te[pos].nxt = head[u];</div><div class=\"line\">\thead[u] = pos++;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> lowu = pre[u] = ++dfs_clock;</div><div class=\"line\">\tstk[top++] = u;</div><div class=\"line\">\t<span class=\"keyword\">bool</span> vis = <span class=\"literal\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> v = e[i].v;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (v == fa &amp;amp;&amp;amp; vis) &#123;</div><div class=\"line\">\t\t\tvis = <span class=\"literal\">false</span>; <span class=\"comment\">//u-v的反向边一定是v-u邻接表里的第一条边。</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!pre[v]) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> lowv = dfs(v, u);</div><div class=\"line\">\t\t\tlowu = min(lowu, lowv);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (lowv &amp;gt; pre[u]) &#123; <span class=\"comment\">//u-v为桥</span></div><div class=\"line\">\t\t\t\tbrg.push_back(bridge(u, v));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> lowu = min(lowu, pre[v]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pre[u] == lowu) &#123;</div><div class=\"line\">\t\tbcnt++;</div><div class=\"line\">\t\t<span class=\"keyword\">do</span> &#123;</div><div class=\"line\">\t\t\tbelong[stk[--top]] = bcnt;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">while</span> (stk[top] != u);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> lowu;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\ttop = bcnt = dfs_clock = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(pre, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(pre));</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(belong, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(belong));</div><div class=\"line\">\tbrg.clear();</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= n; i++) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!pre[i]) dfs(i, <span class=\"number\">-1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rebuild</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">//根据桥来缩点重构图</span></div><div class=\"line\">\tInitEdge();</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; (<span class=\"keyword\">int</span>) brg.size(); i++) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> u = belong[brg[i].u];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> v = belong[brg[i].v];</div><div class=\"line\">\t\tadd(u, v);</div><div class=\"line\">\t\tadd(v, u);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> diameter = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findR</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> h1 = <span class=\"number\">0</span>, h2 = <span class=\"number\">0</span>; <span class=\"comment\">// 以u为根，h1最高的儿子，h2次高儿子。放在dfs里面两者不会重合。</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> v = e[i].v;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (v == fa) <span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> h = findR(v, u) + <span class=\"number\">1</span>; <span class=\"comment\">//若路径有权重，则把1改为u-v的权重</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (h &amp;gt; h1) h2 = h1, h1 = h;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> h2 = max(h, h2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tdiameter = max(diameter, h1 + h2);</div><div class=\"line\">\t<span class=\"keyword\">return</span> h1;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">tree_diameter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tdiameter = <span class=\"number\">0</span>;</div><div class=\"line\">\tfindR(<span class=\"number\">1</span>, <span class=\"number\">-1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;amp;n, &amp;amp;m), n || m) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> u, v;</div><div class=\"line\">\t\tInitEdge();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; m; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;amp;u, &amp;amp;v);</div><div class=\"line\">\t\t\tadd(u, v);</div><div class=\"line\">\t\t\tadd(v, u);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\ttarjan();</div><div class=\"line\">\t\trebuild();</div><div class=\"line\">\t\ttree_diameter();</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, bcnt - diameter - <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"HDU 2874 Connections between cities","date":"2014-08-13T14:00:34.000Z","_content":"\n# Connections between cities\n\n**<span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)\nTotal Submission(s): 4759    Accepted Submission(s): 1341\n</span>**\n<div class=\"panel_title\" align=\"left\">Problem Description</div>\n<div class=\"panel_content\">After World War X, a lot of cities have been seriously damaged, and we need to rebuild those cities. However, some materials needed can only be produced in certain places. So we need to transport these materials from city to city. For most of roads had been totally destroyed during the war, there might be no path between two cities, no circle exists as well.\nNow, your task comes. After giving you the condition of the roads, we want to know if there exists a path between any two cities. If the answer is yes, output the shortest path between them.</div>\n<!--more-->\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Input</div>\n<div class=\"panel_content\">Input consists of multiple problem instances.For each instance, first line contains three integers n, m and c, 2&lt;=n&lt;=10000, 0&lt;=m&lt;10000, 1&lt;=c&lt;=1000000\\. n represents the number of cities numbered from 1 to n. Following m lines, each line has three integers i, j and k, represent a road between city i and city j, with length k. Last c lines, two integers i, j each line, indicates a query of city i and city j.</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Output</div>\n<div class=\"panel_content\">For each problem instance, one line for each query. If no path between two cities, output “Not connected”, otherwise output the length of the shortest path between them.</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Input</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">5 3 2 1 3 2 2 4 3 5 2 3 1 4 4 5</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Output</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">Not connected 6\n<div style=\"font-family: Times New Roman; font-size: 14px; background-color: f4fbff; border: #B7CBFF 1px dashed; padding: 6px;\">\n<div style=\"font-family: Arial; font-weight: bold; color: #7ca9ed; border-bottom: #B7CBFF 1px dashed;\">_Hint_</div>\nHint Huge input, scanf recommended.</div>\n_ _</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Source</div>\n<div class=\"panel_content\">[ 2009 Multi-University Training Contest 8 - Host by BJNU ](http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2009%20Multi-University%20Training%20Contest%208%20-%20Host%20by%20BJNU&amp;source=1&amp;searchmode=source)</div>\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;cmath&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define PR pair&lt;int,int&gt;\n#define MP make_pair\n#define SI(x) set&lt;x&gt;::iterator\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set&lt;x&gt;::reverse_iterator\n#define VRI(x) vector&lt;x&gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define Sz(x) (int)x.size()\n#define clrQ(x) while(!x.empty)x.pop();\n#define clr(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n/*start*/\n#define N 10004\n#define M 10005\nint n, m, c;\nstruct Edge {\n    int v, w, nxt;\n} e[M &lt;&lt; 1];\nint head[N], ecnt;\nvoid initEdge() {\n    memset(head, -1, sizeof(head));\n    ecnt = 0;\n}\nvoid add(int u, int v, int w) {\n    e[ecnt].v = v;\n    e[ecnt].w = w;\n    e[ecnt].nxt = head[u];\n    head[u] = ecnt++;\n}\n//RMQ\nint dpM[20][N &lt;&lt; 1];\nint lg2[N &lt;&lt; 1];\n#define getL(R,L) (R-(L)+1)\nvoid initRMQ(int n) {\n    lg2[0] = -1;\n    int m;\n    for (int i = 1; i &lt;= n; i++)\n        lg2[i] = i &amp; (i - 1) ? lg2[i - 1] : lg2[i - 1] + 1;\n    for (int i = 1; i &lt;= lg2[n]; i++) {\n        m = getL(n, 1 &lt;&lt; i);\n        for (int j = 1; j &lt;= m; j++) {\n            dpM[i][j] = min(dpM[i - 1][j], dpM[i - 1][j + (1 &lt;&lt; (i - 1))]);\n        }\n    }\n}\nint getRMQ(int a, int b) {\n    if (a &gt; b) swap(a, b);\n    int s = lg2[b - a + 1];\n    return min(dpM[s][a], dpM[s][getL(b, 1 &lt;&lt; s)]);\n}\n//LCA\nint E[N];\nint T[N];\nint H[N];\nint depth, cnt;\nint belong[N], bcnt;\nint findRoot() {\n    for (int i = 1; i &lt;= n; i++) {\n        if (belong[i] == 0) return i;\n    }\n    return -1;\n}\nvoid getEuler(int u, int fa = -1) {\n    int tmp = dpM[0][H[u] = ++cnt] = ++depth;\n    E[tmp] = u;\n    belong[u] = bcnt;\n    for (int i = head[u]; ~i; i = e[i].nxt) {\n        int v = e[i].v;\n        if (v == fa) continue;\n        T[v] = T[u] + e[i].w;\n        getEuler(v, u);\n        dpM[0][++cnt] = tmp;\n    }\n}\nvoid initLCA() {\n\n    memset(T, 0, sizeof(T));\n    memset(belong, 0, sizeof(belong));\n    bcnt = cnt = depth = 0;\n    int root;\n    while ((root = findRoot()) != -1) {\n        ++bcnt;\n        getEuler(root);\n    }\n    initRMQ(cnt);\n}\nint getLCA(int u, int v) {\n    if (belong[u] != belong[v]) return -1;\n    if (H[u] &gt; H[v]) swap(u, v);\n    return E[getRMQ(H[u], H[v])];\n}\nint main(int argc, char **argv) {\n    while (~scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;c)) {\n        initEdge();\n        int u, v, w;\n        for (int i = 1; i &lt;= m; i++) {\n            scanf(\"%d%d%d\", &amp;u, &amp;v, &amp;w);\n            add(u, v, w);\n            add(v, u, w);\n        }\n        initLCA();\n        while (c--) {\n            scanf(\"%d%d\", &amp;u, &amp;v);\n            int r = getLCA(u, v);\n            if (r == -1) puts(\"Not connected\");\n            else {\n                printf(\"%d\\n\", T[u] + T[v] - 2 * T[r]);\n            }\n        }\n    }\n}\n```\n\n</pre>","source":"_posts/hdu-2874-connections-between-cities.md","raw":"title: HDU 2874 Connections between cities\ncategories:\n  - ACM\ndate: 2014-08-13 22:00:34\ntags: 图论\n---\n\n# Connections between cities\n\n**<span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)\nTotal Submission(s): 4759    Accepted Submission(s): 1341\n</span>**\n<div class=\"panel_title\" align=\"left\">Problem Description</div>\n<div class=\"panel_content\">After World War X, a lot of cities have been seriously damaged, and we need to rebuild those cities. However, some materials needed can only be produced in certain places. So we need to transport these materials from city to city. For most of roads had been totally destroyed during the war, there might be no path between two cities, no circle exists as well.\nNow, your task comes. After giving you the condition of the roads, we want to know if there exists a path between any two cities. If the answer is yes, output the shortest path between them.</div>\n<!--more-->\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Input</div>\n<div class=\"panel_content\">Input consists of multiple problem instances.For each instance, first line contains three integers n, m and c, 2&lt;=n&lt;=10000, 0&lt;=m&lt;10000, 1&lt;=c&lt;=1000000\\. n represents the number of cities numbered from 1 to n. Following m lines, each line has three integers i, j and k, represent a road between city i and city j, with length k. Last c lines, two integers i, j each line, indicates a query of city i and city j.</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Output</div>\n<div class=\"panel_content\">For each problem instance, one line for each query. If no path between two cities, output “Not connected”, otherwise output the length of the shortest path between them.</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Input</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">5 3 2 1 3 2 2 4 3 5 2 3 1 4 4 5</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Output</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">Not connected 6\n<div style=\"font-family: Times New Roman; font-size: 14px; background-color: f4fbff; border: #B7CBFF 1px dashed; padding: 6px;\">\n<div style=\"font-family: Arial; font-weight: bold; color: #7ca9ed; border-bottom: #B7CBFF 1px dashed;\">_Hint_</div>\nHint Huge input, scanf recommended.</div>\n_ _</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Source</div>\n<div class=\"panel_content\">[ 2009 Multi-University Training Contest 8 - Host by BJNU ](http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2009%20Multi-University%20Training%20Contest%208%20-%20Host%20by%20BJNU&amp;source=1&amp;searchmode=source)</div>\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;cmath&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define PR pair&lt;int,int&gt;\n#define MP make_pair\n#define SI(x) set&lt;x&gt;::iterator\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set&lt;x&gt;::reverse_iterator\n#define VRI(x) vector&lt;x&gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define Sz(x) (int)x.size()\n#define clrQ(x) while(!x.empty)x.pop();\n#define clr(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n/*start*/\n#define N 10004\n#define M 10005\nint n, m, c;\nstruct Edge {\n    int v, w, nxt;\n} e[M &lt;&lt; 1];\nint head[N], ecnt;\nvoid initEdge() {\n    memset(head, -1, sizeof(head));\n    ecnt = 0;\n}\nvoid add(int u, int v, int w) {\n    e[ecnt].v = v;\n    e[ecnt].w = w;\n    e[ecnt].nxt = head[u];\n    head[u] = ecnt++;\n}\n//RMQ\nint dpM[20][N &lt;&lt; 1];\nint lg2[N &lt;&lt; 1];\n#define getL(R,L) (R-(L)+1)\nvoid initRMQ(int n) {\n    lg2[0] = -1;\n    int m;\n    for (int i = 1; i &lt;= n; i++)\n        lg2[i] = i &amp; (i - 1) ? lg2[i - 1] : lg2[i - 1] + 1;\n    for (int i = 1; i &lt;= lg2[n]; i++) {\n        m = getL(n, 1 &lt;&lt; i);\n        for (int j = 1; j &lt;= m; j++) {\n            dpM[i][j] = min(dpM[i - 1][j], dpM[i - 1][j + (1 &lt;&lt; (i - 1))]);\n        }\n    }\n}\nint getRMQ(int a, int b) {\n    if (a &gt; b) swap(a, b);\n    int s = lg2[b - a + 1];\n    return min(dpM[s][a], dpM[s][getL(b, 1 &lt;&lt; s)]);\n}\n//LCA\nint E[N];\nint T[N];\nint H[N];\nint depth, cnt;\nint belong[N], bcnt;\nint findRoot() {\n    for (int i = 1; i &lt;= n; i++) {\n        if (belong[i] == 0) return i;\n    }\n    return -1;\n}\nvoid getEuler(int u, int fa = -1) {\n    int tmp = dpM[0][H[u] = ++cnt] = ++depth;\n    E[tmp] = u;\n    belong[u] = bcnt;\n    for (int i = head[u]; ~i; i = e[i].nxt) {\n        int v = e[i].v;\n        if (v == fa) continue;\n        T[v] = T[u] + e[i].w;\n        getEuler(v, u);\n        dpM[0][++cnt] = tmp;\n    }\n}\nvoid initLCA() {\n\n    memset(T, 0, sizeof(T));\n    memset(belong, 0, sizeof(belong));\n    bcnt = cnt = depth = 0;\n    int root;\n    while ((root = findRoot()) != -1) {\n        ++bcnt;\n        getEuler(root);\n    }\n    initRMQ(cnt);\n}\nint getLCA(int u, int v) {\n    if (belong[u] != belong[v]) return -1;\n    if (H[u] &gt; H[v]) swap(u, v);\n    return E[getRMQ(H[u], H[v])];\n}\nint main(int argc, char **argv) {\n    while (~scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;c)) {\n        initEdge();\n        int u, v, w;\n        for (int i = 1; i &lt;= m; i++) {\n            scanf(\"%d%d%d\", &amp;u, &amp;v, &amp;w);\n            add(u, v, w);\n            add(v, u, w);\n        }\n        initLCA();\n        while (c--) {\n            scanf(\"%d%d\", &amp;u, &amp;v);\n            int r = getLCA(u, v);\n            if (r == -1) puts(\"Not connected\");\n            else {\n                printf(\"%d\\n\", T[u] + T[v] - 2 * T[r]);\n            }\n        }\n    }\n}\n```\n\n</pre>","slug":"hdu-2874-connections-between-cities","published":1,"updated":"2015-02-26T02:45:12.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8ng000wwppv5zgiivro","content":"<h1 id=\"Connections-between-cities\"><a href=\"#Connections-between-cities\" class=\"headerlink\" title=\"Connections between cities\"></a>Connections between cities</h1><p><strong><span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)<br>Total Submission(s): 4759    Accepted Submission(s): 1341<br></span></strong></p>\n<p><div class=\"panel_title\" align=\"left\">Problem Description</div></p>\n<p><div class=\"panel_content\">After World War X, a lot of cities have been seriously damaged, and we need to rebuild those cities. However, some materials needed can only be produced in certain places. So we need to transport these materials from city to city. For most of roads had been totally destroyed during the war, there might be no path between two cities, no circle exists as well.<br>Now, your task comes. After giving you the condition of the roads, we want to know if there exists a path between any two cities. If the answer is yes, output the shortest path between them.</div><br><a id=\"more\"></a></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Input</div></p>\n<p><div class=\"panel_content\">Input consists of multiple problem instances.For each instance, first line contains three integers n, m and c, 2&lt;=n&lt;=10000, 0&lt;=m&lt;10000, 1&lt;=c&lt;=1000000. n represents the number of cities numbered from 1 to n. Following m lines, each line has three integers i, j and k, represent a road between city i and city j, with length k. Last c lines, two integers i, j each line, indicates a query of city i and city j.</div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Output</div></p>\n<p><div class=\"panel_content\">For each problem instance, one line for each query. If no path between two cities, output “Not connected”, otherwise output the length of the shortest path between them.</div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Input</div></p>\n<p><div class=\"panel_content\"></div></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">5 3 2 1 3 2 2 4 3 5 2 3 1 4 4 5</div><br></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Output</div></p>\n<p><div class=\"panel_content\"></div></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">Not connected 6</div></p>\n<p><div style=\"font-family: Times New Roman; font-size: 14px; background-color: f4fbff; border: #B7CBFF 1px dashed; padding: 6px;\"></div></p>\n<p><div style=\"font-family: Arial; font-weight: bold; color: #7ca9ed; border-bottom: #B7CBFF 1px dashed;\"><em>Hint</em></div><br>Hint Huge input, scanf recommended.<br><em> </em><br></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Source</div></p>\n<p><div class=\"panel_content\"><a href=\"http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2009%20Multi-University%20Training%20Contest%208%20-%20Host%20by%20BJNU&amp;source=1&amp;searchmode=source\" target=\"_blank\" rel=\"external\"> 2009 Multi-University Training Contest 8 - Host by BJNU </a></div><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;map&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;set&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cmath&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;stack&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;queue&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;string&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstdio&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;vector&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cctype&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cassert&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;utility&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;numeric&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstring&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;iostream&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;algorithm&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pr pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PR pair&amp;lt;int,int&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MP make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Sz(x) (int)x.size()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrQ(x) while(!x.empty)x.pop();</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clr(x,y) memset(x,y,sizeof(x));</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = ~<span class=\"number\">0u</span> &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL lnf = ~<span class=\"number\">0u</span>ll &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"comment\">/*start*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 10004</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 10005</span></div><div class=\"line\"><span class=\"keyword\">int</span> n, m, c;</div><div class=\"line\"><span class=\"keyword\">struct</span> Edge &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> v, w, nxt;</div><div class=\"line\">&#125; e[M &amp;lt;&amp;lt; <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> head[N], ecnt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initEdge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</div><div class=\"line\">    ecnt = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span> </span>&#123;</div><div class=\"line\">    e[ecnt].v = v;</div><div class=\"line\">    e[ecnt].w = w;</div><div class=\"line\">    e[ecnt].nxt = head[u];</div><div class=\"line\">    head[u] = ecnt++;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//RMQ</span></div><div class=\"line\"><span class=\"keyword\">int</span> dpM[<span class=\"number\">20</span>][N &amp;lt;&amp;lt; <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> lg2[N &amp;lt;&amp;lt; <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> getL(R,L) (R-(L)+1)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initRMQ</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    lg2[<span class=\"number\">0</span>] = <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> m;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= n; i++)</div><div class=\"line\">        lg2[i] = i &amp;amp; (i - <span class=\"number\">1</span>) ? lg2[i - <span class=\"number\">1</span>] : lg2[i - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= lg2[n]; i++) &#123;</div><div class=\"line\">        m = getL(n, <span class=\"number\">1</span> &amp;lt;&amp;lt; i);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &amp;lt;= m; j++) &#123;</div><div class=\"line\">            dpM[i][j] = min(dpM[i - <span class=\"number\">1</span>][j], dpM[i - <span class=\"number\">1</span>][j + (<span class=\"number\">1</span> &amp;lt;&amp;lt; (i - <span class=\"number\">1</span>))]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getRMQ</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (a &amp;gt; b) swap(a, b);</div><div class=\"line\">    <span class=\"keyword\">int</span> s = lg2[b - a + <span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"keyword\">return</span> min(dpM[s][a], dpM[s][getL(b, <span class=\"number\">1</span> &amp;lt;&amp;lt; s)]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//LCA</span></div><div class=\"line\"><span class=\"keyword\">int</span> E[N];</div><div class=\"line\"><span class=\"keyword\">int</span> T[N];</div><div class=\"line\"><span class=\"keyword\">int</span> H[N];</div><div class=\"line\"><span class=\"keyword\">int</span> depth, cnt;</div><div class=\"line\"><span class=\"keyword\">int</span> belong[N], bcnt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findRoot</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (belong[i] == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> i;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getEuler</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa = <span class=\"number\">-1</span>)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp = dpM[<span class=\"number\">0</span>][H[u] = ++cnt] = ++depth;</div><div class=\"line\">    E[tmp] = u;</div><div class=\"line\">    belong[u] = bcnt;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = e[i].v;</div><div class=\"line\">        <span class=\"keyword\">if</span> (v == fa) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        T[v] = T[u] + e[i].w;</div><div class=\"line\">        getEuler(v, u);</div><div class=\"line\">        dpM[<span class=\"number\">0</span>][++cnt] = tmp;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initLCA</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">memset</span>(T, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(T));</div><div class=\"line\">    <span class=\"built_in\">memset</span>(belong, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(belong));</div><div class=\"line\">    bcnt = cnt = depth = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> root;</div><div class=\"line\">    <span class=\"keyword\">while</span> ((root = findRoot()) != <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        ++bcnt;</div><div class=\"line\">        getEuler(root);</div><div class=\"line\">    &#125;</div><div class=\"line\">    initRMQ(cnt);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getLCA</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (belong[u] != belong[v]) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (H[u] &amp;gt; H[v]) swap(u, v);</div><div class=\"line\">    <span class=\"keyword\">return</span> E[getRMQ(H[u], H[v])];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;amp;n, &amp;amp;m, &amp;amp;c)) &#123;</div><div class=\"line\">        initEdge();</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v, w;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;amp;u, &amp;amp;v, &amp;amp;w);</div><div class=\"line\">            add(u, v, w);</div><div class=\"line\">            add(v, u, w);</div><div class=\"line\">        &#125;</div><div class=\"line\">        initLCA();</div><div class=\"line\">        <span class=\"keyword\">while</span> (c--) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;amp;u, &amp;amp;v);</div><div class=\"line\">            <span class=\"keyword\">int</span> r = getLCA(u, v);</div><div class=\"line\">            <span class=\"keyword\">if</span> (r == <span class=\"number\">-1</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"Not connected\"</span>);</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, T[u] + T[v] - <span class=\"number\">2</span> * T[r]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p></p>\n","excerpt":"<h1 id=\"Connections-between-cities\"><a href=\"#Connections-between-cities\" class=\"headerlink\" title=\"Connections between cities\"></a>Connections between cities</h1><p><strong><span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)<br>Total Submission(s): 4759    Accepted Submission(s): 1341<br></span></strong></p>\n<p><div class=\"panel_title\" align=\"left\">Problem Description</div></p>\n<p><div class=\"panel_content\">After World War X, a lot of cities have been seriously damaged, and we need to rebuild those cities. However, some materials needed can only be produced in certain places. So we need to transport these materials from city to city. For most of roads had been totally destroyed during the war, there might be no path between two cities, no circle exists as well.<br>Now, your task comes. After giving you the condition of the roads, we want to know if there exists a path between any two cities. If the answer is yes, output the shortest path between them.</div><br>","more":"</p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Input</div></p>\n<p><div class=\"panel_content\">Input consists of multiple problem instances.For each instance, first line contains three integers n, m and c, 2&lt;=n&lt;=10000, 0&lt;=m&lt;10000, 1&lt;=c&lt;=1000000. n represents the number of cities numbered from 1 to n. Following m lines, each line has three integers i, j and k, represent a road between city i and city j, with length k. Last c lines, two integers i, j each line, indicates a query of city i and city j.</div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Output</div></p>\n<p><div class=\"panel_content\">For each problem instance, one line for each query. If no path between two cities, output “Not connected”, otherwise output the length of the shortest path between them.</div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Input</div></p>\n<p><div class=\"panel_content\"></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">5 3 2 1 3 2 2 4 3 5 2 3 1 4 4 5</div><br></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Output</div></p>\n<p><div class=\"panel_content\"></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">Not connected 6</p>\n<p><div style=\"font-family: Times New Roman; font-size: 14px; background-color: f4fbff; border: #B7CBFF 1px dashed; padding: 6px;\"></p>\n<p><div style=\"font-family: Arial; font-weight: bold; color: #7ca9ed; border-bottom: #B7CBFF 1px dashed;\"><em>Hint</em></div><br>Hint Huge input, scanf recommended.</div><br><em> </em></div><br></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Source</div></p>\n<p><div class=\"panel_content\"><a href=\"http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2009%20Multi-University%20Training%20Contest%208%20-%20Host%20by%20BJNU&amp;source=1&amp;searchmode=source\"> 2009 Multi-University Training Contest 8 - Host by BJNU </a></div><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;map&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;set&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cmath&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;stack&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;queue&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;string&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstdio&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;vector&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cctype&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cassert&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;utility&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;numeric&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstring&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;iostream&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;algorithm&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pr pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PR pair&amp;lt;int,int&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MP make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Sz(x) (int)x.size()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrQ(x) while(!x.empty)x.pop();</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clr(x,y) memset(x,y,sizeof(x));</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = ~<span class=\"number\">0u</span> &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL lnf = ~<span class=\"number\">0u</span>ll &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"comment\">/*start*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 10004</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 10005</span></div><div class=\"line\"><span class=\"keyword\">int</span> n, m, c;</div><div class=\"line\"><span class=\"keyword\">struct</span> Edge &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> v, w, nxt;</div><div class=\"line\">&#125; e[M &amp;lt;&amp;lt; <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> head[N], ecnt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initEdge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</div><div class=\"line\">    ecnt = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span> </span>&#123;</div><div class=\"line\">    e[ecnt].v = v;</div><div class=\"line\">    e[ecnt].w = w;</div><div class=\"line\">    e[ecnt].nxt = head[u];</div><div class=\"line\">    head[u] = ecnt++;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//RMQ</span></div><div class=\"line\"><span class=\"keyword\">int</span> dpM[<span class=\"number\">20</span>][N &amp;lt;&amp;lt; <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> lg2[N &amp;lt;&amp;lt; <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> getL(R,L) (R-(L)+1)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initRMQ</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    lg2[<span class=\"number\">0</span>] = <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> m;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= n; i++)</div><div class=\"line\">        lg2[i] = i &amp;amp; (i - <span class=\"number\">1</span>) ? lg2[i - <span class=\"number\">1</span>] : lg2[i - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= lg2[n]; i++) &#123;</div><div class=\"line\">        m = getL(n, <span class=\"number\">1</span> &amp;lt;&amp;lt; i);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &amp;lt;= m; j++) &#123;</div><div class=\"line\">            dpM[i][j] = min(dpM[i - <span class=\"number\">1</span>][j], dpM[i - <span class=\"number\">1</span>][j + (<span class=\"number\">1</span> &amp;lt;&amp;lt; (i - <span class=\"number\">1</span>))]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getRMQ</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (a &amp;gt; b) swap(a, b);</div><div class=\"line\">    <span class=\"keyword\">int</span> s = lg2[b - a + <span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"keyword\">return</span> min(dpM[s][a], dpM[s][getL(b, <span class=\"number\">1</span> &amp;lt;&amp;lt; s)]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//LCA</span></div><div class=\"line\"><span class=\"keyword\">int</span> E[N];</div><div class=\"line\"><span class=\"keyword\">int</span> T[N];</div><div class=\"line\"><span class=\"keyword\">int</span> H[N];</div><div class=\"line\"><span class=\"keyword\">int</span> depth, cnt;</div><div class=\"line\"><span class=\"keyword\">int</span> belong[N], bcnt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findRoot</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (belong[i] == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> i;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getEuler</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa = <span class=\"number\">-1</span>)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp = dpM[<span class=\"number\">0</span>][H[u] = ++cnt] = ++depth;</div><div class=\"line\">    E[tmp] = u;</div><div class=\"line\">    belong[u] = bcnt;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = e[i].v;</div><div class=\"line\">        <span class=\"keyword\">if</span> (v == fa) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        T[v] = T[u] + e[i].w;</div><div class=\"line\">        getEuler(v, u);</div><div class=\"line\">        dpM[<span class=\"number\">0</span>][++cnt] = tmp;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initLCA</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">memset</span>(T, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(T));</div><div class=\"line\">    <span class=\"built_in\">memset</span>(belong, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(belong));</div><div class=\"line\">    bcnt = cnt = depth = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> root;</div><div class=\"line\">    <span class=\"keyword\">while</span> ((root = findRoot()) != <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        ++bcnt;</div><div class=\"line\">        getEuler(root);</div><div class=\"line\">    &#125;</div><div class=\"line\">    initRMQ(cnt);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getLCA</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (belong[u] != belong[v]) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (H[u] &amp;gt; H[v]) swap(u, v);</div><div class=\"line\">    <span class=\"keyword\">return</span> E[getRMQ(H[u], H[v])];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;amp;n, &amp;amp;m, &amp;amp;c)) &#123;</div><div class=\"line\">        initEdge();</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v, w;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;amp;u, &amp;amp;v, &amp;amp;w);</div><div class=\"line\">            add(u, v, w);</div><div class=\"line\">            add(v, u, w);</div><div class=\"line\">        &#125;</div><div class=\"line\">        initLCA();</div><div class=\"line\">        <span class=\"keyword\">while</span> (c--) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;amp;u, &amp;amp;v);</div><div class=\"line\">            <span class=\"keyword\">int</span> r = getLCA(u, v);</div><div class=\"line\">            <span class=\"keyword\">if</span> (r == <span class=\"number\">-1</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"Not connected\"</span>);</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, T[u] + T[v] - <span class=\"number\">2</span> * T[r]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p></pre></p>"},{"title":"HDU4944 FSF’s game","id":"67","date":"2014-08-12T12:59:32.000Z","_content":"\n**<span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 9000/4500 MS (Java/Others)    Memory Limit: 131072/131072 K (Java/Others)\nTotal Submission(s): 166    Accepted Submission(s): 76\n</span>**\n<div class=\"panel_title\" align=\"left\">Problem Description</div>\n<div class=\"panel_content\">FSF has programmed a game.\nIn this game, players need to divide a rectangle into several same squares.\nThe length and width of rectangles are integer, and of course the side length of squares are integer.\n\nAfter division, players can get some coins.\nIf players successfully divide a AxB rectangle(length: A, width: B) into KxK squares(side length: K), they can get A*B/ gcd(A/K,B/K) gold coins.\nIn a level, you can’t get coins twice with same method.\n(For example, You can get 6 coins from 2x2(A=2,B=2) rectangle. When K=1, A*B/gcd(A/K,B/K)=2; When K=2, A*B/gcd(A/K,B/K)=4; 2+4=6; )\n<!--more-->\nThere are N*(N+1)/2 levels in this game, and every level is an unique rectangle. (1x1 , 2x1, 2x2, 3x1, ..., Nx(N-1), NxN)\n\nFSF has played this game for a long time, and he finally gets all the coins in the game.\nUnfortunately ,he uses an UNSIGNED 32-BIT INTEGER variable to count the number of coins.\nThis variable may overflow.\nWe want to know what the variable will be.\n(In other words, the number of coins mod 2^32)</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Input</div>\n<div class=\"panel_content\">There are multiply test cases.\n\nThe first line contains an integer T(T&lt;=500000), the number of test cases\n\nEach of the next T lines contain an integer N(N&lt;=500000).</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Output</div>\n<div class=\"panel_content\">Output a single line for each test case.\n\nFor each test case, you should output \"Case #C: \". first, where C indicates the case number and counts from 1.\n\nThen output the answer, the value of that UNSIGNED 32-BIT INTEGER variable.</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Input</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">3 1 3 100</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Output</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">Case #1: 1 \nCase #2: 30 \nCase #3: 15662489\n<div style=\"font-family: Times New Roman; font-size: 14px; background-color: f4fbff; border: #B7CBFF 1px dashed; padding: 6px;\">\n<div style=\"font-family: Arial; font-weight: bold; color: #7ca9ed; border-bottom: #B7CBFF 1px dashed;\">_Hint_</div>\nIn the second test case, there are six levels(1x1,1x2,1x3,2x2,2x3,3x3) Here is the details for this game: 1x1: 1(K=1); 1x2: 2(K=1); 1x3: 3(K=1); 2x2: 2(K=1), 4(K=2); 2x3: 6(K=1); 3x3: 3(K=1), 9(K=3); 1+2+3+2+4+6+3+9=30</div>\n_ _</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Author</div>\n<div class=\"panel_content\">UESTC</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Source</div>\n<div class=\"panel_content\">[ 2014 Multi-University Training Contest 7 ](http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2014%20Multi-University%20Training%20Contest%207&amp;source=1&amp;searchmode=source)</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Recommend</div>\n<div class=\"panel_content\">We have carefully selected several similar problems for you:  [4943](http://acm.hdu.edu.cn/showproblem.php?pid=4943) [4942](http://acm.hdu.edu.cn/showproblem.php?pid=4942) [4941](http://acm.hdu.edu.cn/showproblem.php?pid=4941) [4940](http://acm.hdu.edu.cn/showproblem.php?pid=4940) [4939](http://acm.hdu.edu.cn/showproblem.php?pid=4939)</div>\n<div class=\"panel_content\">N(LogN)的复杂度。</div>\n```C++\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\nusing namespace std;\n#define N 500001\nunsigned int f[N];\nunsigned int g[N];\nint n;\nint main() {\n    int T;\n    for (int i = 1; i &lt; N; i++) {\n        for (int j = 1; i * j &lt; N; j++) {\n            g[i * j] += (1LL + j) * j / 2;\n        }\n    }\n    f[1] = 1;\n    for (int i = 2; i &lt; N; i++) {\n        f[i] = f[i - 1] + i * g[i];\n    }\n    scanf(\"%d\", &amp;T);\n    for (int c = 1; c &lt;= T; c++) {\n        scanf(\"%d\", &amp;n);\n        printf(\"Case #%d: %u\\n\", c, f[n]);\n    }\n}\n```\n","source":"_posts/hdu4944-fsfs-game.md","raw":"title: HDU4944 FSF’s game\ncategories:\n  - ACM\nid: 67\ndate: 2014-08-12 20:59:32\ntags: 数论\n---\n\n**<span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 9000/4500 MS (Java/Others)    Memory Limit: 131072/131072 K (Java/Others)\nTotal Submission(s): 166    Accepted Submission(s): 76\n</span>**\n<div class=\"panel_title\" align=\"left\">Problem Description</div>\n<div class=\"panel_content\">FSF has programmed a game.\nIn this game, players need to divide a rectangle into several same squares.\nThe length and width of rectangles are integer, and of course the side length of squares are integer.\n\nAfter division, players can get some coins.\nIf players successfully divide a AxB rectangle(length: A, width: B) into KxK squares(side length: K), they can get A*B/ gcd(A/K,B/K) gold coins.\nIn a level, you can’t get coins twice with same method.\n(For example, You can get 6 coins from 2x2(A=2,B=2) rectangle. When K=1, A*B/gcd(A/K,B/K)=2; When K=2, A*B/gcd(A/K,B/K)=4; 2+4=6; )\n<!--more-->\nThere are N*(N+1)/2 levels in this game, and every level is an unique rectangle. (1x1 , 2x1, 2x2, 3x1, ..., Nx(N-1), NxN)\n\nFSF has played this game for a long time, and he finally gets all the coins in the game.\nUnfortunately ,he uses an UNSIGNED 32-BIT INTEGER variable to count the number of coins.\nThis variable may overflow.\nWe want to know what the variable will be.\n(In other words, the number of coins mod 2^32)</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Input</div>\n<div class=\"panel_content\">There are multiply test cases.\n\nThe first line contains an integer T(T&lt;=500000), the number of test cases\n\nEach of the next T lines contain an integer N(N&lt;=500000).</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Output</div>\n<div class=\"panel_content\">Output a single line for each test case.\n\nFor each test case, you should output \"Case #C: \". first, where C indicates the case number and counts from 1.\n\nThen output the answer, the value of that UNSIGNED 32-BIT INTEGER variable.</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Input</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">3 1 3 100</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Output</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">Case #1: 1 \nCase #2: 30 \nCase #3: 15662489\n<div style=\"font-family: Times New Roman; font-size: 14px; background-color: f4fbff; border: #B7CBFF 1px dashed; padding: 6px;\">\n<div style=\"font-family: Arial; font-weight: bold; color: #7ca9ed; border-bottom: #B7CBFF 1px dashed;\">_Hint_</div>\nIn the second test case, there are six levels(1x1,1x2,1x3,2x2,2x3,3x3) Here is the details for this game: 1x1: 1(K=1); 1x2: 2(K=1); 1x3: 3(K=1); 2x2: 2(K=1), 4(K=2); 2x3: 6(K=1); 3x3: 3(K=1), 9(K=3); 1+2+3+2+4+6+3+9=30</div>\n_ _</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Author</div>\n<div class=\"panel_content\">UESTC</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Source</div>\n<div class=\"panel_content\">[ 2014 Multi-University Training Contest 7 ](http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2014%20Multi-University%20Training%20Contest%207&amp;source=1&amp;searchmode=source)</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Recommend</div>\n<div class=\"panel_content\">We have carefully selected several similar problems for you:  [4943](http://acm.hdu.edu.cn/showproblem.php?pid=4943) [4942](http://acm.hdu.edu.cn/showproblem.php?pid=4942) [4941](http://acm.hdu.edu.cn/showproblem.php?pid=4941) [4940](http://acm.hdu.edu.cn/showproblem.php?pid=4940) [4939](http://acm.hdu.edu.cn/showproblem.php?pid=4939)</div>\n<div class=\"panel_content\">N(LogN)的复杂度。</div>\n```C++\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\nusing namespace std;\n#define N 500001\nunsigned int f[N];\nunsigned int g[N];\nint n;\nint main() {\n    int T;\n    for (int i = 1; i &lt; N; i++) {\n        for (int j = 1; i * j &lt; N; j++) {\n            g[i * j] += (1LL + j) * j / 2;\n        }\n    }\n    f[1] = 1;\n    for (int i = 2; i &lt; N; i++) {\n        f[i] = f[i - 1] + i * g[i];\n    }\n    scanf(\"%d\", &amp;T);\n    for (int c = 1; c &lt;= T; c++) {\n        scanf(\"%d\", &amp;n);\n        printf(\"Case #%d: %u\\n\", c, f[n]);\n    }\n}\n```\n","slug":"hdu4944-fsfs-game","published":1,"updated":"2015-02-26T02:46:40.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8nh000zwppva7frq3qi","content":"<p><strong><span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 9000/4500 MS (Java/Others)    Memory Limit: 131072/131072 K (Java/Others)<br>Total Submission(s): 166    Accepted Submission(s): 76<br></span></strong></p>\n<p><div class=\"panel_title\" align=\"left\">Problem Description</div></p>\n<p><div class=\"panel_content\">FSF has programmed a game.<br>In this game, players need to divide a rectangle into several same squares.<br>The length and width of rectangles are integer, and of course the side length of squares are integer.</div></p>\n<p>After division, players can get some coins.<br>If players successfully divide a AxB rectangle(length: A, width: B) into KxK squares(side length: K), they can get A<em>B/ gcd(A/K,B/K) gold coins.<br>In a level, you can’t get coins twice with same method.<br>(For example, You can get 6 coins from 2x2(A=2,B=2) rectangle. When K=1, A</em>B/gcd(A/K,B/K)=2; When K=2, A<em>B/gcd(A/K,B/K)=4; 2+4=6; )<br><a id=\"more\"></a><br>There are N</em>(N+1)/2 levels in this game, and every level is an unique rectangle. (1x1 , 2x1, 2x2, 3x1, …, Nx(N-1), NxN)</p>\n<p>FSF has played this game for a long time, and he finally gets all the coins in the game.<br>Unfortunately ,he uses an UNSIGNED 32-BIT INTEGER variable to count the number of coins.<br>This variable may overflow.<br>We want to know what the variable will be.<br>(In other words, the number of coins mod 2^32)</p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Input</div></p>\n<p><div class=\"panel_content\">There are multiply test cases.</div></p>\n<p>The first line contains an integer T(T&lt;=500000), the number of test cases</p>\n<p>Each of the next T lines contain an integer N(N&lt;=500000).</p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Output</div></p>\n<p><div class=\"panel_content\">Output a single line for each test case.</div></p>\n<p>For each test case, you should output “Case #C: “. first, where C indicates the case number and counts from 1.</p>\n<p>Then output the answer, the value of that UNSIGNED 32-BIT INTEGER variable.</p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Input</div></p>\n<p><div class=\"panel_content\"></div></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">3 1 3 100</div><br></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Output</div></p>\n<p><div class=\"panel_content\"></div></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">Case #1: 1<br>Case #2: 30<br>Case #3: 15662489</div></p>\n<p><div style=\"font-family: Times New Roman; font-size: 14px; background-color: f4fbff; border: #B7CBFF 1px dashed; padding: 6px;\"></div></p>\n<p><div style=\"font-family: Arial; font-weight: bold; color: #7ca9ed; border-bottom: #B7CBFF 1px dashed;\"><em>Hint</em></div><br>In the second test case, there are six levels(1x1,1x2,1x3,2x2,2x3,3x3) Here is the details for this game: 1x1: 1(K=1); 1x2: 2(K=1); 1x3: 3(K=1); 2x2: 2(K=1), 4(K=2); 2x3: 6(K=1); 3x3: 3(K=1), 9(K=3); 1+2+3+2+4+6+3+9=30<br><em> </em><br></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Author</div></p>\n<p><div class=\"panel_content\">UESTC</div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Source</div></p>\n<p><div class=\"panel_content\"><a href=\"http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2014%20Multi-University%20Training%20Contest%207&amp;source=1&amp;searchmode=source\" target=\"_blank\" rel=\"external\"> 2014 Multi-University Training Contest 7 </a></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Recommend</div></p>\n<p><div class=\"panel_content\">We have carefully selected several similar problems for you:  <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4943\" target=\"_blank\" rel=\"external\">4943</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4942\" target=\"_blank\" rel=\"external\">4942</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4941\" target=\"_blank\" rel=\"external\">4941</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4940\" target=\"_blank\" rel=\"external\">4940</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4939\" target=\"_blank\" rel=\"external\">4939</a></div></p>\n<p><div class=\"panel_content\">N(LogN)的复杂度。</div><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstdio&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstring&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 500001</span></div><div class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> f[N];</div><div class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> g[N];</div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> T;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt; N; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; i * j &amp;lt; N; j++) &#123;</div><div class=\"line\">            g[i * j] += (<span class=\"number\">1L</span>L + j) * j / <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    f[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &amp;lt; N; i++) &#123;</div><div class=\"line\">        f[i] = f[i - <span class=\"number\">1</span>] + i * g[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;amp;T);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">1</span>; c &amp;lt;= T; c++) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;amp;n);</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Case #%d: %u\\n\"</span>, c, f[n]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p><strong><span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 9000/4500 MS (Java/Others)    Memory Limit: 131072/131072 K (Java/Others)<br>Total Submission(s): 166    Accepted Submission(s): 76<br></span></strong></p>\n<p><div class=\"panel_title\" align=\"left\">Problem Description</div></p>\n<p><div class=\"panel_content\">FSF has programmed a game.<br>In this game, players need to divide a rectangle into several same squares.<br>The length and width of rectangles are integer, and of course the side length of squares are integer.</p>\n<p>After division, players can get some coins.<br>If players successfully divide a AxB rectangle(length: A, width: B) into KxK squares(side length: K), they can get A<em>B/ gcd(A/K,B/K) gold coins.<br>In a level, you can’t get coins twice with same method.<br>(For example, You can get 6 coins from 2x2(A=2,B=2) rectangle. When K=1, A</em>B/gcd(A/K,B/K)=2; When K=2, A<em>B/gcd(A/K,B/K)=4; 2+4=6; )<br>","more":"<br>There are N</em>(N+1)/2 levels in this game, and every level is an unique rectangle. (1x1 , 2x1, 2x2, 3x1, …, Nx(N-1), NxN)</p>\n<p>FSF has played this game for a long time, and he finally gets all the coins in the game.<br>Unfortunately ,he uses an UNSIGNED 32-BIT INTEGER variable to count the number of coins.<br>This variable may overflow.<br>We want to know what the variable will be.<br>(In other words, the number of coins mod 2^32)</div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Input</div></p>\n<p><div class=\"panel_content\">There are multiply test cases.</p>\n<p>The first line contains an integer T(T&lt;=500000), the number of test cases</p>\n<p>Each of the next T lines contain an integer N(N&lt;=500000).</div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Output</div></p>\n<p><div class=\"panel_content\">Output a single line for each test case.</p>\n<p>For each test case, you should output “Case #C: “. first, where C indicates the case number and counts from 1.</p>\n<p>Then output the answer, the value of that UNSIGNED 32-BIT INTEGER variable.</div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Input</div></p>\n<p><div class=\"panel_content\"></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">3 1 3 100</div><br></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Output</div></p>\n<p><div class=\"panel_content\"></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">Case #1: 1<br>Case #2: 30<br>Case #3: 15662489</p>\n<p><div style=\"font-family: Times New Roman; font-size: 14px; background-color: f4fbff; border: #B7CBFF 1px dashed; padding: 6px;\"></p>\n<p><div style=\"font-family: Arial; font-weight: bold; color: #7ca9ed; border-bottom: #B7CBFF 1px dashed;\"><em>Hint</em></div><br>In the second test case, there are six levels(1x1,1x2,1x3,2x2,2x3,3x3) Here is the details for this game: 1x1: 1(K=1); 1x2: 2(K=1); 1x3: 3(K=1); 2x2: 2(K=1), 4(K=2); 2x3: 6(K=1); 3x3: 3(K=1), 9(K=3); 1+2+3+2+4+6+3+9=30</div><br><em> </em></div><br></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Author</div></p>\n<p><div class=\"panel_content\">UESTC</div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Source</div></p>\n<p><div class=\"panel_content\"><a href=\"http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2014%20Multi-University%20Training%20Contest%207&amp;source=1&amp;searchmode=source\"> 2014 Multi-University Training Contest 7 </a></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Recommend</div></p>\n<p><div class=\"panel_content\">We have carefully selected several similar problems for you:  <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4943\">4943</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4942\">4942</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4941\">4941</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4940\">4940</a> <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4939\">4939</a></div></p>\n<p><div class=\"panel_content\">N(LogN)的复杂度。</div><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstdio&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstring&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 500001</span></div><div class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> f[N];</div><div class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> g[N];</div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> T;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt; N; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; i * j &amp;lt; N; j++) &#123;</div><div class=\"line\">            g[i * j] += (<span class=\"number\">1L</span>L + j) * j / <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    f[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &amp;lt; N; i++) &#123;</div><div class=\"line\">        f[i] = f[i - <span class=\"number\">1</span>] + i * g[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;amp;T);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">1</span>; c &amp;lt;= T; c++) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;amp;n);</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Case #%d: %u\\n\"</span>, c, f[n]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"HDU4888 Redraw Beautiful Drawings ","date":"2014-07-29T13:43:58.000Z","_content":"\n<div class=\"panel_title\" align=\"left\">Problem Description</div>\n<div class=\"panel_content\">Alice and Bob are playing together. Alice is crazy about art and she has visited many museums around the world. She has a good memory and she can remember all drawings she has seen.Today Alice designs a game using these drawings in her memory. First, she matches K+1 colors appears in the picture to K+1 different integers(from 0 to K). After that, she slices the drawing into grids and there are N rows and M columns. Each grid has an integer on it(from 0 to K) representing the color on the corresponding position in the original drawing. Alice wants to share the wonderful drawings with Bob and she tells Bob the size of the drawing, the number of different colors, and the sum of integers on each row and each column. Bob has to redraw the drawing with Alice's information. Unfortunately, somtimes, the information Alice offers is wrong because of Alice's poor math. And sometimes, Bob can work out multiple different drawings using the information Alice provides. Bob gets confused and he needs your help. You have to tell Bob if Alice's information is right and if her information is right you should also tell Bob whether he can get a unique drawing.</div>\n<div class=\"panel_bottom\"></div>\n<!--more-->\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Input</div>\n<div class=\"panel_content\">The input contains mutiple testcases.For each testcase, the first line contains three integers N(1 ≤ N ≤ 400) , M(1 ≤ M ≤ 400) and K(1 ≤ K ≤ 40).\nN integers are given in the second line representing the sum of N rows.\nM integers are given in the third line representing the sum of M columns.The input is terminated by EOF.</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Output</div>\n<div class=\"panel_content\">For each testcase, if there is no solution for Bob, output \"Impossible\" in one line(without the quotation mark); if there is only one solution for Bob, output \"Unique\" in one line(without the quotation mark) and output an N * M matrix in the following N lines representing Bob's unique solution; if there are many ways for Bob to redraw the drawing, output \"Not Unique\" in one line(without the quotation mark).</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Input</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">2 2 4 4 2 4 2 4 2 2 2 2 5 0 5 4 1 4 3 9 1 2 3 3</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Output</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">Not Unique Impossible Unique 1 2 3 3</div>\n</div>\n&nbsp;\n\n- - -\n\n\n第一步，考虑如何求是否有解。使用网络流求解，每一行和每一列分别对应一个点，加上源点和汇点一共有N+M+2个点。有三类边：\n\n\n\n1.  源点 -&gt; 每一行对应的点，流量限制为该行的和\n2.  每一行对应的点 -&gt; 每一列对应的点，流量限制为 K\n3.  每一列对应的点 -&gt; 汇点，流量限制为该列的和\n&nbsp;\n\n对上图做最大流，若源点出发的边和到达汇点的边全都满流，则有解，否则无解。若要求构造方案，则 (i,j) 对应的整数就是行 i–&gt; 列 j 的流量。\n\n第二步，考虑解是否唯一。显然，解唯一的充分必要条件是完成最大流后的残余网络没有长度大于 2 的环。所以，判断解的唯一性可使用dfs，注意遍历的时候不可以在走完一条边后马上走其反向边，加此限制检查是否有环即可判断解是否唯一。\n\n至此，全题已解决。\n```C++\n#include &lt;iostream&gt; \n#include &lt;cstring&gt; \n#include &lt;cstdio&gt; \n#include &lt;queue&gt; \n#include &lt;cstdlib&gt;\nusing namespace std;\n\nconst int maxn=500,maxm=maxn*maxn;\nint next[maxm*2],num[maxm*2],r[maxm*2],a[maxn*2],row_sum[maxn],col_sum[maxn],n,m,K,tt,T,d[maxn*2],st[maxn*2],cod[maxn][maxn];\nint h[maxn*2],vh[maxn*2];\nbool don[maxm*2],in[maxn*2];\n\nvoid insert(int x,int y,int rr)\n{\n\tnext[++tt]=a[x];num[tt]=y;r[tt]=rr;a[x]=tt;\n\tnext[++tt]=a[y];num[tt]=x;r[tt]=0;a[y]=tt;\n}\n\nvoid construct()\n{\n\ttt=1;T=n+m+1;\n\tfor (int i=0;i&lt;=T;i++) a[i]=0;\n\tfor (int i=1;i&lt;=n;i++) insert(0,i,row_sum[i]);\n\tfor (int i=1;i&lt;=m;i++) insert(i+n,T,col_sum[i]);\n\tfor (int i=1;i&lt;=n;i++)\n\t{\n\t\tfor (int j=1;j&lt;=m;j++)\n\t\t{\n\t\t\tinsert(i,j+n,K);\n\t\t\tcod[i][j]=tt;\n\t\t}\n\t}\n}\n\nint dfs(int x,int y)\n{\n\tif (x==T) return y;\n\tint sig=st[x],minh=T+1;\n\tdo\n\t{\n\t\tif (r[st[x]])\n\t\t{\n\t\t\tif (h[num[st[x]]]+1==h[x])\n\t\t\t{\n\t\t\t\tint k=dfs(num[st[x]],min(y,r[st[x]]));\n\t\t\t\tif (k)\n\t\t\t\t{\n\t\t\t\t\tr[st[x]]-=k;\n\t\t\t\t\tr[st[x]^1]+=k;\n\t\t\t\t\treturn k;\n\t\t\t\t}\n\t\t\t}\n\t\t\tminh=min(minh,h[num[st[x]]]+1);\n\t\t\tif (h[0]&gt;T) return 0;\n\t\t}\n\t\tst[x]=next[st[x]];\n\t\tif (st[x]==0) st[x]=a[x];\n\t}while (sig!=st[x]);\n\tif (vh[h[x]]--==0) h[0]=T+1;\n\tvh[h[x]=minh]++;\n\treturn 0;\n}\n\nint max_flow()\n{\n\tfor (int i=0;i&lt;=T;i++) h[i]=vh[i]=0;\n\tfor (int i=0;i&lt;=T;i++) st[i]=a[i];\n\tvh[0]=T+1;\n\tint ret=0;\n\twhile (h[0]&lt;=T) ret+=dfs(0,K+1);\n\treturn ret;\n}\n\n/*bool find_circle()\n{\n\tdeque  q;\n\tfor (int i=0;i&lt;=T;i++) d[i]=0;\n\tfor (int i=0;i&lt;=T;i++)\n\t{\n\t\tfor (int p=a[i];p;p=next[p])\n\t\t{\n\t\t\tif (r[p]) d[i]++;\n\t\t}\n\t\tif (d[i]==0) q.push_back(i);\n\t}\n\tint cnt=T+1;\n\twhile (!q.empty())\n\t{\n\t\tint x=q.front();\n\t\tcnt--;\n\t\tq.pop_front();\n\t\tfor (int p=a[x];p;p=next[p])\n\t\t{\n\t\t\tif (r[p^1]) \n\t\t\t{\n\t\t\t\td[num[p]]--;\n\t\t\t\tif (d[num[p]]==0) q.push_back(num[p]);\n\t\t\t}\n\t\t}\n\t}\n\treturn cnt;\n}*/\n\nbool visit(int x,int ed)\n{\n\tif (don[ed]) \n\t\treturn in[x];\n\tdon[ed]=true;\n\tin[x]=true;\n\tfor (int p=a[x];p;p=next[p])\n\t{\n\t\tif (r[p] &amp;&amp; (ed^p)!=1)\n\t\t\tif (visit(num[p],p)) return true;\n\t}\n\tin[x]=false;\n\treturn false;\n}\n\nbool find_circle()\n{\n\tfor (int i=0;i&lt;=T;i++) in[i]=false;\n\tfor (int i=1;i&lt;=tt;i++) don[i]=false;\n\tint col=0;\n\tfor (int i=2;i&lt;=tt;i++)\n\t{\n\t\tif (r[i] &amp;&amp; !don[i])\n\t\t{\n\t\t\tin[num[i^1]]=true;\n\t\t\tif (visit(num[i],i)) return true; \n\t\t\tin[num[i^1]]=false;\n\t\t}\n\t}\n\treturn false;\n}\n\nvoid print_scheme()\n{\n\tprintf(\"Unique\\n\");\n\tfor (int i=1;i&lt;=n;i++)\n\t{\n\t\tprintf(\"%d\",r[cod[i][1]]);\n\t\tfor (int j=2;j&lt;=m;j++) printf(\" %d\",r[cod[i][j]]);\n\t\tprintf(\"\\n\");\n\t}\n}\n\nint main()\n{\n\twhile (scanf(\"%d%d%d\",&amp;n,&amp;m,&amp;K)!=EOF)\n\t{\n\t\tint tmp=0;\n\t\tfor (int i=1;i&lt;=n;i++)\n\t\t{\n\t\t\tscanf(\"%d\",&amp;row_sum[i]);\n\t\t\ttmp+=row_sum[i];\n\t\t}\n\t\tint sum=tmp;\n\t\tfor (int i=1;i&lt;=m;i++)\n\t\t{\n\t\t\tscanf(\"%d\",&amp;col_sum[i]);\n\t\t\ttmp-=col_sum[i];\n\t\t}\n\t\tif (tmp) \n\t\t{\n\t\t\tprintf(\"Impossible\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tconstruct();\n\t\tif (max_flow()&lt;sum)\n\t\t{\n\t\t\tprintf(\"Impossible\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tif (find_circle())\n\t\t{\n\t\t\tprintf(\"Not Unique\\n\");\n\t\t}else print_scheme();\n\t}\n\n\treturn 0;\n}\n```","source":"_posts/hdu4888-redraw-beautiful-drawings.md","raw":"title: \"HDU4888 Redraw Beautiful Drawings \"\ncategories:\n  - ACM\ndate: 2014-07-29 21:43:58\ntags: 网络流\n---\n\n<div class=\"panel_title\" align=\"left\">Problem Description</div>\n<div class=\"panel_content\">Alice and Bob are playing together. Alice is crazy about art and she has visited many museums around the world. She has a good memory and she can remember all drawings she has seen.Today Alice designs a game using these drawings in her memory. First, she matches K+1 colors appears in the picture to K+1 different integers(from 0 to K). After that, she slices the drawing into grids and there are N rows and M columns. Each grid has an integer on it(from 0 to K) representing the color on the corresponding position in the original drawing. Alice wants to share the wonderful drawings with Bob and she tells Bob the size of the drawing, the number of different colors, and the sum of integers on each row and each column. Bob has to redraw the drawing with Alice's information. Unfortunately, somtimes, the information Alice offers is wrong because of Alice's poor math. And sometimes, Bob can work out multiple different drawings using the information Alice provides. Bob gets confused and he needs your help. You have to tell Bob if Alice's information is right and if her information is right you should also tell Bob whether he can get a unique drawing.</div>\n<div class=\"panel_bottom\"></div>\n<!--more-->\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Input</div>\n<div class=\"panel_content\">The input contains mutiple testcases.For each testcase, the first line contains three integers N(1 ≤ N ≤ 400) , M(1 ≤ M ≤ 400) and K(1 ≤ K ≤ 40).\nN integers are given in the second line representing the sum of N rows.\nM integers are given in the third line representing the sum of M columns.The input is terminated by EOF.</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Output</div>\n<div class=\"panel_content\">For each testcase, if there is no solution for Bob, output \"Impossible\" in one line(without the quotation mark); if there is only one solution for Bob, output \"Unique\" in one line(without the quotation mark) and output an N * M matrix in the following N lines representing Bob's unique solution; if there are many ways for Bob to redraw the drawing, output \"Not Unique\" in one line(without the quotation mark).</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Input</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">2 2 4 4 2 4 2 4 2 2 2 2 5 0 5 4 1 4 3 9 1 2 3 3</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Output</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">Not Unique Impossible Unique 1 2 3 3</div>\n</div>\n&nbsp;\n\n- - -\n\n\n第一步，考虑如何求是否有解。使用网络流求解，每一行和每一列分别对应一个点，加上源点和汇点一共有N+M+2个点。有三类边：\n\n\n\n1.  源点 -&gt; 每一行对应的点，流量限制为该行的和\n2.  每一行对应的点 -&gt; 每一列对应的点，流量限制为 K\n3.  每一列对应的点 -&gt; 汇点，流量限制为该列的和\n&nbsp;\n\n对上图做最大流，若源点出发的边和到达汇点的边全都满流，则有解，否则无解。若要求构造方案，则 (i,j) 对应的整数就是行 i–&gt; 列 j 的流量。\n\n第二步，考虑解是否唯一。显然，解唯一的充分必要条件是完成最大流后的残余网络没有长度大于 2 的环。所以，判断解的唯一性可使用dfs，注意遍历的时候不可以在走完一条边后马上走其反向边，加此限制检查是否有环即可判断解是否唯一。\n\n至此，全题已解决。\n```C++\n#include &lt;iostream&gt; \n#include &lt;cstring&gt; \n#include &lt;cstdio&gt; \n#include &lt;queue&gt; \n#include &lt;cstdlib&gt;\nusing namespace std;\n\nconst int maxn=500,maxm=maxn*maxn;\nint next[maxm*2],num[maxm*2],r[maxm*2],a[maxn*2],row_sum[maxn],col_sum[maxn],n,m,K,tt,T,d[maxn*2],st[maxn*2],cod[maxn][maxn];\nint h[maxn*2],vh[maxn*2];\nbool don[maxm*2],in[maxn*2];\n\nvoid insert(int x,int y,int rr)\n{\n\tnext[++tt]=a[x];num[tt]=y;r[tt]=rr;a[x]=tt;\n\tnext[++tt]=a[y];num[tt]=x;r[tt]=0;a[y]=tt;\n}\n\nvoid construct()\n{\n\ttt=1;T=n+m+1;\n\tfor (int i=0;i&lt;=T;i++) a[i]=0;\n\tfor (int i=1;i&lt;=n;i++) insert(0,i,row_sum[i]);\n\tfor (int i=1;i&lt;=m;i++) insert(i+n,T,col_sum[i]);\n\tfor (int i=1;i&lt;=n;i++)\n\t{\n\t\tfor (int j=1;j&lt;=m;j++)\n\t\t{\n\t\t\tinsert(i,j+n,K);\n\t\t\tcod[i][j]=tt;\n\t\t}\n\t}\n}\n\nint dfs(int x,int y)\n{\n\tif (x==T) return y;\n\tint sig=st[x],minh=T+1;\n\tdo\n\t{\n\t\tif (r[st[x]])\n\t\t{\n\t\t\tif (h[num[st[x]]]+1==h[x])\n\t\t\t{\n\t\t\t\tint k=dfs(num[st[x]],min(y,r[st[x]]));\n\t\t\t\tif (k)\n\t\t\t\t{\n\t\t\t\t\tr[st[x]]-=k;\n\t\t\t\t\tr[st[x]^1]+=k;\n\t\t\t\t\treturn k;\n\t\t\t\t}\n\t\t\t}\n\t\t\tminh=min(minh,h[num[st[x]]]+1);\n\t\t\tif (h[0]&gt;T) return 0;\n\t\t}\n\t\tst[x]=next[st[x]];\n\t\tif (st[x]==0) st[x]=a[x];\n\t}while (sig!=st[x]);\n\tif (vh[h[x]]--==0) h[0]=T+1;\n\tvh[h[x]=minh]++;\n\treturn 0;\n}\n\nint max_flow()\n{\n\tfor (int i=0;i&lt;=T;i++) h[i]=vh[i]=0;\n\tfor (int i=0;i&lt;=T;i++) st[i]=a[i];\n\tvh[0]=T+1;\n\tint ret=0;\n\twhile (h[0]&lt;=T) ret+=dfs(0,K+1);\n\treturn ret;\n}\n\n/*bool find_circle()\n{\n\tdeque  q;\n\tfor (int i=0;i&lt;=T;i++) d[i]=0;\n\tfor (int i=0;i&lt;=T;i++)\n\t{\n\t\tfor (int p=a[i];p;p=next[p])\n\t\t{\n\t\t\tif (r[p]) d[i]++;\n\t\t}\n\t\tif (d[i]==0) q.push_back(i);\n\t}\n\tint cnt=T+1;\n\twhile (!q.empty())\n\t{\n\t\tint x=q.front();\n\t\tcnt--;\n\t\tq.pop_front();\n\t\tfor (int p=a[x];p;p=next[p])\n\t\t{\n\t\t\tif (r[p^1]) \n\t\t\t{\n\t\t\t\td[num[p]]--;\n\t\t\t\tif (d[num[p]]==0) q.push_back(num[p]);\n\t\t\t}\n\t\t}\n\t}\n\treturn cnt;\n}*/\n\nbool visit(int x,int ed)\n{\n\tif (don[ed]) \n\t\treturn in[x];\n\tdon[ed]=true;\n\tin[x]=true;\n\tfor (int p=a[x];p;p=next[p])\n\t{\n\t\tif (r[p] &amp;&amp; (ed^p)!=1)\n\t\t\tif (visit(num[p],p)) return true;\n\t}\n\tin[x]=false;\n\treturn false;\n}\n\nbool find_circle()\n{\n\tfor (int i=0;i&lt;=T;i++) in[i]=false;\n\tfor (int i=1;i&lt;=tt;i++) don[i]=false;\n\tint col=0;\n\tfor (int i=2;i&lt;=tt;i++)\n\t{\n\t\tif (r[i] &amp;&amp; !don[i])\n\t\t{\n\t\t\tin[num[i^1]]=true;\n\t\t\tif (visit(num[i],i)) return true; \n\t\t\tin[num[i^1]]=false;\n\t\t}\n\t}\n\treturn false;\n}\n\nvoid print_scheme()\n{\n\tprintf(\"Unique\\n\");\n\tfor (int i=1;i&lt;=n;i++)\n\t{\n\t\tprintf(\"%d\",r[cod[i][1]]);\n\t\tfor (int j=2;j&lt;=m;j++) printf(\" %d\",r[cod[i][j]]);\n\t\tprintf(\"\\n\");\n\t}\n}\n\nint main()\n{\n\twhile (scanf(\"%d%d%d\",&amp;n,&amp;m,&amp;K)!=EOF)\n\t{\n\t\tint tmp=0;\n\t\tfor (int i=1;i&lt;=n;i++)\n\t\t{\n\t\t\tscanf(\"%d\",&amp;row_sum[i]);\n\t\t\ttmp+=row_sum[i];\n\t\t}\n\t\tint sum=tmp;\n\t\tfor (int i=1;i&lt;=m;i++)\n\t\t{\n\t\t\tscanf(\"%d\",&amp;col_sum[i]);\n\t\t\ttmp-=col_sum[i];\n\t\t}\n\t\tif (tmp) \n\t\t{\n\t\t\tprintf(\"Impossible\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tconstruct();\n\t\tif (max_flow()&lt;sum)\n\t\t{\n\t\t\tprintf(\"Impossible\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tif (find_circle())\n\t\t{\n\t\t\tprintf(\"Not Unique\\n\");\n\t\t}else print_scheme();\n\t}\n\n\treturn 0;\n}\n```","slug":"hdu4888-redraw-beautiful-drawings","published":1,"updated":"2015-02-26T02:46:24.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8nj0011wppv6x2a509m","content":"<p><div class=\"panel_title\" align=\"left\">Problem Description</div></p>\n<p><div class=\"panel_content\">Alice and Bob are playing together. Alice is crazy about art and she has visited many museums around the world. She has a good memory and she can remember all drawings she has seen.Today Alice designs a game using these drawings in her memory. First, she matches K+1 colors appears in the picture to K+1 different integers(from 0 to K). After that, she slices the drawing into grids and there are N rows and M columns. Each grid has an integer on it(from 0 to K) representing the color on the corresponding position in the original drawing. Alice wants to share the wonderful drawings with Bob and she tells Bob the size of the drawing, the number of different colors, and the sum of integers on each row and each column. Bob has to redraw the drawing with Alice’s information. Unfortunately, somtimes, the information Alice offers is wrong because of Alice’s poor math. And sometimes, Bob can work out multiple different drawings using the information Alice provides. Bob gets confused and he needs your help. You have to tell Bob if Alice’s information is right and if her information is right you should also tell Bob whether he can get a unique drawing.</div></p>\n<p><div class=\"panel_bottom\"></div><br><a id=\"more\"></a><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Input</div></p>\n<p><div class=\"panel_content\">The input contains mutiple testcases.For each testcase, the first line contains three integers N(1 ≤ N ≤ 400) , M(1 ≤ M ≤ 400) and K(1 ≤ K ≤ 40).<br>N integers are given in the second line representing the sum of N rows.<br>M integers are given in the third line representing the sum of M columns.The input is terminated by EOF.</div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Output</div></p>\n<p><div class=\"panel_content\">For each testcase, if there is no solution for Bob, output “Impossible” in one line(without the quotation mark); if there is only one solution for Bob, output “Unique” in one line(without the quotation mark) and output an N * M matrix in the following N lines representing Bob’s unique solution; if there are many ways for Bob to redraw the drawing, output “Not Unique” in one line(without the quotation mark).</div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Input</div></p>\n<p><div class=\"panel_content\"></div></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">2 2 4 4 2 4 2 4 2 2 2 2 5 0 5 4 1 4 3 9 1 2 3 3</div><br></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Output</div></p>\n<p><div class=\"panel_content\"></div></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">Not Unique Impossible Unique 1 2 3 3</div><br><br>&nbsp;</p>\n<hr>\n<p>第一步，考虑如何求是否有解。使用网络流求解，每一行和每一列分别对应一个点，加上源点和汇点一共有N+M+2个点。有三类边：</p>\n<ol>\n<li>源点 -&gt; 每一行对应的点，流量限制为该行的和</li>\n<li>每一行对应的点 -&gt; 每一列对应的点，流量限制为 K</li>\n<li>每一列对应的点 -&gt; 汇点，流量限制为该列的和<br>&nbsp;</li>\n</ol>\n<p>对上图做最大流，若源点出发的边和到达汇点的边全都满流，则有解，否则无解。若要求构造方案，则 (i,j) 对应的整数就是行 i–&gt; 列 j 的流量。</p>\n<p>第二步，考虑解是否唯一。显然，解唯一的充分必要条件是完成最大流后的残余网络没有长度大于 2 的环。所以，判断解的唯一性可使用dfs，注意遍历的时候不可以在走完一条边后马上走其反向边，加此限制检查是否有环即可判断解是否唯一。</p>\n<p>至此，全题已解决。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;iostream&amp;gt; </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;cstring&amp;gt; </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;cstdio&amp;gt; </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;queue&amp;gt; </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;cstdlib&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">500</span>,maxm=maxn*maxn;</div><div class=\"line\"><span class=\"keyword\">int</span> next[maxm*<span class=\"number\">2</span>],num[maxm*<span class=\"number\">2</span>],r[maxm*<span class=\"number\">2</span>],a[maxn*<span class=\"number\">2</span>],row_sum[maxn],col_sum[maxn],n,m,K,tt,T,d[maxn*<span class=\"number\">2</span>],st[maxn*<span class=\"number\">2</span>],cod[maxn][maxn];</div><div class=\"line\"><span class=\"keyword\">int</span> h[maxn*<span class=\"number\">2</span>],vh[maxn*<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">bool</span> don[maxm*<span class=\"number\">2</span>],in[maxn*<span class=\"number\">2</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> rr)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tnext[++tt]=a[x];num[tt]=y;r[tt]=rr;a[x]=tt;</div><div class=\"line\">\tnext[++tt]=a[y];num[tt]=x;r[tt]=<span class=\"number\">0</span>;a[y]=tt;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">construct</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\ttt=<span class=\"number\">1</span>;T=n+m+<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&amp;lt;=T;i++) a[i]=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&amp;lt;=n;i++) insert(<span class=\"number\">0</span>,i,row_sum[i]);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&amp;lt;=m;i++) insert(i+n,T,col_sum[i]);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&amp;lt;=n;i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&amp;lt;=m;j++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tinsert(i,j+n,K);</div><div class=\"line\">\t\t\tcod[i][j]=tt;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (x==T) <span class=\"keyword\">return</span> y;</div><div class=\"line\">\t<span class=\"keyword\">int</span> sig=st[x],minh=T+<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">do</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (r[st[x]])</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (h[num[st[x]]]+<span class=\"number\">1</span>==h[x])</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> k=dfs(num[st[x]],min(y,r[st[x]]));</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (k)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tr[st[x]]-=k;</div><div class=\"line\">\t\t\t\t\tr[st[x]^<span class=\"number\">1</span>]+=k;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> k;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tminh=min(minh,h[num[st[x]]]+<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (h[<span class=\"number\">0</span>]&amp;gt;T) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tst[x]=next[st[x]];</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (st[x]==<span class=\"number\">0</span>) st[x]=a[x];</div><div class=\"line\">\t&#125;<span class=\"keyword\">while</span> (sig!=st[x]);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (vh[h[x]]--==<span class=\"number\">0</span>) h[<span class=\"number\">0</span>]=T+<span class=\"number\">1</span>;</div><div class=\"line\">\tvh[h[x]=minh]++;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max_flow</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&amp;lt;=T;i++) h[i]=vh[i]=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&amp;lt;=T;i++) st[i]=a[i];</div><div class=\"line\">\tvh[<span class=\"number\">0</span>]=T+<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> ret=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (h[<span class=\"number\">0</span>]&amp;lt;=T) ret+=dfs(<span class=\"number\">0</span>,K+<span class=\"number\">1</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*bool find_circle()</span></div><div class=\"line\">&#123;</div><div class=\"line\">\tdeque  q;</div><div class=\"line\">\tfor (int i=0;i&amp;lt;=T;i++) d[i]=0;</div><div class=\"line\">\tfor (int i=0;i&amp;lt;=T;i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tfor (int p=a[i];p;p=next[p])</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tif (r[p]) d[i]++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tif (d[i]==0) q.push_back(i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tint cnt=T+1;</div><div class=\"line\">\twhile (!q.empty())</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tint x=q.front();</div><div class=\"line\">\t\tcnt--;</div><div class=\"line\">\t\tq.pop_front();</div><div class=\"line\">\t\tfor (int p=a[x];p;p=next[p])</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tif (r[p^1]) </div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\td[num[p]]--;</div><div class=\"line\">\t\t\t\tif (d[num[p]]==0) q.push_back(num[p]);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn cnt;</div><div class=\"line\">&#125;*/</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">visit</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> ed)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (don[ed]) </div><div class=\"line\">\t\t<span class=\"keyword\">return</span> in[x];</div><div class=\"line\">\tdon[ed]=<span class=\"literal\">true</span>;</div><div class=\"line\">\tin[x]=<span class=\"literal\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> p=a[x];p;p=next[p])</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (r[p] &amp;amp;&amp;amp; (ed^p)!=<span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (visit(num[p],p)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tin[x]=<span class=\"literal\">false</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">find_circle</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&amp;lt;=T;i++) in[i]=<span class=\"literal\">false</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&amp;lt;=tt;i++) don[i]=<span class=\"literal\">false</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> col=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&amp;lt;=tt;i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (r[i] &amp;amp;&amp;amp; !don[i])</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tin[num[i^<span class=\"number\">1</span>]]=<span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (visit(num[i],i)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; </div><div class=\"line\">\t\t\tin[num[i^<span class=\"number\">1</span>]]=<span class=\"literal\">false</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_scheme</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Unique\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&amp;lt;=n;i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,r[cod[i][<span class=\"number\">1</span>]]);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">2</span>;j&amp;lt;=m;j++) <span class=\"built_in\">printf</span>(<span class=\"string\">\" %d\"</span>,r[cod[i][j]]);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;amp;n,&amp;amp;m,&amp;amp;K)!=EOF)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmp=<span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&amp;lt;=n;i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;amp;row_sum[i]);</div><div class=\"line\">\t\t\ttmp+=row_sum[i];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> sum=tmp;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&amp;lt;=m;i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;amp;col_sum[i]);</div><div class=\"line\">\t\t\ttmp-=col_sum[i];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (tmp) </div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Impossible\\n\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tconstruct();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (max_flow()&amp;lt;sum)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Impossible\\n\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (find_circle())</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Not Unique\\n\"</span>);</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> print_scheme();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p><div class=\"panel_title\" align=\"left\">Problem Description</div></p>\n<p><div class=\"panel_content\">Alice and Bob are playing together. Alice is crazy about art and she has visited many museums around the world. She has a good memory and she can remember all drawings she has seen.Today Alice designs a game using these drawings in her memory. First, she matches K+1 colors appears in the picture to K+1 different integers(from 0 to K). After that, she slices the drawing into grids and there are N rows and M columns. Each grid has an integer on it(from 0 to K) representing the color on the corresponding position in the original drawing. Alice wants to share the wonderful drawings with Bob and she tells Bob the size of the drawing, the number of different colors, and the sum of integers on each row and each column. Bob has to redraw the drawing with Alice’s information. Unfortunately, somtimes, the information Alice offers is wrong because of Alice’s poor math. And sometimes, Bob can work out multiple different drawings using the information Alice provides. Bob gets confused and he needs your help. You have to tell Bob if Alice’s information is right and if her information is right you should also tell Bob whether he can get a unique drawing.</div></p>\n<p><div class=\"panel_bottom\"></div><br>","more":"<br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Input</div></p>\n<p><div class=\"panel_content\">The input contains mutiple testcases.For each testcase, the first line contains three integers N(1 ≤ N ≤ 400) , M(1 ≤ M ≤ 400) and K(1 ≤ K ≤ 40).<br>N integers are given in the second line representing the sum of N rows.<br>M integers are given in the third line representing the sum of M columns.The input is terminated by EOF.</div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Output</div></p>\n<p><div class=\"panel_content\">For each testcase, if there is no solution for Bob, output “Impossible” in one line(without the quotation mark); if there is only one solution for Bob, output “Unique” in one line(without the quotation mark) and output an N * M matrix in the following N lines representing Bob’s unique solution; if there are many ways for Bob to redraw the drawing, output “Not Unique” in one line(without the quotation mark).</div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Input</div></p>\n<p><div class=\"panel_content\"></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">2 2 4 4 2 4 2 4 2 2 2 2 5 0 5 4 1 4 3 9 1 2 3 3</div><br></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Output</div></p>\n<p><div class=\"panel_content\"></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">Not Unique Impossible Unique 1 2 3 3</div><br></div><br>&nbsp;</p>\n<hr>\n<p>第一步，考虑如何求是否有解。使用网络流求解，每一行和每一列分别对应一个点，加上源点和汇点一共有N+M+2个点。有三类边：</p>\n<ol>\n<li>源点 -&gt; 每一行对应的点，流量限制为该行的和</li>\n<li>每一行对应的点 -&gt; 每一列对应的点，流量限制为 K</li>\n<li>每一列对应的点 -&gt; 汇点，流量限制为该列的和<br>&nbsp;</li>\n</ol>\n<p>对上图做最大流，若源点出发的边和到达汇点的边全都满流，则有解，否则无解。若要求构造方案，则 (i,j) 对应的整数就是行 i–&gt; 列 j 的流量。</p>\n<p>第二步，考虑解是否唯一。显然，解唯一的充分必要条件是完成最大流后的残余网络没有长度大于 2 的环。所以，判断解的唯一性可使用dfs，注意遍历的时候不可以在走完一条边后马上走其反向边，加此限制检查是否有环即可判断解是否唯一。</p>\n<p>至此，全题已解决。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;iostream&amp;gt; </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;cstring&amp;gt; </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;cstdio&amp;gt; </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;queue&amp;gt; </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;cstdlib&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">500</span>,maxm=maxn*maxn;</div><div class=\"line\"><span class=\"keyword\">int</span> next[maxm*<span class=\"number\">2</span>],num[maxm*<span class=\"number\">2</span>],r[maxm*<span class=\"number\">2</span>],a[maxn*<span class=\"number\">2</span>],row_sum[maxn],col_sum[maxn],n,m,K,tt,T,d[maxn*<span class=\"number\">2</span>],st[maxn*<span class=\"number\">2</span>],cod[maxn][maxn];</div><div class=\"line\"><span class=\"keyword\">int</span> h[maxn*<span class=\"number\">2</span>],vh[maxn*<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">bool</span> don[maxm*<span class=\"number\">2</span>],in[maxn*<span class=\"number\">2</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> rr)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\tnext[++tt]=a[x];num[tt]=y;r[tt]=rr;a[x]=tt;</div><div class=\"line\">\tnext[++tt]=a[y];num[tt]=x;r[tt]=<span class=\"number\">0</span>;a[y]=tt;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">construct</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\ttt=<span class=\"number\">1</span>;T=n+m+<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&amp;lt;=T;i++) a[i]=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&amp;lt;=n;i++) insert(<span class=\"number\">0</span>,i,row_sum[i]);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&amp;lt;=m;i++) insert(i+n,T,col_sum[i]);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&amp;lt;=n;i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&amp;lt;=m;j++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tinsert(i,j+n,K);</div><div class=\"line\">\t\t\tcod[i][j]=tt;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (x==T) <span class=\"keyword\">return</span> y;</div><div class=\"line\">\t<span class=\"keyword\">int</span> sig=st[x],minh=T+<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">do</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (r[st[x]])</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (h[num[st[x]]]+<span class=\"number\">1</span>==h[x])</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> k=dfs(num[st[x]],min(y,r[st[x]]));</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (k)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tr[st[x]]-=k;</div><div class=\"line\">\t\t\t\t\tr[st[x]^<span class=\"number\">1</span>]+=k;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> k;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tminh=min(minh,h[num[st[x]]]+<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (h[<span class=\"number\">0</span>]&amp;gt;T) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tst[x]=next[st[x]];</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (st[x]==<span class=\"number\">0</span>) st[x]=a[x];</div><div class=\"line\">\t&#125;<span class=\"keyword\">while</span> (sig!=st[x]);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (vh[h[x]]--==<span class=\"number\">0</span>) h[<span class=\"number\">0</span>]=T+<span class=\"number\">1</span>;</div><div class=\"line\">\tvh[h[x]=minh]++;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max_flow</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&amp;lt;=T;i++) h[i]=vh[i]=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&amp;lt;=T;i++) st[i]=a[i];</div><div class=\"line\">\tvh[<span class=\"number\">0</span>]=T+<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> ret=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (h[<span class=\"number\">0</span>]&amp;lt;=T) ret+=dfs(<span class=\"number\">0</span>,K+<span class=\"number\">1</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*bool find_circle()</div><div class=\"line\">&#123;</div><div class=\"line\">\tdeque  q;</div><div class=\"line\">\tfor (int i=0;i&amp;lt;=T;i++) d[i]=0;</div><div class=\"line\">\tfor (int i=0;i&amp;lt;=T;i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tfor (int p=a[i];p;p=next[p])</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tif (r[p]) d[i]++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tif (d[i]==0) q.push_back(i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tint cnt=T+1;</div><div class=\"line\">\twhile (!q.empty())</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tint x=q.front();</div><div class=\"line\">\t\tcnt--;</div><div class=\"line\">\t\tq.pop_front();</div><div class=\"line\">\t\tfor (int p=a[x];p;p=next[p])</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tif (r[p^1]) </div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\td[num[p]]--;</div><div class=\"line\">\t\t\t\tif (d[num[p]]==0) q.push_back(num[p]);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn cnt;</div><div class=\"line\">&#125;*/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">visit</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> ed)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (don[ed]) </div><div class=\"line\">\t\t<span class=\"keyword\">return</span> in[x];</div><div class=\"line\">\tdon[ed]=<span class=\"literal\">true</span>;</div><div class=\"line\">\tin[x]=<span class=\"literal\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> p=a[x];p;p=next[p])</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (r[p] &amp;amp;&amp;amp; (ed^p)!=<span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (visit(num[p],p)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tin[x]=<span class=\"literal\">false</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">find_circle</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&amp;lt;=T;i++) in[i]=<span class=\"literal\">false</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&amp;lt;=tt;i++) don[i]=<span class=\"literal\">false</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> col=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&amp;lt;=tt;i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (r[i] &amp;amp;&amp;amp; !don[i])</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tin[num[i^<span class=\"number\">1</span>]]=<span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (visit(num[i],i)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; </div><div class=\"line\">\t\t\tin[num[i^<span class=\"number\">1</span>]]=<span class=\"literal\">false</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_scheme</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Unique\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&amp;lt;=n;i++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,r[cod[i][<span class=\"number\">1</span>]]);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">2</span>;j&amp;lt;=m;j++) <span class=\"built_in\">printf</span>(<span class=\"string\">\" %d\"</span>,r[cod[i][j]]);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;amp;n,&amp;amp;m,&amp;amp;K)!=EOF)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmp=<span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&amp;lt;=n;i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;amp;row_sum[i]);</div><div class=\"line\">\t\t\ttmp+=row_sum[i];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> sum=tmp;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&amp;lt;=m;i++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;amp;col_sum[i]);</div><div class=\"line\">\t\t\ttmp-=col_sum[i];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (tmp) </div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Impossible\\n\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tconstruct();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (max_flow()&amp;lt;sum)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Impossible\\n\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (find_circle())</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Not Unique\\n\"</span>);</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> print_scheme();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"我的HerbstluftWM","date":"2014-08-14T12:04:50.000Z","_content":"\n一直以来想折腾一下WM，但是又感觉麻烦。前天把笔记本带到机房就借此机会在虚拟机中玩了一下。发现事实上比我想像的要简单的多。少量配置了一下两个配置文件就能用了。然后使用compton做透明特效。看起来也挺简洁美观的。\n\nWM最大的特点就是轻便，herbstluftWM也不例外。安装只有几百兆，附加依赖少，几乎一个命令的事情。启动、响应速度都是普通DE无法比拟的快。加上compton的透明效果，稍加修饰整个系统的界面就非常美观了。\n\n两个配置文件与更详细的说明我已经push到了github：[click here](https://github.com/stkevintan/herbstluftwm)\n","source":"_posts/herbustluftwm-config.md","raw":"title: 我的HerbstluftWM\ncategories:\n  - WM\ndate: 2014-08-14 20:04:50\ntags: [linux,桌面,美化]\n---\n\n一直以来想折腾一下WM，但是又感觉麻烦。前天把笔记本带到机房就借此机会在虚拟机中玩了一下。发现事实上比我想像的要简单的多。少量配置了一下两个配置文件就能用了。然后使用compton做透明特效。看起来也挺简洁美观的。\n\nWM最大的特点就是轻便，herbstluftWM也不例外。安装只有几百兆，附加依赖少，几乎一个命令的事情。启动、响应速度都是普通DE无法比拟的快。加上compton的透明效果，稍加修饰整个系统的界面就非常美观了。\n\n两个配置文件与更详细的说明我已经push到了github：[click here](https://github.com/stkevintan/herbstluftwm)\n","slug":"herbustluftwm-config","published":1,"updated":"2015-02-26T02:49:16.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8nl0015wppvpk8tyrnp","content":"<p>一直以来想折腾一下WM，但是又感觉麻烦。前天把笔记本带到机房就借此机会在虚拟机中玩了一下。发现事实上比我想像的要简单的多。少量配置了一下两个配置文件就能用了。然后使用compton做透明特效。看起来也挺简洁美观的。</p>\n<p>WM最大的特点就是轻便，herbstluftWM也不例外。安装只有几百兆，附加依赖少，几乎一个命令的事情。启动、响应速度都是普通DE无法比拟的快。加上compton的透明效果，稍加修饰整个系统的界面就非常美观了。</p>\n<p>两个配置文件与更详细的说明我已经push到了github：<a href=\"https://github.com/stkevintan/herbstluftwm\" target=\"_blank\" rel=\"external\">click here</a></p>\n","excerpt":"","more":"<p>一直以来想折腾一下WM，但是又感觉麻烦。前天把笔记本带到机房就借此机会在虚拟机中玩了一下。发现事实上比我想像的要简单的多。少量配置了一下两个配置文件就能用了。然后使用compton做透明特效。看起来也挺简洁美观的。</p>\n<p>WM最大的特点就是轻便，herbstluftWM也不例外。安装只有几百兆，附加依赖少，几乎一个命令的事情。启动、响应速度都是普通DE无法比拟的快。加上compton的透明效果，稍加修饰整个系统的界面就非常美观了。</p>\n<p>两个配置文件与更详细的说明我已经push到了github：<a href=\"https://github.com/stkevintan/herbstluftwm\">click here</a></p>\n"},{"title":"HDU 4965 Fast Matrix Calculation","id":"99","date":"2014-08-19T12:37:28.000Z","_content":"**<span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 131072/131072 K (Java/Others)\nTotal Submission(s): 206    Accepted Submission(s): 116\n</span>**\n<div class=\"panel_title\" align=\"left\">Problem Description</div>\n<div class=\"panel_content\">\n\nOne day, Alice and Bob felt bored again, Bob knows Alice is a girl who loves math and is just learning something about matrix, so he decided to make a crazy problem for her.\n\nBob has a six-faced dice which has numbers 0, 1, 2, 3, 4 and 5 on each face. At first, he will choose a number N (4 &lt;= N &lt;= 1000), and for N times, he keeps throwing his dice for K times (2 &lt;=K &lt;= 6) and writes down its number on the top face to make an N*K matrix A, in which each element is not less than 0 and not greater than 5\\. Then he does similar thing again with a bit difference: he keeps throwing his dice for N times and each time repeat it for K times to write down a K*N matrix B, in which each element is not less than 0 and not greater than 5\\. With the two matrix A and B formed, Alice’s task is to perform the following 4-step calculation.\n<!--more-->\nStep 1: Calculate a new N*N matrix C = A*B.\nStep 2: Calculate M = C^(N*N).\nStep 3: For each element x in M, calculate x % 6\\. All the remainders form a new matrix M’.\nStep 4: Calculate the sum of all the elements in M’.\n\nBob just made this problem for kidding but he sees Alice taking it serious, so he also wonders what the answer is. And then Bob turn to you for help because he is not good at math.\n\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Input</div>\n<div class=\"panel_content\">\n\nThe input contains several test cases. Each test case starts with two integer N and K, indicating the numbers N and K described above. Then N lines follow, and each line has K integers between 0 and 5, representing matrix A. Then K lines follow, and each line has N integers between 0 and 5, representing matrix B.\n\nThe end of input is indicated by N = K = 0.\n\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Output</div>\n<div class=\"panel_content\">For each case, output the sum of all the elements in M’ in a line.</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Input</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">4 2 5 5 4 4 5 4 0 0 4 2 5 5 1 3 1 5 6 3 1 2 3 0 3 0 2 3 4 4 3 2 2 5 5 0 5 0 3 4 5 1 1 0 5 3 2 3 3 2 3 1 5 4 5 2 0 0</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Output</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">14 56</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Source</div>\n<div class=\"panel_content\">[ 2014 Multi-University Training Contest 9 ](http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2014%20Multi-University%20Training%20Contest%209&amp;source=1&amp;searchmode=source)</div>\n<br/>\n\n- - -\n\n\n<div class=\"panel_content\">这题让我注意了矩阵模板的开销问题。1000X1000多次调用就会爆内存了。下面是用动态数组写的。效率非常慢，难以接受。</div>\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;cmath&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define PR pair&lt;int,int&gt;\n#define MP make_pair\n#define SI(x) set&lt;x&gt;::iterator\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set&lt;x&gt;::reverse_iterator\n#define VRI(x) vector&lt;x&gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define Sz(x) (int)x.size()\n#define clrQ(x) while(!x.empty)x.pop();\n#define clr(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n/*start*/\n#define MOD 6\nint n, k;\nstruct Matrix {\n    int n, m;\n    int** M;\n    Matrix(int n, int m) :n(n), m(m) {\n        M = new int*[n];\n        for (int i = 0; i &lt; n; i++)\n            M[i] = new int[m];\n    }\n\n    Matrix(int n, int m, int k) :\n            n(n), m(m) {\n        M = new int*[n];\n        for (int i = 0; i &lt; n; i++)\n            M[i] = new int[m];\n        Init(k);\n    }\n\n    ~Matrix() {\n        if (M) {\n            for (int i = 0; i &lt; n; i++) {\n                if (M[i]) {\n                    delete[] M[i];\n                    M[i] = NULL;\n                }\n            }\n            delete[] M;\n            M = NULL;\n        }\n    }\n\n    void Init(bool k) { //k=1 返回单位矩阵，k=0 返回零矩阵\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++)\n                M[i][j] = k * (i == j);\n    }\n\n    void out() {\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++)\n                printf(\"%d%c\", M[i][j], j == m - 1 ? '\\n' : ' ');\n    }\n\n    Matrix &amp; operator=(const Matrix&amp; othr) {\n        this-&gt;~Matrix();\n        n = othr.n;\n        m = othr.m;\n        M = new int*[n];\n        for (int i = 0; i &lt; n; i++)\n            M[i] = new int[m];\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                M[i][j] = othr.M[i][j];\n            }\n        }\n        return *this;\n    }\n\n    Matrix(const Matrix &amp; othr) {\n        n = othr.n;\n        m = othr.m;\n        M = new int*[n];\n        for (int i = 0; i &lt; n; i++)\n            M[i] = new int[m];\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                M[i][j] = othr.M[i][j];\n            }\n        }\n    }\n\n    bool operator==(const Matrix&amp; othr) const {\n        if (n - othr.n || m - othr.m) return false;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                if (M[i][j] != othr.M[i][j]) return false;\n            }\n        }\n        return true;\n    }\n    Matrix operator *(const Matrix&amp; othr) const {\n        if (m - othr.n) exit(1); //异常退出\n        Matrix ans(n, othr.m, 0);\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; othr.m; j++)\n                for (int k = 0; k &lt; m; k++) {\n                    ans.M[i][j] += M[i][k] * othr.M[k][j] % MOD;\n                    if (ans.M[i][j] &gt;= MOD) ans.M[i][j] -= MOD;\n                    if (ans.M[i][j] &lt; 0) ans.M[i][j] += MOD;\n                }\n        return ans;\n    }\n    Matrix operator *(const int&amp; x) const {\n        Matrix ans(n, m);\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++)\n                ans.M[i][j] = M[i][j] * x % MOD;\n        return ans;\n    }\n    Matrix operator +(const Matrix &amp; othr) const {\n        if (n - othr.n || m - othr.m) exit(1);\n        Matrix ans(n, m);\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++) {\n                ans.M[i][j] = M[i][j] + othr.M[i][j];\n                if (ans.M[i][j] &gt;= MOD) ans.M[i][j] -= MOD;\n                if (ans.M[i][j] &lt; 0) ans.M[i][j] += MOD;\n            }\n        return ans;\n    }\n\n    Matrix operator -(const Matrix&amp; othr) const {\n        if (n - othr.n || m - othr.m) exit(1);\n        Matrix ans(n, m);\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++) {\n                ans.M[i][j] = M[i][j] - othr.M[i][j];\n                if (ans.M[i][j] &gt;= MOD) ans.M[i][j] -= MOD;\n                if (ans.M[i][j] &lt; 0) ans.M[i][j] += MOD;\n            }\n        return ans;\n    }\n\n    Matrix operator ^(int x) const {\n        if (n - m) exit(1);\n        Matrix ans(n, m, 1), base = *this;\n        while (x &gt; 0) {\n            if (x &amp; 1) ans = ans * base;\n            base = base * base;\n            x &gt;&gt;= 1;\n        }\n        return ans;\n    }\n};\n\nint main(int argc, char **argv) {\n    while (~scanf(\"%d%d\", &amp;n, &amp;k)) {\n        if (n == 0 &amp;&amp; k == 0) break;\n        Matrix A(n, k, 0), B(k, n, 0);\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; k; j++) {\n                scanf(\"%d\", &amp;A.M[i][j]);\n            }\n        }\n        for (int i = 0; i &lt; k; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                scanf(\"%d\", &amp;B.M[i][j]);\n            }\n        }\n        Matrix mat = B * A;\n        int r = n * n - 1;\n        Matrix res = A * (mat ^ r) * B;\n        int ans = 0;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                ans += res.M[i][j];\n            }\n        }\n        printf(\"%d\\n\", ans);\n    }\n}\n```\n\n然后又试了试vector，虽然简单不少，但是仍然很慢：\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;cmath&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define PR pair&lt;int,int&gt;\n#define MP make_pair\n#define SI(x) set&lt;x&gt;::iterator\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set&lt;x&gt;::reverse_iterator\n#define VRI(x) vector&lt;x&gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define Sz(x) (int)x.size()\n#define clrQ(x) while(!x.empty)x.pop();\n#define clr(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n/*start*/\n#define MOD 6\nint n, k;\nstruct Matrix {\n    int n, m;\n    vector&lt;vector&lt;int&gt; &gt;M;\n    Matrix(int n, int m) :n(n), m(m) {\n        alloc();\n    }\n\n    Matrix(int n, int m, int k) :\n            n(n), m(m) {\n        alloc();\n        Init(k);\n    }\n    void alloc(){\n        M.resize(n);\n        for (int i = 0; i &lt; n; i++)\n            M[i].resize(m);\n    }\n\n    void Init(bool k) { //k=1 返回单位矩阵，k=0 返回零矩阵\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++)\n                M[i][j] = k * (i == j);\n    }\n\n    void out() {\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++)\n                printf(\"%d%c\", M[i][j], j == m - 1 ? '\\n' : ' ');\n    }\n\n    bool operator==(const Matrix&amp; othr) const {\n        if (n - othr.n || m - othr.m) return false;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                if (M[i][j] != othr.M[i][j]) return false;\n            }\n        }\n        return true;\n    }\n    Matrix operator *(const Matrix&amp; othr) const {\n        if (m - othr.n) exit(1); //异常退出\n        Matrix ans(n, othr.m, 0);\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; othr.m; j++)\n                for (int k = 0; k &lt; m; k++) {\n                    ans.M[i][j] += M[i][k] * othr.M[k][j] % MOD;\n                    if (ans.M[i][j] &gt;= MOD) ans.M[i][j] -= MOD;\n                    if (ans.M[i][j] &lt; 0) ans.M[i][j] += MOD;\n                }\n        return ans;\n    }\n    Matrix operator *(const int&amp; x) const {\n        Matrix ans(n, m);\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++)\n                ans.M[i][j] = M[i][j] * x % MOD;\n        return ans;\n    }\n    Matrix operator +(const Matrix &amp; othr) const {\n        if (n - othr.n || m - othr.m) exit(1);\n        Matrix ans(n, m);\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++) {\n                ans.M[i][j] = M[i][j] + othr.M[i][j];\n                if (ans.M[i][j] &gt;= MOD) ans.M[i][j] -= MOD;\n                if (ans.M[i][j] &lt; 0) ans.M[i][j] += MOD;\n            }\n        return ans;\n    }\n\n    Matrix operator -(const Matrix&amp; othr) const {\n        if (n - othr.n || m - othr.m) exit(1);\n        Matrix ans(n, m);\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++) {\n                ans.M[i][j] = M[i][j] - othr.M[i][j];\n                if (ans.M[i][j] &gt;= MOD) ans.M[i][j] -= MOD;\n                if (ans.M[i][j] &lt; 0) ans.M[i][j] += MOD;\n            }\n        return ans;\n    }\n\n    Matrix operator ^(int x) const {\n        if (n - m) exit(1);\n        Matrix ans(n, m, 1), base = *this;\n        while (x &gt; 0) {\n            if (x &amp; 1) ans = ans * base;\n            base = base * base;\n            x &gt;&gt;= 1;\n        }\n        return ans;\n    }\n};\n\nint main(int argc, char **argv) {\n    while (~scanf(\"%d%d\", &amp;n, &amp;k)) {\n        if (n == 0 &amp;&amp; k == 0) break;\n        Matrix A(n, k, 0), B(k, n, 0);\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; k; j++) {\n                scanf(\"%d\", &amp;A.M[i][j]);\n            }\n        }\n        for (int i = 0; i &lt; k; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                scanf(\"%d\", &amp;B.M[i][j]);\n            }\n        }\n        Matrix mat = B * A;\n        int r = n * n - 1;\n        Matrix res = A * (mat ^ r) * B;\n        int ans = 0;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                ans += res.M[i][j];\n            }\n        }\n        printf(\"%d\\n\", ans);\n    }\n}\n```\n感觉其他方法还比较麻烦。算了就这样吧~\n\n&nbsp;","source":"_posts/hdu-4965-fast-matrix-calculation.md","raw":"title: HDU 4965 Fast Matrix Calculation\ntags:\n  - [矩阵,暴力]\ncategories:\n  - ACM\nid: 99\ndate: 2014-08-19 20:37:28\n---\n**<span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 131072/131072 K (Java/Others)\nTotal Submission(s): 206    Accepted Submission(s): 116\n</span>**\n<div class=\"panel_title\" align=\"left\">Problem Description</div>\n<div class=\"panel_content\">\n\nOne day, Alice and Bob felt bored again, Bob knows Alice is a girl who loves math and is just learning something about matrix, so he decided to make a crazy problem for her.\n\nBob has a six-faced dice which has numbers 0, 1, 2, 3, 4 and 5 on each face. At first, he will choose a number N (4 &lt;= N &lt;= 1000), and for N times, he keeps throwing his dice for K times (2 &lt;=K &lt;= 6) and writes down its number on the top face to make an N*K matrix A, in which each element is not less than 0 and not greater than 5\\. Then he does similar thing again with a bit difference: he keeps throwing his dice for N times and each time repeat it for K times to write down a K*N matrix B, in which each element is not less than 0 and not greater than 5\\. With the two matrix A and B formed, Alice’s task is to perform the following 4-step calculation.\n<!--more-->\nStep 1: Calculate a new N*N matrix C = A*B.\nStep 2: Calculate M = C^(N*N).\nStep 3: For each element x in M, calculate x % 6\\. All the remainders form a new matrix M’.\nStep 4: Calculate the sum of all the elements in M’.\n\nBob just made this problem for kidding but he sees Alice taking it serious, so he also wonders what the answer is. And then Bob turn to you for help because he is not good at math.\n\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Input</div>\n<div class=\"panel_content\">\n\nThe input contains several test cases. Each test case starts with two integer N and K, indicating the numbers N and K described above. Then N lines follow, and each line has K integers between 0 and 5, representing matrix A. Then K lines follow, and each line has N integers between 0 and 5, representing matrix B.\n\nThe end of input is indicated by N = K = 0.\n\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Output</div>\n<div class=\"panel_content\">For each case, output the sum of all the elements in M’ in a line.</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Input</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">4 2 5 5 4 4 5 4 0 0 4 2 5 5 1 3 1 5 6 3 1 2 3 0 3 0 2 3 4 4 3 2 2 5 5 0 5 0 3 4 5 1 1 0 5 3 2 3 3 2 3 1 5 4 5 2 0 0</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Output</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">14 56</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Source</div>\n<div class=\"panel_content\">[ 2014 Multi-University Training Contest 9 ](http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2014%20Multi-University%20Training%20Contest%209&amp;source=1&amp;searchmode=source)</div>\n<br/>\n\n- - -\n\n\n<div class=\"panel_content\">这题让我注意了矩阵模板的开销问题。1000X1000多次调用就会爆内存了。下面是用动态数组写的。效率非常慢，难以接受。</div>\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;cmath&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define PR pair&lt;int,int&gt;\n#define MP make_pair\n#define SI(x) set&lt;x&gt;::iterator\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set&lt;x&gt;::reverse_iterator\n#define VRI(x) vector&lt;x&gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define Sz(x) (int)x.size()\n#define clrQ(x) while(!x.empty)x.pop();\n#define clr(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n/*start*/\n#define MOD 6\nint n, k;\nstruct Matrix {\n    int n, m;\n    int** M;\n    Matrix(int n, int m) :n(n), m(m) {\n        M = new int*[n];\n        for (int i = 0; i &lt; n; i++)\n            M[i] = new int[m];\n    }\n\n    Matrix(int n, int m, int k) :\n            n(n), m(m) {\n        M = new int*[n];\n        for (int i = 0; i &lt; n; i++)\n            M[i] = new int[m];\n        Init(k);\n    }\n\n    ~Matrix() {\n        if (M) {\n            for (int i = 0; i &lt; n; i++) {\n                if (M[i]) {\n                    delete[] M[i];\n                    M[i] = NULL;\n                }\n            }\n            delete[] M;\n            M = NULL;\n        }\n    }\n\n    void Init(bool k) { //k=1 返回单位矩阵，k=0 返回零矩阵\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++)\n                M[i][j] = k * (i == j);\n    }\n\n    void out() {\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++)\n                printf(\"%d%c\", M[i][j], j == m - 1 ? '\\n' : ' ');\n    }\n\n    Matrix &amp; operator=(const Matrix&amp; othr) {\n        this-&gt;~Matrix();\n        n = othr.n;\n        m = othr.m;\n        M = new int*[n];\n        for (int i = 0; i &lt; n; i++)\n            M[i] = new int[m];\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                M[i][j] = othr.M[i][j];\n            }\n        }\n        return *this;\n    }\n\n    Matrix(const Matrix &amp; othr) {\n        n = othr.n;\n        m = othr.m;\n        M = new int*[n];\n        for (int i = 0; i &lt; n; i++)\n            M[i] = new int[m];\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                M[i][j] = othr.M[i][j];\n            }\n        }\n    }\n\n    bool operator==(const Matrix&amp; othr) const {\n        if (n - othr.n || m - othr.m) return false;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                if (M[i][j] != othr.M[i][j]) return false;\n            }\n        }\n        return true;\n    }\n    Matrix operator *(const Matrix&amp; othr) const {\n        if (m - othr.n) exit(1); //异常退出\n        Matrix ans(n, othr.m, 0);\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; othr.m; j++)\n                for (int k = 0; k &lt; m; k++) {\n                    ans.M[i][j] += M[i][k] * othr.M[k][j] % MOD;\n                    if (ans.M[i][j] &gt;= MOD) ans.M[i][j] -= MOD;\n                    if (ans.M[i][j] &lt; 0) ans.M[i][j] += MOD;\n                }\n        return ans;\n    }\n    Matrix operator *(const int&amp; x) const {\n        Matrix ans(n, m);\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++)\n                ans.M[i][j] = M[i][j] * x % MOD;\n        return ans;\n    }\n    Matrix operator +(const Matrix &amp; othr) const {\n        if (n - othr.n || m - othr.m) exit(1);\n        Matrix ans(n, m);\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++) {\n                ans.M[i][j] = M[i][j] + othr.M[i][j];\n                if (ans.M[i][j] &gt;= MOD) ans.M[i][j] -= MOD;\n                if (ans.M[i][j] &lt; 0) ans.M[i][j] += MOD;\n            }\n        return ans;\n    }\n\n    Matrix operator -(const Matrix&amp; othr) const {\n        if (n - othr.n || m - othr.m) exit(1);\n        Matrix ans(n, m);\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++) {\n                ans.M[i][j] = M[i][j] - othr.M[i][j];\n                if (ans.M[i][j] &gt;= MOD) ans.M[i][j] -= MOD;\n                if (ans.M[i][j] &lt; 0) ans.M[i][j] += MOD;\n            }\n        return ans;\n    }\n\n    Matrix operator ^(int x) const {\n        if (n - m) exit(1);\n        Matrix ans(n, m, 1), base = *this;\n        while (x &gt; 0) {\n            if (x &amp; 1) ans = ans * base;\n            base = base * base;\n            x &gt;&gt;= 1;\n        }\n        return ans;\n    }\n};\n\nint main(int argc, char **argv) {\n    while (~scanf(\"%d%d\", &amp;n, &amp;k)) {\n        if (n == 0 &amp;&amp; k == 0) break;\n        Matrix A(n, k, 0), B(k, n, 0);\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; k; j++) {\n                scanf(\"%d\", &amp;A.M[i][j]);\n            }\n        }\n        for (int i = 0; i &lt; k; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                scanf(\"%d\", &amp;B.M[i][j]);\n            }\n        }\n        Matrix mat = B * A;\n        int r = n * n - 1;\n        Matrix res = A * (mat ^ r) * B;\n        int ans = 0;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                ans += res.M[i][j];\n            }\n        }\n        printf(\"%d\\n\", ans);\n    }\n}\n```\n\n然后又试了试vector，虽然简单不少，但是仍然很慢：\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;cmath&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define PR pair&lt;int,int&gt;\n#define MP make_pair\n#define SI(x) set&lt;x&gt;::iterator\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set&lt;x&gt;::reverse_iterator\n#define VRI(x) vector&lt;x&gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define Sz(x) (int)x.size()\n#define clrQ(x) while(!x.empty)x.pop();\n#define clr(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n/*start*/\n#define MOD 6\nint n, k;\nstruct Matrix {\n    int n, m;\n    vector&lt;vector&lt;int&gt; &gt;M;\n    Matrix(int n, int m) :n(n), m(m) {\n        alloc();\n    }\n\n    Matrix(int n, int m, int k) :\n            n(n), m(m) {\n        alloc();\n        Init(k);\n    }\n    void alloc(){\n        M.resize(n);\n        for (int i = 0; i &lt; n; i++)\n            M[i].resize(m);\n    }\n\n    void Init(bool k) { //k=1 返回单位矩阵，k=0 返回零矩阵\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++)\n                M[i][j] = k * (i == j);\n    }\n\n    void out() {\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++)\n                printf(\"%d%c\", M[i][j], j == m - 1 ? '\\n' : ' ');\n    }\n\n    bool operator==(const Matrix&amp; othr) const {\n        if (n - othr.n || m - othr.m) return false;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                if (M[i][j] != othr.M[i][j]) return false;\n            }\n        }\n        return true;\n    }\n    Matrix operator *(const Matrix&amp; othr) const {\n        if (m - othr.n) exit(1); //异常退出\n        Matrix ans(n, othr.m, 0);\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; othr.m; j++)\n                for (int k = 0; k &lt; m; k++) {\n                    ans.M[i][j] += M[i][k] * othr.M[k][j] % MOD;\n                    if (ans.M[i][j] &gt;= MOD) ans.M[i][j] -= MOD;\n                    if (ans.M[i][j] &lt; 0) ans.M[i][j] += MOD;\n                }\n        return ans;\n    }\n    Matrix operator *(const int&amp; x) const {\n        Matrix ans(n, m);\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++)\n                ans.M[i][j] = M[i][j] * x % MOD;\n        return ans;\n    }\n    Matrix operator +(const Matrix &amp; othr) const {\n        if (n - othr.n || m - othr.m) exit(1);\n        Matrix ans(n, m);\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++) {\n                ans.M[i][j] = M[i][j] + othr.M[i][j];\n                if (ans.M[i][j] &gt;= MOD) ans.M[i][j] -= MOD;\n                if (ans.M[i][j] &lt; 0) ans.M[i][j] += MOD;\n            }\n        return ans;\n    }\n\n    Matrix operator -(const Matrix&amp; othr) const {\n        if (n - othr.n || m - othr.m) exit(1);\n        Matrix ans(n, m);\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++) {\n                ans.M[i][j] = M[i][j] - othr.M[i][j];\n                if (ans.M[i][j] &gt;= MOD) ans.M[i][j] -= MOD;\n                if (ans.M[i][j] &lt; 0) ans.M[i][j] += MOD;\n            }\n        return ans;\n    }\n\n    Matrix operator ^(int x) const {\n        if (n - m) exit(1);\n        Matrix ans(n, m, 1), base = *this;\n        while (x &gt; 0) {\n            if (x &amp; 1) ans = ans * base;\n            base = base * base;\n            x &gt;&gt;= 1;\n        }\n        return ans;\n    }\n};\n\nint main(int argc, char **argv) {\n    while (~scanf(\"%d%d\", &amp;n, &amp;k)) {\n        if (n == 0 &amp;&amp; k == 0) break;\n        Matrix A(n, k, 0), B(k, n, 0);\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; k; j++) {\n                scanf(\"%d\", &amp;A.M[i][j]);\n            }\n        }\n        for (int i = 0; i &lt; k; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                scanf(\"%d\", &amp;B.M[i][j]);\n            }\n        }\n        Matrix mat = B * A;\n        int r = n * n - 1;\n        Matrix res = A * (mat ^ r) * B;\n        int ans = 0;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                ans += res.M[i][j];\n            }\n        }\n        printf(\"%d\\n\", ans);\n    }\n}\n```\n感觉其他方法还比较麻烦。算了就这样吧~\n\n&nbsp;","slug":"hdu-4965-fast-matrix-calculation","published":1,"updated":"2015-02-26T02:48:03.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8nn0017wppvg4ruybxj","content":"<p><strong><span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 131072/131072 K (Java/Others)<br>Total Submission(s): 206    Accepted Submission(s): 116<br></span></strong></p>\n<p><div class=\"panel_title\" align=\"left\">Problem Description</div></p>\n<div class=\"panel_content\">\n\n<p>One day, Alice and Bob felt bored again, Bob knows Alice is a girl who loves math and is just learning something about matrix, so he decided to make a crazy problem for her.</p>\n<p>Bob has a six-faced dice which has numbers 0, 1, 2, 3, 4 and 5 on each face. At first, he will choose a number N (4 &lt;= N &lt;= 1000), and for N times, he keeps throwing his dice for K times (2 &lt;=K &lt;= 6) and writes down its number on the top face to make an N<em>K matrix A, in which each element is not less than 0 and not greater than 5. Then he does similar thing again with a bit difference: he keeps throwing his dice for N times and each time repeat it for K times to write down a K</em>N matrix B, in which each element is not less than 0 and not greater than 5. With the two matrix A and B formed, Alice’s task is to perform the following 4-step calculation.<br><a id=\"more\"></a><br>Step 1: Calculate a new N<em>N matrix C = A</em>B.<br>Step 2: Calculate M = C^(N*N).<br>Step 3: For each element x in M, calculate x % 6. All the remainders form a new matrix M’.<br>Step 4: Calculate the sum of all the elements in M’.</p>\n<p>Bob just made this problem for kidding but he sees Alice taking it serious, so he also wonders what the answer is. And then Bob turn to you for help because he is not good at math.</p>\n<p></p></div><p></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Input</div></p>\n<div class=\"panel_content\">\n\n<p>The input contains several test cases. Each test case starts with two integer N and K, indicating the numbers N and K described above. Then N lines follow, and each line has K integers between 0 and 5, representing matrix A. Then K lines follow, and each line has N integers between 0 and 5, representing matrix B.</p>\n<p>The end of input is indicated by N = K = 0.</p>\n<p></p></div><p></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Output</div></p>\n<p><div class=\"panel_content\">For each case, output the sum of all the elements in M’ in a line.</div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Input</div></p>\n<p><div class=\"panel_content\"></div></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">4 2 5 5 4 4 5 4 0 0 4 2 5 5 1 3 1 5 6 3 1 2 3 0 3 0 2 3 4 4 3 2 2 5 5 0 5 0 3 4 5 1 1 0 5 3 2 3 3 2 3 1 5 4 5 2 0 0</div><br></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Output</div></p>\n<p><div class=\"panel_content\"></div></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">14 56</div><br></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Source</div></p>\n<p><div class=\"panel_content\"><a href=\"http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2014%20Multi-University%20Training%20Contest%209&amp;source=1&amp;searchmode=source\" target=\"_blank\" rel=\"external\"> 2014 Multi-University Training Contest 9 </a></div><br><br></p>\n<hr>\n<p><div class=\"panel_content\">这题让我注意了矩阵模板的开销问题。1000X1000多次调用就会爆内存了。下面是用动态数组写的。效率非常慢，难以接受。</div><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&amp;lt;map&amp;gt;</div><div class=\"line\">#include&amp;lt;set&amp;gt;</div><div class=\"line\">#include&amp;lt;cmath&amp;gt;</div><div class=\"line\">#include&amp;lt;stack&amp;gt;</div><div class=\"line\">#include&amp;lt;queue&amp;gt;</div><div class=\"line\">#include&amp;lt;string&amp;gt;</div><div class=\"line\">#include&amp;lt;cstdio&amp;gt;</div><div class=\"line\">#include&amp;lt;vector&amp;gt;</div><div class=\"line\">#include&amp;lt;cctype&amp;gt;</div><div class=\"line\">#include&amp;lt;cassert&amp;gt;</div><div class=\"line\">#include&amp;lt;utility&amp;gt;</div><div class=\"line\">#include&amp;lt;numeric&amp;gt;</div><div class=\"line\">#include&amp;lt;cstring&amp;gt;</div><div class=\"line\">#include&amp;lt;iostream&amp;gt;</div><div class=\"line\">#include&amp;lt;algorithm&amp;gt;</div><div class=\"line\">using namespace std;</div><div class=\"line\">#define pr pair</div><div class=\"line\">#define PR pair&amp;lt;int,int&amp;gt;</div><div class=\"line\">#define MP make_pair</div><div class=\"line\">#define SI(x) set&amp;lt;x&amp;gt;::iterator</div><div class=\"line\">#define VI(x) vector&amp;lt;x&amp;gt;::iterator</div><div class=\"line\">#define MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</div><div class=\"line\">#define SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</div><div class=\"line\">#define VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</div><div class=\"line\">#define MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</div><div class=\"line\">#define F first</div><div class=\"line\">#define S second</div><div class=\"line\">#define Sz(x) (int)x.size()</div><div class=\"line\">#define clrQ(x) while(!x.empty)x.pop();</div><div class=\"line\">#define clr(x,y) memset(x,y,sizeof(x));</div><div class=\"line\">#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</div><div class=\"line\">#define LL __int64</div><div class=\"line\">#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"</div><div class=\"line\">#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"</div><div class=\"line\">#define LL_MAX _I64_MAX</div><div class=\"line\">#else</div><div class=\"line\">#define LL long long</div><div class=\"line\">#define LLS \"%\" \"l\" \"l\" \"d\"</div><div class=\"line\">#define LLU \"%\" \"l\" \"l\" \"u\"</div><div class=\"line\">#define LL_MAX _I64_MAX</div><div class=\"line\">#endif</div><div class=\"line\">const int inf = ~0u &amp;gt;&amp;gt; 1;</div><div class=\"line\">const LL lnf = ~0ull &amp;gt;&amp;gt; 1;</div><div class=\"line\">/*start*/</div><div class=\"line\">#define MOD 6</div><div class=\"line\">int n, k;</div><div class=\"line\">struct Matrix &#123;</div><div class=\"line\">    int n, m;</div><div class=\"line\">    int** M;</div><div class=\"line\">    Matrix(int n, int m) :n(n), m(m) &#123;</div><div class=\"line\">        M = new int*[n];</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            M[i] = new int[m];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Matrix(int n, int m, int k) :</div><div class=\"line\">            n(n), m(m) &#123;</div><div class=\"line\">        M = new int*[n];</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            M[i] = new int[m];</div><div class=\"line\">        Init(k);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ~Matrix() &#123;</div><div class=\"line\">        if (M) &#123;</div><div class=\"line\">            for (int i = 0; i &amp;lt; n; i++) &#123;</div><div class=\"line\">                if (M[i]) &#123;</div><div class=\"line\">                    delete[] M[i];</div><div class=\"line\">                    M[i] = NULL;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            delete[] M;</div><div class=\"line\">            M = NULL;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    void Init(bool k) &#123; //k=1 返回单位矩阵，k=0 返回零矩阵</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++)</div><div class=\"line\">                M[i][j] = k * (i == j);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    void out() &#123;</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++)</div><div class=\"line\">                printf(\"%d%c\", M[i][j], j == m - 1 ? '\\n' : ' ');</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Matrix &amp;amp; operator=(const Matrix&amp;amp; othr) &#123;</div><div class=\"line\">        this-&amp;gt;~Matrix();</div><div class=\"line\">        n = othr.n;</div><div class=\"line\">        m = othr.m;</div><div class=\"line\">        M = new int*[n];</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            M[i] = new int[m];</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++) &#123;</div><div class=\"line\">                M[i][j] = othr.M[i][j];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return *this;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Matrix(const Matrix &amp;amp; othr) &#123;</div><div class=\"line\">        n = othr.n;</div><div class=\"line\">        m = othr.m;</div><div class=\"line\">        M = new int*[n];</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            M[i] = new int[m];</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++) &#123;</div><div class=\"line\">                M[i][j] = othr.M[i][j];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    bool operator==(const Matrix&amp;amp; othr) const &#123;</div><div class=\"line\">        if (n - othr.n || m - othr.m) return false;</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++) &#123;</div><div class=\"line\">                if (M[i][j] != othr.M[i][j]) return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Matrix operator *(const Matrix&amp;amp; othr) const &#123;</div><div class=\"line\">        if (m - othr.n) exit(1); //异常退出</div><div class=\"line\">        Matrix ans(n, othr.m, 0);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; othr.m; j++)</div><div class=\"line\">                for (int k = 0; k &amp;lt; m; k++) &#123;</div><div class=\"line\">                    ans.M[i][j] += M[i][k] * othr.M[k][j] % MOD;</div><div class=\"line\">                    if (ans.M[i][j] &amp;gt;= MOD) ans.M[i][j] -= MOD;</div><div class=\"line\">                    if (ans.M[i][j] &amp;lt; 0) ans.M[i][j] += MOD;</div><div class=\"line\">                &#125;</div><div class=\"line\">        return ans;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Matrix operator *(const int&amp;amp; x) const &#123;</div><div class=\"line\">        Matrix ans(n, m);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++)</div><div class=\"line\">                ans.M[i][j] = M[i][j] * x % MOD;</div><div class=\"line\">        return ans;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Matrix operator +(const Matrix &amp;amp; othr) const &#123;</div><div class=\"line\">        if (n - othr.n || m - othr.m) exit(1);</div><div class=\"line\">        Matrix ans(n, m);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++) &#123;</div><div class=\"line\">                ans.M[i][j] = M[i][j] + othr.M[i][j];</div><div class=\"line\">                if (ans.M[i][j] &amp;gt;= MOD) ans.M[i][j] -= MOD;</div><div class=\"line\">                if (ans.M[i][j] &amp;lt; 0) ans.M[i][j] += MOD;</div><div class=\"line\">            &#125;</div><div class=\"line\">        return ans;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Matrix operator -(const Matrix&amp;amp; othr) const &#123;</div><div class=\"line\">        if (n - othr.n || m - othr.m) exit(1);</div><div class=\"line\">        Matrix ans(n, m);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++) &#123;</div><div class=\"line\">                ans.M[i][j] = M[i][j] - othr.M[i][j];</div><div class=\"line\">                if (ans.M[i][j] &amp;gt;= MOD) ans.M[i][j] -= MOD;</div><div class=\"line\">                if (ans.M[i][j] &amp;lt; 0) ans.M[i][j] += MOD;</div><div class=\"line\">            &#125;</div><div class=\"line\">        return ans;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Matrix operator ^(int x) const &#123;</div><div class=\"line\">        if (n - m) exit(1);</div><div class=\"line\">        Matrix ans(n, m, 1), base = *this;</div><div class=\"line\">        while (x &amp;gt; 0) &#123;</div><div class=\"line\">            if (x &amp;amp; 1) ans = ans * base;</div><div class=\"line\">            base = base * base;</div><div class=\"line\">            x &amp;gt;&amp;gt;= 1;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return ans;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char **argv) &#123;</div><div class=\"line\">    while (~scanf(\"%d%d\", &amp;amp;n, &amp;amp;k)) &#123;</div><div class=\"line\">        if (n == 0 &amp;amp;&amp;amp; k == 0) break;</div><div class=\"line\">        Matrix A(n, k, 0), B(k, n, 0);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            for (int j = 0; j &amp;lt; k; j++) &#123;</div><div class=\"line\">                scanf(\"%d\", &amp;amp;A.M[i][j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        for (int i = 0; i &amp;lt; k; i++) &#123;</div><div class=\"line\">            for (int j = 0; j &amp;lt; n; j++) &#123;</div><div class=\"line\">                scanf(\"%d\", &amp;amp;B.M[i][j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        Matrix mat = B * A;</div><div class=\"line\">        int r = n * n - 1;</div><div class=\"line\">        Matrix res = A * (mat ^ r) * B;</div><div class=\"line\">        int ans = 0;</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            for (int j = 0; j &amp;lt; n; j++) &#123;</div><div class=\"line\">                ans += res.M[i][j];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        printf(\"%d\\n\", ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后又试了试vector，虽然简单不少，但是仍然很慢：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&amp;lt;map&amp;gt;</div><div class=\"line\">#include&amp;lt;set&amp;gt;</div><div class=\"line\">#include&amp;lt;cmath&amp;gt;</div><div class=\"line\">#include&amp;lt;stack&amp;gt;</div><div class=\"line\">#include&amp;lt;queue&amp;gt;</div><div class=\"line\">#include&amp;lt;string&amp;gt;</div><div class=\"line\">#include&amp;lt;cstdio&amp;gt;</div><div class=\"line\">#include&amp;lt;vector&amp;gt;</div><div class=\"line\">#include&amp;lt;cctype&amp;gt;</div><div class=\"line\">#include&amp;lt;cassert&amp;gt;</div><div class=\"line\">#include&amp;lt;utility&amp;gt;</div><div class=\"line\">#include&amp;lt;numeric&amp;gt;</div><div class=\"line\">#include&amp;lt;cstring&amp;gt;</div><div class=\"line\">#include&amp;lt;iostream&amp;gt;</div><div class=\"line\">#include&amp;lt;algorithm&amp;gt;</div><div class=\"line\">using namespace std;</div><div class=\"line\">#define pr pair</div><div class=\"line\">#define PR pair&amp;lt;int,int&amp;gt;</div><div class=\"line\">#define MP make_pair</div><div class=\"line\">#define SI(x) set&amp;lt;x&amp;gt;::iterator</div><div class=\"line\">#define VI(x) vector&amp;lt;x&amp;gt;::iterator</div><div class=\"line\">#define MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</div><div class=\"line\">#define SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</div><div class=\"line\">#define VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</div><div class=\"line\">#define MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</div><div class=\"line\">#define F first</div><div class=\"line\">#define S second</div><div class=\"line\">#define Sz(x) (int)x.size()</div><div class=\"line\">#define clrQ(x) while(!x.empty)x.pop();</div><div class=\"line\">#define clr(x,y) memset(x,y,sizeof(x));</div><div class=\"line\">#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</div><div class=\"line\">#define LL __int64</div><div class=\"line\">#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"</div><div class=\"line\">#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"</div><div class=\"line\">#define LL_MAX _I64_MAX</div><div class=\"line\">#else</div><div class=\"line\">#define LL long long</div><div class=\"line\">#define LLS \"%\" \"l\" \"l\" \"d\"</div><div class=\"line\">#define LLU \"%\" \"l\" \"l\" \"u\"</div><div class=\"line\">#define LL_MAX _I64_MAX</div><div class=\"line\">#endif</div><div class=\"line\">const int inf = ~0u &amp;gt;&amp;gt; 1;</div><div class=\"line\">const LL lnf = ~0ull &amp;gt;&amp;gt; 1;</div><div class=\"line\">/*start*/</div><div class=\"line\">#define MOD 6</div><div class=\"line\">int n, k;</div><div class=\"line\">struct Matrix &#123;</div><div class=\"line\">    int n, m;</div><div class=\"line\">    vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt;M;</div><div class=\"line\">    Matrix(int n, int m) :n(n), m(m) &#123;</div><div class=\"line\">        alloc();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Matrix(int n, int m, int k) :</div><div class=\"line\">            n(n), m(m) &#123;</div><div class=\"line\">        alloc();</div><div class=\"line\">        Init(k);</div><div class=\"line\">    &#125;</div><div class=\"line\">    void alloc()&#123;</div><div class=\"line\">        M.resize(n);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            M[i].resize(m);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    void Init(bool k) &#123; //k=1 返回单位矩阵，k=0 返回零矩阵</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++)</div><div class=\"line\">                M[i][j] = k * (i == j);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    void out() &#123;</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++)</div><div class=\"line\">                printf(\"%d%c\", M[i][j], j == m - 1 ? '\\n' : ' ');</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    bool operator==(const Matrix&amp;amp; othr) const &#123;</div><div class=\"line\">        if (n - othr.n || m - othr.m) return false;</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++) &#123;</div><div class=\"line\">                if (M[i][j] != othr.M[i][j]) return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Matrix operator *(const Matrix&amp;amp; othr) const &#123;</div><div class=\"line\">        if (m - othr.n) exit(1); //异常退出</div><div class=\"line\">        Matrix ans(n, othr.m, 0);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; othr.m; j++)</div><div class=\"line\">                for (int k = 0; k &amp;lt; m; k++) &#123;</div><div class=\"line\">                    ans.M[i][j] += M[i][k] * othr.M[k][j] % MOD;</div><div class=\"line\">                    if (ans.M[i][j] &amp;gt;= MOD) ans.M[i][j] -= MOD;</div><div class=\"line\">                    if (ans.M[i][j] &amp;lt; 0) ans.M[i][j] += MOD;</div><div class=\"line\">                &#125;</div><div class=\"line\">        return ans;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Matrix operator *(const int&amp;amp; x) const &#123;</div><div class=\"line\">        Matrix ans(n, m);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++)</div><div class=\"line\">                ans.M[i][j] = M[i][j] * x % MOD;</div><div class=\"line\">        return ans;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Matrix operator +(const Matrix &amp;amp; othr) const &#123;</div><div class=\"line\">        if (n - othr.n || m - othr.m) exit(1);</div><div class=\"line\">        Matrix ans(n, m);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++) &#123;</div><div class=\"line\">                ans.M[i][j] = M[i][j] + othr.M[i][j];</div><div class=\"line\">                if (ans.M[i][j] &amp;gt;= MOD) ans.M[i][j] -= MOD;</div><div class=\"line\">                if (ans.M[i][j] &amp;lt; 0) ans.M[i][j] += MOD;</div><div class=\"line\">            &#125;</div><div class=\"line\">        return ans;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Matrix operator -(const Matrix&amp;amp; othr) const &#123;</div><div class=\"line\">        if (n - othr.n || m - othr.m) exit(1);</div><div class=\"line\">        Matrix ans(n, m);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++) &#123;</div><div class=\"line\">                ans.M[i][j] = M[i][j] - othr.M[i][j];</div><div class=\"line\">                if (ans.M[i][j] &amp;gt;= MOD) ans.M[i][j] -= MOD;</div><div class=\"line\">                if (ans.M[i][j] &amp;lt; 0) ans.M[i][j] += MOD;</div><div class=\"line\">            &#125;</div><div class=\"line\">        return ans;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Matrix operator ^(int x) const &#123;</div><div class=\"line\">        if (n - m) exit(1);</div><div class=\"line\">        Matrix ans(n, m, 1), base = *this;</div><div class=\"line\">        while (x &amp;gt; 0) &#123;</div><div class=\"line\">            if (x &amp;amp; 1) ans = ans * base;</div><div class=\"line\">            base = base * base;</div><div class=\"line\">            x &amp;gt;&amp;gt;= 1;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return ans;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char **argv) &#123;</div><div class=\"line\">    while (~scanf(\"%d%d\", &amp;amp;n, &amp;amp;k)) &#123;</div><div class=\"line\">        if (n == 0 &amp;amp;&amp;amp; k == 0) break;</div><div class=\"line\">        Matrix A(n, k, 0), B(k, n, 0);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            for (int j = 0; j &amp;lt; k; j++) &#123;</div><div class=\"line\">                scanf(\"%d\", &amp;amp;A.M[i][j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        for (int i = 0; i &amp;lt; k; i++) &#123;</div><div class=\"line\">            for (int j = 0; j &amp;lt; n; j++) &#123;</div><div class=\"line\">                scanf(\"%d\", &amp;amp;B.M[i][j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        Matrix mat = B * A;</div><div class=\"line\">        int r = n * n - 1;</div><div class=\"line\">        Matrix res = A * (mat ^ r) * B;</div><div class=\"line\">        int ans = 0;</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            for (int j = 0; j &amp;lt; n; j++) &#123;</div><div class=\"line\">                ans += res.M[i][j];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        printf(\"%d\\n\", ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>感觉其他方法还比较麻烦。算了就这样吧~</p>\n<p>&nbsp;</p>\n","excerpt":"<p><strong><span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 131072/131072 K (Java/Others)<br>Total Submission(s): 206    Accepted Submission(s): 116<br></span></strong></p>\n<p><div class=\"panel_title\" align=\"left\">Problem Description</div></p>\n<div class=\"panel_content\">\n\n<p>One day, Alice and Bob felt bored again, Bob knows Alice is a girl who loves math and is just learning something about matrix, so he decided to make a crazy problem for her.</p>\n<p>Bob has a six-faced dice which has numbers 0, 1, 2, 3, 4 and 5 on each face. At first, he will choose a number N (4 &lt;= N &lt;= 1000), and for N times, he keeps throwing his dice for K times (2 &lt;=K &lt;= 6) and writes down its number on the top face to make an N<em>K matrix A, in which each element is not less than 0 and not greater than 5. Then he does similar thing again with a bit difference: he keeps throwing his dice for N times and each time repeat it for K times to write down a K</em>N matrix B, in which each element is not less than 0 and not greater than 5. With the two matrix A and B formed, Alice’s task is to perform the following 4-step calculation.<br>","more":"<br>Step 1: Calculate a new N<em>N matrix C = A</em>B.<br>Step 2: Calculate M = C^(N*N).<br>Step 3: For each element x in M, calculate x % 6. All the remainders form a new matrix M’.<br>Step 4: Calculate the sum of all the elements in M’.</p>\n<p>Bob just made this problem for kidding but he sees Alice taking it serious, so he also wonders what the answer is. And then Bob turn to you for help because he is not good at math.</p>\n<p></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Input</div></p>\n<div class=\"panel_content\">\n\n<p>The input contains several test cases. Each test case starts with two integer N and K, indicating the numbers N and K described above. Then N lines follow, and each line has K integers between 0 and 5, representing matrix A. Then K lines follow, and each line has N integers between 0 and 5, representing matrix B.</p>\n<p>The end of input is indicated by N = K = 0.</p>\n<p></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Output</div></p>\n<p><div class=\"panel_content\">For each case, output the sum of all the elements in M’ in a line.</div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Input</div></p>\n<p><div class=\"panel_content\"></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">4 2 5 5 4 4 5 4 0 0 4 2 5 5 1 3 1 5 6 3 1 2 3 0 3 0 2 3 4 4 3 2 2 5 5 0 5 0 3 4 5 1 1 0 5 3 2 3 3 2 3 1 5 4 5 2 0 0</div><br></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Sample Output</div></p>\n<p><div class=\"panel_content\"></p>\n<p><div style=\"font-family: Courier New,Courier,monospace;\">14 56</div><br></div></p>\n<p><div class=\"panel_bottom\"></div><br>&nbsp;</p>\n<p><div class=\"panel_title\" align=\"left\">Source</div></p>\n<p><div class=\"panel_content\"><a href=\"http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2014%20Multi-University%20Training%20Contest%209&amp;source=1&amp;searchmode=source\"> 2014 Multi-University Training Contest 9 </a></div><br><br/></p>\n<hr>\n<p><div class=\"panel_content\">这题让我注意了矩阵模板的开销问题。1000X1000多次调用就会爆内存了。下面是用动态数组写的。效率非常慢，难以接受。</div><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&amp;lt;map&amp;gt;</div><div class=\"line\">#include&amp;lt;set&amp;gt;</div><div class=\"line\">#include&amp;lt;cmath&amp;gt;</div><div class=\"line\">#include&amp;lt;stack&amp;gt;</div><div class=\"line\">#include&amp;lt;queue&amp;gt;</div><div class=\"line\">#include&amp;lt;string&amp;gt;</div><div class=\"line\">#include&amp;lt;cstdio&amp;gt;</div><div class=\"line\">#include&amp;lt;vector&amp;gt;</div><div class=\"line\">#include&amp;lt;cctype&amp;gt;</div><div class=\"line\">#include&amp;lt;cassert&amp;gt;</div><div class=\"line\">#include&amp;lt;utility&amp;gt;</div><div class=\"line\">#include&amp;lt;numeric&amp;gt;</div><div class=\"line\">#include&amp;lt;cstring&amp;gt;</div><div class=\"line\">#include&amp;lt;iostream&amp;gt;</div><div class=\"line\">#include&amp;lt;algorithm&amp;gt;</div><div class=\"line\">using namespace std;</div><div class=\"line\">#define pr pair</div><div class=\"line\">#define PR pair&amp;lt;int,int&amp;gt;</div><div class=\"line\">#define MP make_pair</div><div class=\"line\">#define SI(x) set&amp;lt;x&amp;gt;::iterator</div><div class=\"line\">#define VI(x) vector&amp;lt;x&amp;gt;::iterator</div><div class=\"line\">#define MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</div><div class=\"line\">#define SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</div><div class=\"line\">#define VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</div><div class=\"line\">#define MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</div><div class=\"line\">#define F first</div><div class=\"line\">#define S second</div><div class=\"line\">#define Sz(x) (int)x.size()</div><div class=\"line\">#define clrQ(x) while(!x.empty)x.pop();</div><div class=\"line\">#define clr(x,y) memset(x,y,sizeof(x));</div><div class=\"line\">#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</div><div class=\"line\">#define LL __int64</div><div class=\"line\">#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"</div><div class=\"line\">#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"</div><div class=\"line\">#define LL_MAX _I64_MAX</div><div class=\"line\">#else</div><div class=\"line\">#define LL long long</div><div class=\"line\">#define LLS \"%\" \"l\" \"l\" \"d\"</div><div class=\"line\">#define LLU \"%\" \"l\" \"l\" \"u\"</div><div class=\"line\">#define LL_MAX _I64_MAX</div><div class=\"line\">#endif</div><div class=\"line\">const int inf = ~0u &amp;gt;&amp;gt; 1;</div><div class=\"line\">const LL lnf = ~0ull &amp;gt;&amp;gt; 1;</div><div class=\"line\">/*start*/</div><div class=\"line\">#define MOD 6</div><div class=\"line\">int n, k;</div><div class=\"line\">struct Matrix &#123;</div><div class=\"line\">    int n, m;</div><div class=\"line\">    int** M;</div><div class=\"line\">    Matrix(int n, int m) :n(n), m(m) &#123;</div><div class=\"line\">        M = new int*[n];</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            M[i] = new int[m];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Matrix(int n, int m, int k) :</div><div class=\"line\">            n(n), m(m) &#123;</div><div class=\"line\">        M = new int*[n];</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            M[i] = new int[m];</div><div class=\"line\">        Init(k);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ~Matrix() &#123;</div><div class=\"line\">        if (M) &#123;</div><div class=\"line\">            for (int i = 0; i &amp;lt; n; i++) &#123;</div><div class=\"line\">                if (M[i]) &#123;</div><div class=\"line\">                    delete[] M[i];</div><div class=\"line\">                    M[i] = NULL;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            delete[] M;</div><div class=\"line\">            M = NULL;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    void Init(bool k) &#123; //k=1 返回单位矩阵，k=0 返回零矩阵</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++)</div><div class=\"line\">                M[i][j] = k * (i == j);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    void out() &#123;</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++)</div><div class=\"line\">                printf(\"%d%c\", M[i][j], j == m - 1 ? '\\n' : ' ');</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Matrix &amp;amp; operator=(const Matrix&amp;amp; othr) &#123;</div><div class=\"line\">        this-&amp;gt;~Matrix();</div><div class=\"line\">        n = othr.n;</div><div class=\"line\">        m = othr.m;</div><div class=\"line\">        M = new int*[n];</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            M[i] = new int[m];</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++) &#123;</div><div class=\"line\">                M[i][j] = othr.M[i][j];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return *this;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Matrix(const Matrix &amp;amp; othr) &#123;</div><div class=\"line\">        n = othr.n;</div><div class=\"line\">        m = othr.m;</div><div class=\"line\">        M = new int*[n];</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            M[i] = new int[m];</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++) &#123;</div><div class=\"line\">                M[i][j] = othr.M[i][j];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    bool operator==(const Matrix&amp;amp; othr) const &#123;</div><div class=\"line\">        if (n - othr.n || m - othr.m) return false;</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++) &#123;</div><div class=\"line\">                if (M[i][j] != othr.M[i][j]) return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Matrix operator *(const Matrix&amp;amp; othr) const &#123;</div><div class=\"line\">        if (m - othr.n) exit(1); //异常退出</div><div class=\"line\">        Matrix ans(n, othr.m, 0);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; othr.m; j++)</div><div class=\"line\">                for (int k = 0; k &amp;lt; m; k++) &#123;</div><div class=\"line\">                    ans.M[i][j] += M[i][k] * othr.M[k][j] % MOD;</div><div class=\"line\">                    if (ans.M[i][j] &amp;gt;= MOD) ans.M[i][j] -= MOD;</div><div class=\"line\">                    if (ans.M[i][j] &amp;lt; 0) ans.M[i][j] += MOD;</div><div class=\"line\">                &#125;</div><div class=\"line\">        return ans;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Matrix operator *(const int&amp;amp; x) const &#123;</div><div class=\"line\">        Matrix ans(n, m);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++)</div><div class=\"line\">                ans.M[i][j] = M[i][j] * x % MOD;</div><div class=\"line\">        return ans;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Matrix operator +(const Matrix &amp;amp; othr) const &#123;</div><div class=\"line\">        if (n - othr.n || m - othr.m) exit(1);</div><div class=\"line\">        Matrix ans(n, m);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++) &#123;</div><div class=\"line\">                ans.M[i][j] = M[i][j] + othr.M[i][j];</div><div class=\"line\">                if (ans.M[i][j] &amp;gt;= MOD) ans.M[i][j] -= MOD;</div><div class=\"line\">                if (ans.M[i][j] &amp;lt; 0) ans.M[i][j] += MOD;</div><div class=\"line\">            &#125;</div><div class=\"line\">        return ans;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Matrix operator -(const Matrix&amp;amp; othr) const &#123;</div><div class=\"line\">        if (n - othr.n || m - othr.m) exit(1);</div><div class=\"line\">        Matrix ans(n, m);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++) &#123;</div><div class=\"line\">                ans.M[i][j] = M[i][j] - othr.M[i][j];</div><div class=\"line\">                if (ans.M[i][j] &amp;gt;= MOD) ans.M[i][j] -= MOD;</div><div class=\"line\">                if (ans.M[i][j] &amp;lt; 0) ans.M[i][j] += MOD;</div><div class=\"line\">            &#125;</div><div class=\"line\">        return ans;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Matrix operator ^(int x) const &#123;</div><div class=\"line\">        if (n - m) exit(1);</div><div class=\"line\">        Matrix ans(n, m, 1), base = *this;</div><div class=\"line\">        while (x &amp;gt; 0) &#123;</div><div class=\"line\">            if (x &amp;amp; 1) ans = ans * base;</div><div class=\"line\">            base = base * base;</div><div class=\"line\">            x &amp;gt;&amp;gt;= 1;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return ans;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char **argv) &#123;</div><div class=\"line\">    while (~scanf(\"%d%d\", &amp;amp;n, &amp;amp;k)) &#123;</div><div class=\"line\">        if (n == 0 &amp;amp;&amp;amp; k == 0) break;</div><div class=\"line\">        Matrix A(n, k, 0), B(k, n, 0);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            for (int j = 0; j &amp;lt; k; j++) &#123;</div><div class=\"line\">                scanf(\"%d\", &amp;amp;A.M[i][j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        for (int i = 0; i &amp;lt; k; i++) &#123;</div><div class=\"line\">            for (int j = 0; j &amp;lt; n; j++) &#123;</div><div class=\"line\">                scanf(\"%d\", &amp;amp;B.M[i][j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        Matrix mat = B * A;</div><div class=\"line\">        int r = n * n - 1;</div><div class=\"line\">        Matrix res = A * (mat ^ r) * B;</div><div class=\"line\">        int ans = 0;</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            for (int j = 0; j &amp;lt; n; j++) &#123;</div><div class=\"line\">                ans += res.M[i][j];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        printf(\"%d\\n\", ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后又试了试vector，虽然简单不少，但是仍然很慢：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&amp;lt;map&amp;gt;</div><div class=\"line\">#include&amp;lt;set&amp;gt;</div><div class=\"line\">#include&amp;lt;cmath&amp;gt;</div><div class=\"line\">#include&amp;lt;stack&amp;gt;</div><div class=\"line\">#include&amp;lt;queue&amp;gt;</div><div class=\"line\">#include&amp;lt;string&amp;gt;</div><div class=\"line\">#include&amp;lt;cstdio&amp;gt;</div><div class=\"line\">#include&amp;lt;vector&amp;gt;</div><div class=\"line\">#include&amp;lt;cctype&amp;gt;</div><div class=\"line\">#include&amp;lt;cassert&amp;gt;</div><div class=\"line\">#include&amp;lt;utility&amp;gt;</div><div class=\"line\">#include&amp;lt;numeric&amp;gt;</div><div class=\"line\">#include&amp;lt;cstring&amp;gt;</div><div class=\"line\">#include&amp;lt;iostream&amp;gt;</div><div class=\"line\">#include&amp;lt;algorithm&amp;gt;</div><div class=\"line\">using namespace std;</div><div class=\"line\">#define pr pair</div><div class=\"line\">#define PR pair&amp;lt;int,int&amp;gt;</div><div class=\"line\">#define MP make_pair</div><div class=\"line\">#define SI(x) set&amp;lt;x&amp;gt;::iterator</div><div class=\"line\">#define VI(x) vector&amp;lt;x&amp;gt;::iterator</div><div class=\"line\">#define MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</div><div class=\"line\">#define SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</div><div class=\"line\">#define VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</div><div class=\"line\">#define MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</div><div class=\"line\">#define F first</div><div class=\"line\">#define S second</div><div class=\"line\">#define Sz(x) (int)x.size()</div><div class=\"line\">#define clrQ(x) while(!x.empty)x.pop();</div><div class=\"line\">#define clr(x,y) memset(x,y,sizeof(x));</div><div class=\"line\">#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</div><div class=\"line\">#define LL __int64</div><div class=\"line\">#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"</div><div class=\"line\">#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"</div><div class=\"line\">#define LL_MAX _I64_MAX</div><div class=\"line\">#else</div><div class=\"line\">#define LL long long</div><div class=\"line\">#define LLS \"%\" \"l\" \"l\" \"d\"</div><div class=\"line\">#define LLU \"%\" \"l\" \"l\" \"u\"</div><div class=\"line\">#define LL_MAX _I64_MAX</div><div class=\"line\">#endif</div><div class=\"line\">const int inf = ~0u &amp;gt;&amp;gt; 1;</div><div class=\"line\">const LL lnf = ~0ull &amp;gt;&amp;gt; 1;</div><div class=\"line\">/*start*/</div><div class=\"line\">#define MOD 6</div><div class=\"line\">int n, k;</div><div class=\"line\">struct Matrix &#123;</div><div class=\"line\">    int n, m;</div><div class=\"line\">    vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt;M;</div><div class=\"line\">    Matrix(int n, int m) :n(n), m(m) &#123;</div><div class=\"line\">        alloc();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Matrix(int n, int m, int k) :</div><div class=\"line\">            n(n), m(m) &#123;</div><div class=\"line\">        alloc();</div><div class=\"line\">        Init(k);</div><div class=\"line\">    &#125;</div><div class=\"line\">    void alloc()&#123;</div><div class=\"line\">        M.resize(n);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            M[i].resize(m);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    void Init(bool k) &#123; //k=1 返回单位矩阵，k=0 返回零矩阵</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++)</div><div class=\"line\">                M[i][j] = k * (i == j);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    void out() &#123;</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++)</div><div class=\"line\">                printf(\"%d%c\", M[i][j], j == m - 1 ? '\\n' : ' ');</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    bool operator==(const Matrix&amp;amp; othr) const &#123;</div><div class=\"line\">        if (n - othr.n || m - othr.m) return false;</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++) &#123;</div><div class=\"line\">                if (M[i][j] != othr.M[i][j]) return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Matrix operator *(const Matrix&amp;amp; othr) const &#123;</div><div class=\"line\">        if (m - othr.n) exit(1); //异常退出</div><div class=\"line\">        Matrix ans(n, othr.m, 0);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; othr.m; j++)</div><div class=\"line\">                for (int k = 0; k &amp;lt; m; k++) &#123;</div><div class=\"line\">                    ans.M[i][j] += M[i][k] * othr.M[k][j] % MOD;</div><div class=\"line\">                    if (ans.M[i][j] &amp;gt;= MOD) ans.M[i][j] -= MOD;</div><div class=\"line\">                    if (ans.M[i][j] &amp;lt; 0) ans.M[i][j] += MOD;</div><div class=\"line\">                &#125;</div><div class=\"line\">        return ans;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Matrix operator *(const int&amp;amp; x) const &#123;</div><div class=\"line\">        Matrix ans(n, m);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++)</div><div class=\"line\">                ans.M[i][j] = M[i][j] * x % MOD;</div><div class=\"line\">        return ans;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Matrix operator +(const Matrix &amp;amp; othr) const &#123;</div><div class=\"line\">        if (n - othr.n || m - othr.m) exit(1);</div><div class=\"line\">        Matrix ans(n, m);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++) &#123;</div><div class=\"line\">                ans.M[i][j] = M[i][j] + othr.M[i][j];</div><div class=\"line\">                if (ans.M[i][j] &amp;gt;= MOD) ans.M[i][j] -= MOD;</div><div class=\"line\">                if (ans.M[i][j] &amp;lt; 0) ans.M[i][j] += MOD;</div><div class=\"line\">            &#125;</div><div class=\"line\">        return ans;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Matrix operator -(const Matrix&amp;amp; othr) const &#123;</div><div class=\"line\">        if (n - othr.n || m - othr.m) exit(1);</div><div class=\"line\">        Matrix ans(n, m);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">            for (int j = 0; j &amp;lt; m; j++) &#123;</div><div class=\"line\">                ans.M[i][j] = M[i][j] - othr.M[i][j];</div><div class=\"line\">                if (ans.M[i][j] &amp;gt;= MOD) ans.M[i][j] -= MOD;</div><div class=\"line\">                if (ans.M[i][j] &amp;lt; 0) ans.M[i][j] += MOD;</div><div class=\"line\">            &#125;</div><div class=\"line\">        return ans;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Matrix operator ^(int x) const &#123;</div><div class=\"line\">        if (n - m) exit(1);</div><div class=\"line\">        Matrix ans(n, m, 1), base = *this;</div><div class=\"line\">        while (x &amp;gt; 0) &#123;</div><div class=\"line\">            if (x &amp;amp; 1) ans = ans * base;</div><div class=\"line\">            base = base * base;</div><div class=\"line\">            x &amp;gt;&amp;gt;= 1;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return ans;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char **argv) &#123;</div><div class=\"line\">    while (~scanf(\"%d%d\", &amp;amp;n, &amp;amp;k)) &#123;</div><div class=\"line\">        if (n == 0 &amp;amp;&amp;amp; k == 0) break;</div><div class=\"line\">        Matrix A(n, k, 0), B(k, n, 0);</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            for (int j = 0; j &amp;lt; k; j++) &#123;</div><div class=\"line\">                scanf(\"%d\", &amp;amp;A.M[i][j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        for (int i = 0; i &amp;lt; k; i++) &#123;</div><div class=\"line\">            for (int j = 0; j &amp;lt; n; j++) &#123;</div><div class=\"line\">                scanf(\"%d\", &amp;amp;B.M[i][j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        Matrix mat = B * A;</div><div class=\"line\">        int r = n * n - 1;</div><div class=\"line\">        Matrix res = A * (mat ^ r) * B;</div><div class=\"line\">        int ans = 0;</div><div class=\"line\">        for (int i = 0; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            for (int j = 0; j &amp;lt; n; j++) &#123;</div><div class=\"line\">                ans += res.M[i][j];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        printf(\"%d\\n\", ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>感觉其他方法还比较麻烦。算了就这样吧~</p>\n<p>&nbsp;</p>"},{"title":"Hexo折腾笔记（二）博客优化与定制","date":"2015-02-25T14:57:00.000Z","toc":true,"_content":"首先我使用的是由[zippera](http://zipperary.com/)基于官方[Light](https://github.com/hexojs/hexo-theme-light)主题改进而来的[Lightum](https://github.com/zippera/lightum)主题,其他主题可能稍有出入。\n##速度优化\n参考之前的文章：[静态页面优化](http://kevinsfork.info/2015/02/25/hexo-speedup-instantclick/)。然后使用了[hexo-qiniu-sync](https://github.com/gyk001/hexo-qiniu-sync)这个项目，将静态的图片以及css、js同步到了七牛云。（PS：主题模板中包含了两个不同版本的jquery，分别在head.ejs与after-footer.ejs中，随便删除一个。）\n\n对于处于body区域的script、style的引用尽可能的加入data-no-instant属性，避免InstantClick重复加载。\n##给instantclick加载进度条加上阴影效果\n```CSS\n#instantclick-bar{\n-webkit-box-shadow: 0 0 8px rgba(0, 0, 0, 0.56);\nbox-shadow: 0 0 8px rgba(0, 0, 0, 0.56);\n}\n```\n\n##加入Swiftype搜索\n去[Swiftype](https://swiftype.com/)官网申请代码，然后修改search.ejs文件为：\n```Html\n<div class=\"search\">\n<form>\n<input type=\"search\" id=\"st-search-input\" placeholder=\"<%= __('search') %>\">\n</form>\n</div>\n```\n <!--more-->\n更具体的指导具体可以参考这篇文章：[click here](http://lukang.me/2015/optimization-of-hexo-2.html)。\n##改进多说评论框\n###添加data-thread-key等属性\n```Html\n<!-- 多说评论框 start -->\n<div class=\"ds-thread\" data-thread-key=\"<%= page.path %>\" data-title=\"<%= page.title %>\" data-url=\"<%= page.permalink %>\"></div>\n<!-- 多说评论框 end -->\n```\n###美化多说评论框\n进入多说评论的管理后台，将下面代码粘贴到‘设置->自定义CSS’中。\n```\n#ds-reset .ds-avatar img{width:54px;height:54px;border-radius:27px;-webkit-border-radius:27px;-moz-border-radius:27px;box-shadow:inset 0 -1px 0 #3333sf;-webkit-box-shadow:inset 0 -1px 0 #3333sf;-webkit-transition:0.4s;-webkit-transition:-webkit-transform 0.4s ease-out;transition:transform 0.4s ease-out;-moz-transition:-moz-transform 0.4s ease-out;}\n#ds-reset .ds-avatar img:hover{box-shadow:0 0 10px #fff;rgba(255,255,255,.6),inset 0 0 20px rgba(255,255,255,1);-webkit-box-shadow:0 0 10px #fff;rgba(255,255,255,.6),inset 0 0 20px rgba(255,255,255,1);transform:rotateZ(360deg);-webkit-transform:rotateZ(360deg);-moz-transform:rotateZ(360deg);}\np.ds-powered-by,#ds-sync-checkbox,.ds-sync label{display:none!important;}\n#ds-reset .ds-rounded-top{-webkit-border-top-right-radius:0px;-webkit-border-top-left-radius:0px;border-top-right-radius:0px;border-top-left-radius:0px;}\n#ds-thread #ds-reset .ds-textarea-wrapper{background:#fff;border:0;margin-bottom:20px;padding-right:0px;}\n#ds-thread #ds-reset .ds-textarea-wrapper textarea{min-height:80px;border:1px solid #ccc;padding:10px;-webkit-appearance:none;border-radius:0;background-color:#FFFFFF;border-color:#cccccc;box-shadow:inset 0 1px 2px rgba(0,0,0,0.1);color:rgba(0,0,0,0.75);-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-transition:border-color 0.15s linear,background 0.15s linear;-moz-transition:border-color 0.15s linear,background 0.15s linear;-ms-transition:border-color 0.15s linear,background 0.15s linear;-o-transition:border-color 0.15s linear,background 0.15s linear;transition:border-color 0.15s linear,background 0.15s linear;}\n#ds-thread #ds-reset .ds-textarea-wrapper textarea:focus{border-color:#999999;background:#fafafa;outline:none;}\n#ds-thread #ds-reset .ds-post-options{border-bottom-left-radius:0px;-webkit-border-bottom-left-radius:0px;border:none;background:none!important;}\n#ds-thread #ds-reset .ds-post-button{border-bottom-right-radius:0px;-webkit-border-bottom-right-radius:0px;}\n#ds-reset .ds-textarea-wrapper textarea:focus{border-color:#66afe9;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);}\n#ds-thread #ds-reset .ds-post-button{background-image:none;text-shadow:none;border:none;font-weight:normal;line-height:normal;position:absolute;-webkit-appearance:button;-moz-appearance:button;background-color:#008CBA;border-color:#007095;color:#FFFFFF;transition:background-color 300ms ease-out;}\n#ds-thread #ds-reset .ds-post-button:hover,#ds-thread #ds-reset .ds-post-button:focus{background-color:#007095;color:#FFFFFF;}\n```\n##加入多说最新评论\n修改'theme/lightum/_config.yml'文件，在widgets下面添加`- recent_comments`项。\n在主题文件的'theme/lightum/layout/_widget'目录中新建recent_comments.ejs文件，并放入如下代码：\n```\n<div class=\"widget tag\">\n<h3 class=\"title\"><%= __('recent_comments')</h3>\n<div class=\"entry\">\n<!-- 多说最新评论 start -->\n    <div class=\"ds-recent-comments\" data-num-items=\"5\" data-show-avatars=\"1\" data-show-time=\"1\" data-show-title=\"1\" data-show-admin=\"1\" data-excerpt-length=\"70\"></div>\n<!-- 多说最新评论 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n..........\n<!-- 多说公共JS代码 end -->\n</div>\n</div>\n```\n然后在'/languages/zh-CN.yml'文件添加翻译：`recent_comments: 最新评论`\n\n最后，原来的评论样式不太符合lightum主题，可以在'/source/css/_partial'里建立一个recent_comment.styl文件：\n```language\n.ds-recent-comments\n  li.ds-comment\n    &:first-child\n      border-top none !important\n```\n然后在/theme/lightum/source/css/style中将之包括进来：`@import '_partial/recent_comments'`\n\n\n多说的这个插件同样不兼容于instantclick。我们可以在这篇文章的基础上解决：[click here](/2015/02/25/hexo-speedup-instantclick/):\n- 将多说的公共JS放入head或加入'data-no-instant'属性放入body中，并删除recent.ejs与comment.ejs中重复的JS。\n- 修改change事件中的代码为：\n```\nif(typeof DUOSHUO !== 'undefined'){ //support 多说评论框\nif($(\".ds-thread\").length){\n    DUOSHUO.EmbedThread($('.ds-thread')[0]);\n}\nDUOSHUO.RecentComments($('.ds-recent-comments')[0]);\n}\n```\n这样虽然能够解决问题，但是会显示方面又会出现点小问题。可以加入下面css修复：\n```language\nspan.caption{\ndisplay: none;\n}\n```\n## 加入文章导航\n修改'/layout/_partical/article.ejs'文件\n```Html\n<article class=\"<%= item.layout %>\">\n  // ...\n  <div class=\"entry\">\n    <% if (item.excerpt && index){ %>\n      <%- item.excerpt %>\n    <% } else { %>\n      <% if (!index){ %>\n        // 插入文章导航\n        <%- partial('toc') %>\n      <% } %>\n      <%- item.content %>\n    <% } %>\n  </div>\n</article>\n```\n在'\\source\\css\\_partial\\article.styl'文件后添加：\n```language\n  .toc-article\n    float right\n     \n  #toc\n    background #eee\n    margin 0 0 10px 20px\n    padding 12px\n    line-height 18px\n    font-size 10px\n    strong\n      font-size 15px\n    ol\n      margin-top 5px\n      margin-left 0\n    .toc\n      padding 0\n      li\n        list-style-type none\n    .toc-child\n      padding-left 20px\n```\n这样，我们就能在写文章的时候添加`toc: true`来启动文章导航功能。\n###扩展：浮动式导航\n实现当页面滑动到下方时将文章导航浮动到屏幕右侧。\n\n在'\\layout\\_partial\\'里新建文件：`float_nav.ejs`\n```Html\n<div id=\"menu-nav\">\n\t<div id=\"title-nav\"><%= __('navigation') %><div>→</div>\n\t</div>\n\t<div id=\"content-nav\">\n\t\t<%- toc(item.content) %>\n\t</div>\n</div>\n<script>\n(function($, scrollSpeed, hiddenSpeed, fadeSpeed) {\n\tvar T = $('#toc');\n\tvar M = $('#menu-nav');\n\tvar C = $('#content-nav');\n\tvar Tx = T.position().top;\n\t$(window).scroll(function() {\n\t\tvar top = $(this).scrollTop();\n\t\tif (top >= Tx + 300) {\n\t\t\tM.stop().fadeIn(fadeSpeed);\n\t\t\tT.stop().fadeTo(fadeSpeed, 0);\n\t\t} else {\n\t\t\tM.stop().fadeOut(fadeSpeed);\n\t\t\tT.stop().fadeTo(fadeSpeed, 1);\n\t\t}\n\t});\n\n\t$('.toc-link').click(function(e) {\n\t\t//阻止默认跳转\n\t\te.preventDefault();\n\t\t//定义滚动动画\n\t\tvar scrollTarget = $('#' + $(this).children('.toc-text').first().text());\n\t\t$(\"html,body\").animate({\n\t\t\tscrollTop: scrollTarget.prev().offset().top\n\t\t}, scrollSpeed);\n\t});\n\tC.click(function(e) {\n\t\te.stopPropagation();\n\t});\n\tM.click(function() {\n\t\tC.toggle(hiddenSpeed, 'linear', function() {\n\t\t\tvar T = $('#title-nav div');\n\t\t\tT.text() == '←' ? T.text('→') : T.text('←');\n\t\t});\n\t});\n})(jQuery, 500, 200, 100);\n</script>\n```\n在'layout/_partial/article.ejs'中添加对其的引用：\n```Html\n<% if(!index && item.toc){ %>\n  <%- partial('float_nav') %>\n<% } %>\n```\n添加css样式：\n```language\nnavbcolor=rgba(100, 100, 100, 0.74)\n#menu-nav\n  position fixed;\n  display none;\n  cursor pointer;\n  z-index 150;\n  right 0;\n  top 20%;\n  box-shadow 0 0 5px rgba(0, 0, 0, 0.15);\n  color white;\n  background navbcolor;\n  #title-nav\n    display inline-block;\n    vertical-align middle;\n    width: 30px;\n    height: 100%;\n    font-size: 16px;\n    text-align: center;\n    padding: 10px 0;\n  #content-nav\n    display inline-block;\n    vertical-align middle;\n    white-space:nowrap;\n    border-left: 1px dashed #ccc;\n    box-sizing border-box;\n    padding 15px;\n    line-height 18px;\n    font-size 10px;\n    li\n      list-style-type none;\n      width 100%;\n      a\n        display block;\n        box-sizing border-box;\n        color #FFFFFF;\n        &:hover\n          background rgba(100, 100, 100, 1);\n      .toc-child a\n        padding-left 20px;\n```\n###添加\"返回顶部\"\n与上一节相似，在'layout/_widget/'中添加`totop.ejs`文件：\n```Html\n<div id=\"to-top\">↑</div>\n<script>\n(function($, scrollSpeed, fadeSpeed) {\n\tvar T = $('#to-top');\n\t$(window).scroll(function() {\n\t\tvar top = $(this).scrollTop();\n\t\tif (top >= 300) {\n\t\t\tT.stop().fadeIn(fadeSpeed);\n\t\t} else {\n\t\t\tT.stop().fadeOut(fadeSpeed);\n\t\t}\n\t});\n\tT.click(function() {\n\t\t$(\"html,body\").animate({\n\t\t\tscrollTop: 0\n\t\t}, scrollSpeed);\n\t});\n})(jQuery, 500, 200);\n</script>\n```\n在'lightum/_config.yml'中启用该挂件：\n```language\nwidgets:\n- totop\n```\n添加css样式：\n```language\n#to-top\n  background navbcolor;\n  position fixed;\n  display none;\n  z-index 200;\n  right 40px;\n  bottom 10%;\n  box-shadow 0 0 5px rgba(0, 0, 0, 0.15);\n  font-size 14px;\n  color white;\n  padding 5px 15px;\n  cursor pointer;\n  font-size 12px;\n  text-align center;\n  &:hover\n    background rgba(100,100,100,1);\n```\n\n\n##参考\n- [Hexo 主题修改:为博客实现更多功能](http://deffi.info/2014/10/03/Hexo-%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%8D%9A%E5%AE%A2%E5%AE%9E%E7%8E%B0%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD/)\n- [多说评论也玩圆角头像动画「自定义CSS:无压力小白级教程」](https://luolei.org/duoshuo-css/)\n- [Hexo 优化与定制(二)](http://lukang.me/2015/optimization-of-hexo-2.html)","source":"_posts/hexo-lightum-enhance.md","raw":"title: Hexo折腾笔记（二）博客优化与定制\ntags:\n  - 美化\n  - html\ncategories:\n  - Hexo\ndate: 2015-02-25 22:57:00\ntoc: true\n---\n首先我使用的是由[zippera](http://zipperary.com/)基于官方[Light](https://github.com/hexojs/hexo-theme-light)主题改进而来的[Lightum](https://github.com/zippera/lightum)主题,其他主题可能稍有出入。\n##速度优化\n参考之前的文章：[静态页面优化](http://kevinsfork.info/2015/02/25/hexo-speedup-instantclick/)。然后使用了[hexo-qiniu-sync](https://github.com/gyk001/hexo-qiniu-sync)这个项目，将静态的图片以及css、js同步到了七牛云。（PS：主题模板中包含了两个不同版本的jquery，分别在head.ejs与after-footer.ejs中，随便删除一个。）\n\n对于处于body区域的script、style的引用尽可能的加入data-no-instant属性，避免InstantClick重复加载。\n##给instantclick加载进度条加上阴影效果\n```CSS\n#instantclick-bar{\n-webkit-box-shadow: 0 0 8px rgba(0, 0, 0, 0.56);\nbox-shadow: 0 0 8px rgba(0, 0, 0, 0.56);\n}\n```\n\n##加入Swiftype搜索\n去[Swiftype](https://swiftype.com/)官网申请代码，然后修改search.ejs文件为：\n```Html\n<div class=\"search\">\n<form>\n<input type=\"search\" id=\"st-search-input\" placeholder=\"<%= __('search') %>\">\n</form>\n</div>\n```\n <!--more-->\n更具体的指导具体可以参考这篇文章：[click here](http://lukang.me/2015/optimization-of-hexo-2.html)。\n##改进多说评论框\n###添加data-thread-key等属性\n```Html\n<!-- 多说评论框 start -->\n<div class=\"ds-thread\" data-thread-key=\"<%= page.path %>\" data-title=\"<%= page.title %>\" data-url=\"<%= page.permalink %>\"></div>\n<!-- 多说评论框 end -->\n```\n###美化多说评论框\n进入多说评论的管理后台，将下面代码粘贴到‘设置->自定义CSS’中。\n```\n#ds-reset .ds-avatar img{width:54px;height:54px;border-radius:27px;-webkit-border-radius:27px;-moz-border-radius:27px;box-shadow:inset 0 -1px 0 #3333sf;-webkit-box-shadow:inset 0 -1px 0 #3333sf;-webkit-transition:0.4s;-webkit-transition:-webkit-transform 0.4s ease-out;transition:transform 0.4s ease-out;-moz-transition:-moz-transform 0.4s ease-out;}\n#ds-reset .ds-avatar img:hover{box-shadow:0 0 10px #fff;rgba(255,255,255,.6),inset 0 0 20px rgba(255,255,255,1);-webkit-box-shadow:0 0 10px #fff;rgba(255,255,255,.6),inset 0 0 20px rgba(255,255,255,1);transform:rotateZ(360deg);-webkit-transform:rotateZ(360deg);-moz-transform:rotateZ(360deg);}\np.ds-powered-by,#ds-sync-checkbox,.ds-sync label{display:none!important;}\n#ds-reset .ds-rounded-top{-webkit-border-top-right-radius:0px;-webkit-border-top-left-radius:0px;border-top-right-radius:0px;border-top-left-radius:0px;}\n#ds-thread #ds-reset .ds-textarea-wrapper{background:#fff;border:0;margin-bottom:20px;padding-right:0px;}\n#ds-thread #ds-reset .ds-textarea-wrapper textarea{min-height:80px;border:1px solid #ccc;padding:10px;-webkit-appearance:none;border-radius:0;background-color:#FFFFFF;border-color:#cccccc;box-shadow:inset 0 1px 2px rgba(0,0,0,0.1);color:rgba(0,0,0,0.75);-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-transition:border-color 0.15s linear,background 0.15s linear;-moz-transition:border-color 0.15s linear,background 0.15s linear;-ms-transition:border-color 0.15s linear,background 0.15s linear;-o-transition:border-color 0.15s linear,background 0.15s linear;transition:border-color 0.15s linear,background 0.15s linear;}\n#ds-thread #ds-reset .ds-textarea-wrapper textarea:focus{border-color:#999999;background:#fafafa;outline:none;}\n#ds-thread #ds-reset .ds-post-options{border-bottom-left-radius:0px;-webkit-border-bottom-left-radius:0px;border:none;background:none!important;}\n#ds-thread #ds-reset .ds-post-button{border-bottom-right-radius:0px;-webkit-border-bottom-right-radius:0px;}\n#ds-reset .ds-textarea-wrapper textarea:focus{border-color:#66afe9;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);}\n#ds-thread #ds-reset .ds-post-button{background-image:none;text-shadow:none;border:none;font-weight:normal;line-height:normal;position:absolute;-webkit-appearance:button;-moz-appearance:button;background-color:#008CBA;border-color:#007095;color:#FFFFFF;transition:background-color 300ms ease-out;}\n#ds-thread #ds-reset .ds-post-button:hover,#ds-thread #ds-reset .ds-post-button:focus{background-color:#007095;color:#FFFFFF;}\n```\n##加入多说最新评论\n修改'theme/lightum/_config.yml'文件，在widgets下面添加`- recent_comments`项。\n在主题文件的'theme/lightum/layout/_widget'目录中新建recent_comments.ejs文件，并放入如下代码：\n```\n<div class=\"widget tag\">\n<h3 class=\"title\"><%= __('recent_comments')</h3>\n<div class=\"entry\">\n<!-- 多说最新评论 start -->\n    <div class=\"ds-recent-comments\" data-num-items=\"5\" data-show-avatars=\"1\" data-show-time=\"1\" data-show-title=\"1\" data-show-admin=\"1\" data-excerpt-length=\"70\"></div>\n<!-- 多说最新评论 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n..........\n<!-- 多说公共JS代码 end -->\n</div>\n</div>\n```\n然后在'/languages/zh-CN.yml'文件添加翻译：`recent_comments: 最新评论`\n\n最后，原来的评论样式不太符合lightum主题，可以在'/source/css/_partial'里建立一个recent_comment.styl文件：\n```language\n.ds-recent-comments\n  li.ds-comment\n    &:first-child\n      border-top none !important\n```\n然后在/theme/lightum/source/css/style中将之包括进来：`@import '_partial/recent_comments'`\n\n\n多说的这个插件同样不兼容于instantclick。我们可以在这篇文章的基础上解决：[click here](/2015/02/25/hexo-speedup-instantclick/):\n- 将多说的公共JS放入head或加入'data-no-instant'属性放入body中，并删除recent.ejs与comment.ejs中重复的JS。\n- 修改change事件中的代码为：\n```\nif(typeof DUOSHUO !== 'undefined'){ //support 多说评论框\nif($(\".ds-thread\").length){\n    DUOSHUO.EmbedThread($('.ds-thread')[0]);\n}\nDUOSHUO.RecentComments($('.ds-recent-comments')[0]);\n}\n```\n这样虽然能够解决问题，但是会显示方面又会出现点小问题。可以加入下面css修复：\n```language\nspan.caption{\ndisplay: none;\n}\n```\n## 加入文章导航\n修改'/layout/_partical/article.ejs'文件\n```Html\n<article class=\"<%= item.layout %>\">\n  // ...\n  <div class=\"entry\">\n    <% if (item.excerpt && index){ %>\n      <%- item.excerpt %>\n    <% } else { %>\n      <% if (!index){ %>\n        // 插入文章导航\n        <%- partial('toc') %>\n      <% } %>\n      <%- item.content %>\n    <% } %>\n  </div>\n</article>\n```\n在'\\source\\css\\_partial\\article.styl'文件后添加：\n```language\n  .toc-article\n    float right\n     \n  #toc\n    background #eee\n    margin 0 0 10px 20px\n    padding 12px\n    line-height 18px\n    font-size 10px\n    strong\n      font-size 15px\n    ol\n      margin-top 5px\n      margin-left 0\n    .toc\n      padding 0\n      li\n        list-style-type none\n    .toc-child\n      padding-left 20px\n```\n这样，我们就能在写文章的时候添加`toc: true`来启动文章导航功能。\n###扩展：浮动式导航\n实现当页面滑动到下方时将文章导航浮动到屏幕右侧。\n\n在'\\layout\\_partial\\'里新建文件：`float_nav.ejs`\n```Html\n<div id=\"menu-nav\">\n\t<div id=\"title-nav\"><%= __('navigation') %><div>→</div>\n\t</div>\n\t<div id=\"content-nav\">\n\t\t<%- toc(item.content) %>\n\t</div>\n</div>\n<script>\n(function($, scrollSpeed, hiddenSpeed, fadeSpeed) {\n\tvar T = $('#toc');\n\tvar M = $('#menu-nav');\n\tvar C = $('#content-nav');\n\tvar Tx = T.position().top;\n\t$(window).scroll(function() {\n\t\tvar top = $(this).scrollTop();\n\t\tif (top >= Tx + 300) {\n\t\t\tM.stop().fadeIn(fadeSpeed);\n\t\t\tT.stop().fadeTo(fadeSpeed, 0);\n\t\t} else {\n\t\t\tM.stop().fadeOut(fadeSpeed);\n\t\t\tT.stop().fadeTo(fadeSpeed, 1);\n\t\t}\n\t});\n\n\t$('.toc-link').click(function(e) {\n\t\t//阻止默认跳转\n\t\te.preventDefault();\n\t\t//定义滚动动画\n\t\tvar scrollTarget = $('#' + $(this).children('.toc-text').first().text());\n\t\t$(\"html,body\").animate({\n\t\t\tscrollTop: scrollTarget.prev().offset().top\n\t\t}, scrollSpeed);\n\t});\n\tC.click(function(e) {\n\t\te.stopPropagation();\n\t});\n\tM.click(function() {\n\t\tC.toggle(hiddenSpeed, 'linear', function() {\n\t\t\tvar T = $('#title-nav div');\n\t\t\tT.text() == '←' ? T.text('→') : T.text('←');\n\t\t});\n\t});\n})(jQuery, 500, 200, 100);\n</script>\n```\n在'layout/_partial/article.ejs'中添加对其的引用：\n```Html\n<% if(!index && item.toc){ %>\n  <%- partial('float_nav') %>\n<% } %>\n```\n添加css样式：\n```language\nnavbcolor=rgba(100, 100, 100, 0.74)\n#menu-nav\n  position fixed;\n  display none;\n  cursor pointer;\n  z-index 150;\n  right 0;\n  top 20%;\n  box-shadow 0 0 5px rgba(0, 0, 0, 0.15);\n  color white;\n  background navbcolor;\n  #title-nav\n    display inline-block;\n    vertical-align middle;\n    width: 30px;\n    height: 100%;\n    font-size: 16px;\n    text-align: center;\n    padding: 10px 0;\n  #content-nav\n    display inline-block;\n    vertical-align middle;\n    white-space:nowrap;\n    border-left: 1px dashed #ccc;\n    box-sizing border-box;\n    padding 15px;\n    line-height 18px;\n    font-size 10px;\n    li\n      list-style-type none;\n      width 100%;\n      a\n        display block;\n        box-sizing border-box;\n        color #FFFFFF;\n        &:hover\n          background rgba(100, 100, 100, 1);\n      .toc-child a\n        padding-left 20px;\n```\n###添加\"返回顶部\"\n与上一节相似，在'layout/_widget/'中添加`totop.ejs`文件：\n```Html\n<div id=\"to-top\">↑</div>\n<script>\n(function($, scrollSpeed, fadeSpeed) {\n\tvar T = $('#to-top');\n\t$(window).scroll(function() {\n\t\tvar top = $(this).scrollTop();\n\t\tif (top >= 300) {\n\t\t\tT.stop().fadeIn(fadeSpeed);\n\t\t} else {\n\t\t\tT.stop().fadeOut(fadeSpeed);\n\t\t}\n\t});\n\tT.click(function() {\n\t\t$(\"html,body\").animate({\n\t\t\tscrollTop: 0\n\t\t}, scrollSpeed);\n\t});\n})(jQuery, 500, 200);\n</script>\n```\n在'lightum/_config.yml'中启用该挂件：\n```language\nwidgets:\n- totop\n```\n添加css样式：\n```language\n#to-top\n  background navbcolor;\n  position fixed;\n  display none;\n  z-index 200;\n  right 40px;\n  bottom 10%;\n  box-shadow 0 0 5px rgba(0, 0, 0, 0.15);\n  font-size 14px;\n  color white;\n  padding 5px 15px;\n  cursor pointer;\n  font-size 12px;\n  text-align center;\n  &:hover\n    background rgba(100,100,100,1);\n```\n\n\n##参考\n- [Hexo 主题修改:为博客实现更多功能](http://deffi.info/2014/10/03/Hexo-%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%8D%9A%E5%AE%A2%E5%AE%9E%E7%8E%B0%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD/)\n- [多说评论也玩圆角头像动画「自定义CSS:无压力小白级教程」](https://luolei.org/duoshuo-css/)\n- [Hexo 优化与定制(二)](http://lukang.me/2015/optimization-of-hexo-2.html)","slug":"hexo-lightum-enhance","published":1,"updated":"2015-03-01T04:22:54.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8nr001bwppv7p04ydbe","content":"<p>首先我使用的是由<a href=\"http://zipperary.com/\" target=\"_blank\" rel=\"external\">zippera</a>基于官方<a href=\"https://github.com/hexojs/hexo-theme-light\" target=\"_blank\" rel=\"external\">Light</a>主题改进而来的<a href=\"https://github.com/zippera/lightum\" target=\"_blank\" rel=\"external\">Lightum</a>主题,其他主题可能稍有出入。</p>\n<p>##速度优化<br>参考之前的文章：<a href=\"http://kevinsfork.info/2015/02/25/hexo-speedup-instantclick/\" target=\"_blank\" rel=\"external\">静态页面优化</a>。然后使用了<a href=\"https://github.com/gyk001/hexo-qiniu-sync\" target=\"_blank\" rel=\"external\">hexo-qiniu-sync</a>这个项目，将静态的图片以及css、js同步到了七牛云。（PS：主题模板中包含了两个不同版本的jquery，分别在head.ejs与after-footer.ejs中，随便删除一个。）</p>\n<p>对于处于body区域的script、style的引用尽可能的加入data-no-instant属性，避免InstantClick重复加载。</p>\n<p>##给instantclick加载进度条加上阴影效果<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#instantclick-bar</span>&#123;</div><div class=\"line\"><span class=\"attribute\">-webkit-box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">8px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.56);</div><div class=\"line\"><span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">8px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.56);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>##加入Swiftype搜索<br>去<a href=\"https://swiftype.com/\" target=\"_blank\" rel=\"external\">Swiftype</a>官网申请代码，然后修改search.ejs文件为：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"st-search-input\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"&lt;%= __('search') %&gt;\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n <a id=\"more\"></a>\n<p>更具体的指导具体可以参考这篇文章：<a href=\"http://lukang.me/2015/optimization-of-hexo-2.html\" target=\"_blank\" rel=\"external\">click here</a>。</p>\n<p>##改进多说评论框</p>\n<p>###添加data-thread-key等属性<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 多说评论框 start --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"&lt;%= page.path %&gt;\"</span> <span class=\"attr\">data-title</span>=<span class=\"string\">\"&lt;%= page.title %&gt;\"</span> <span class=\"attr\">data-url</span>=<span class=\"string\">\"&lt;%= page.permalink %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 多说评论框 end --&gt;</span></div></pre></td></tr></table></figure></p>\n<p>###美化多说评论框<br>进入多说评论的管理后台，将下面代码粘贴到‘设置-&gt;自定义CSS’中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">#ds-reset .ds-avatar img&#123;width:54px;height:54px;border-radius:27px;-webkit-border-radius:27px;-moz-border-radius:27px;box-shadow:inset 0 -1px 0 #3333sf;-webkit-box-shadow:inset 0 -1px 0 #3333sf;-webkit-transition:0.4s;-webkit-transition:-webkit-transform 0.4s ease-out;transition:transform 0.4s ease-out;-moz-transition:-moz-transform 0.4s ease-out;&#125;</div><div class=\"line\">#ds-reset .ds-avatar img:hover&#123;box-shadow:0 0 10px #fff;rgba(255,255,255,.6),inset 0 0 20px rgba(255,255,255,1);-webkit-box-shadow:0 0 10px #fff;rgba(255,255,255,.6),inset 0 0 20px rgba(255,255,255,1);transform:rotateZ(360deg);-webkit-transform:rotateZ(360deg);-moz-transform:rotateZ(360deg);&#125;</div><div class=\"line\">p.ds-powered-by,#ds-sync-checkbox,.ds-sync label&#123;display:none!important;&#125;</div><div class=\"line\">#ds-reset .ds-rounded-top&#123;-webkit-border-top-right-radius:0px;-webkit-border-top-left-radius:0px;border-top-right-radius:0px;border-top-left-radius:0px;&#125;</div><div class=\"line\">#ds-thread #ds-reset .ds-textarea-wrapper&#123;background:#fff;border:0;margin-bottom:20px;padding-right:0px;&#125;</div><div class=\"line\">#ds-thread #ds-reset .ds-textarea-wrapper textarea&#123;min-height:80px;border:1px solid #ccc;padding:10px;-webkit-appearance:none;border-radius:0;background-color:#FFFFFF;border-color:#cccccc;box-shadow:inset 0 1px 2px rgba(0,0,0,0.1);color:rgba(0,0,0,0.75);-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-transition:border-color 0.15s linear,background 0.15s linear;-moz-transition:border-color 0.15s linear,background 0.15s linear;-ms-transition:border-color 0.15s linear,background 0.15s linear;-o-transition:border-color 0.15s linear,background 0.15s linear;transition:border-color 0.15s linear,background 0.15s linear;&#125;</div><div class=\"line\">#ds-thread #ds-reset .ds-textarea-wrapper textarea:focus&#123;border-color:#999999;background:#fafafa;outline:none;&#125;</div><div class=\"line\">#ds-thread #ds-reset .ds-post-options&#123;border-bottom-left-radius:0px;-webkit-border-bottom-left-radius:0px;border:none;background:none!important;&#125;</div><div class=\"line\">#ds-thread #ds-reset .ds-post-button&#123;border-bottom-right-radius:0px;-webkit-border-bottom-right-radius:0px;&#125;</div><div class=\"line\">#ds-reset .ds-textarea-wrapper textarea:focus&#123;border-color:#66afe9;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);&#125;</div><div class=\"line\">#ds-thread #ds-reset .ds-post-button&#123;background-image:none;text-shadow:none;border:none;font-weight:normal;line-height:normal;position:absolute;-webkit-appearance:button;-moz-appearance:button;background-color:#008CBA;border-color:#007095;color:#FFFFFF;transition:background-color 300ms ease-out;&#125;</div><div class=\"line\">#ds-thread #ds-reset .ds-post-button:hover,#ds-thread #ds-reset .ds-post-button:focus&#123;background-color:#007095;color:#FFFFFF;&#125;</div></pre></td></tr></table></figure></p>\n<p>##加入多说最新评论<br>修改’theme/lightum/_config.yml’文件，在widgets下面添加<code>- recent_comments</code>项。<br>在主题文件的’theme/lightum/layout/_widget’目录中新建recent_comments.ejs文件，并放入如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;widget tag&quot;&gt;</div><div class=\"line\">&lt;h3 class=&quot;title&quot;&gt;&lt;%= __(&apos;recent_comments&apos;)&lt;/h3&gt;</div><div class=\"line\">&lt;div class=&quot;entry&quot;&gt;</div><div class=\"line\">&lt;!-- 多说最新评论 start --&gt;</div><div class=\"line\">    &lt;div class=&quot;ds-recent-comments&quot; data-num-items=&quot;5&quot; data-show-avatars=&quot;1&quot; data-show-time=&quot;1&quot; data-show-title=&quot;1&quot; data-show-admin=&quot;1&quot; data-excerpt-length=&quot;70&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;!-- 多说最新评论 end --&gt;</div><div class=\"line\">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</div><div class=\"line\">..........</div><div class=\"line\">&lt;!-- 多说公共JS代码 end --&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>然后在’/languages/zh-CN.yml’文件添加翻译：<code>recent_comments: 最新评论</code></p>\n<p>最后，原来的评论样式不太符合lightum主题，可以在’/source/css/_partial’里建立一个recent_comment.styl文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.ds-recent-comments</div><div class=\"line\">  li.ds-comment</div><div class=\"line\">    &amp;:first-child</div><div class=\"line\">      border-top none !important</div></pre></td></tr></table></figure></p>\n<p>然后在/theme/lightum/source/css/style中将之包括进来：<code>@import &#39;_partial/recent_comments&#39;</code></p>\n<p>多说的这个插件同样不兼容于instantclick。我们可以在这篇文章的基础上解决：<a href=\"/2015/02/25/hexo-speedup-instantclick/\">click here</a>:</p>\n<ul>\n<li>将多说的公共JS放入head或加入’data-no-instant’属性放入body中，并删除recent.ejs与comment.ejs中重复的JS。</li>\n<li>修改change事件中的代码为：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(typeof DUOSHUO !== &apos;undefined&apos;)&#123; //support 多说评论框</div><div class=\"line\">if($(&quot;.ds-thread&quot;).length)&#123;</div><div class=\"line\">    DUOSHUO.EmbedThread($(&apos;.ds-thread&apos;)[0]);</div><div class=\"line\">&#125;</div><div class=\"line\">DUOSHUO.RecentComments($(&apos;.ds-recent-comments&apos;)[0]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样虽然能够解决问题，但是会显示方面又会出现点小问题。可以加入下面css修复：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">span.caption&#123;</div><div class=\"line\">display: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"加入文章导航\"><a href=\"#加入文章导航\" class=\"headerlink\" title=\"加入文章导航\"></a>加入文章导航</h2><p>修改’/layout/_partical/article.ejs’文件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"&lt;%= item.layout %&gt;\"</span>&gt;</span></div><div class=\"line\">  // ...</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"entry\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (<span class=\"attr\">item.excerpt</span> &amp;&amp; <span class=\"attr\">index</span>)&#123; %&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">item.excerpt</span> %&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; <span class=\"attr\">else</span> &#123; %&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (!<span class=\"attr\">index</span>)&#123; %&gt;</span></div><div class=\"line\">        // 插入文章导航</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">toc</span>') %&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">item.content</span> %&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在’\\source\\css_partial\\article.styl’文件后添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">.toc-article</div><div class=\"line\">  float right</div><div class=\"line\">   </div><div class=\"line\">#toc</div><div class=\"line\">  background #eee</div><div class=\"line\">  margin 0 0 10px 20px</div><div class=\"line\">  padding 12px</div><div class=\"line\">  line-height 18px</div><div class=\"line\">  font-size 10px</div><div class=\"line\">  strong</div><div class=\"line\">    font-size 15px</div><div class=\"line\">  ol</div><div class=\"line\">    margin-top 5px</div><div class=\"line\">    margin-left 0</div><div class=\"line\">  .toc</div><div class=\"line\">    padding 0</div><div class=\"line\">    li</div><div class=\"line\">      list-style-type none</div><div class=\"line\">  .toc-child</div><div class=\"line\">    padding-left 20px</div></pre></td></tr></table></figure></p>\n<p>这样，我们就能在写文章的时候添加<code>toc: true</code>来启动文章导航功能。</p>\n<p>###扩展：浮动式导航<br>实现当页面滑动到下方时将文章导航浮动到屏幕右侧。</p>\n<p>在’\\layout_partial\\’里新建文件：<code>float_nav.ejs</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"menu-nav\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"title-nav\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">__</span>('<span class=\"attr\">navigation</span>') %&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>→<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content-nav\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">toc</span>(<span class=\"attr\">item.content</span>) %&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$, scrollSpeed, hiddenSpeed, fadeSpeed</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> T = $(<span class=\"string\">'#toc'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> M = $(<span class=\"string\">'#menu-nav'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> C = $(<span class=\"string\">'#content-nav'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> Tx = T.position().top;</div><div class=\"line\">\t$(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> top = $(<span class=\"keyword\">this</span>).scrollTop();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (top &gt;= Tx + <span class=\"number\">300</span>) &#123;</div><div class=\"line\">\t\t\tM.stop().fadeIn(fadeSpeed);</div><div class=\"line\">\t\t\tT.stop().fadeTo(fadeSpeed, <span class=\"number\">0</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tM.stop().fadeOut(fadeSpeed);</div><div class=\"line\">\t\t\tT.stop().fadeTo(fadeSpeed, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t$(<span class=\"string\">'.toc-link'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//阻止默认跳转</span></div><div class=\"line\">\t\te.preventDefault();</div><div class=\"line\">\t\t<span class=\"comment\">//定义滚动动画</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> scrollTarget = $(<span class=\"string\">'#'</span> + $(<span class=\"keyword\">this</span>).children(<span class=\"string\">'.toc-text'</span>).first().text());</div><div class=\"line\">\t\t$(<span class=\"string\">\"html,body\"</span>).animate(&#123;</div><div class=\"line\">\t\t\tscrollTop: scrollTarget.prev().offset().top</div><div class=\"line\">\t\t&#125;, scrollSpeed);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\tC.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">\t\te.stopPropagation();</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\tM.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tC.toggle(hiddenSpeed, <span class=\"string\">'linear'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> T = $(<span class=\"string\">'#title-nav div'</span>);</div><div class=\"line\">\t\t\tT.text() == <span class=\"string\">'←'</span> ? T.text(<span class=\"string\">'→'</span>) : T.text(<span class=\"string\">'←'</span>);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;)(jQuery, <span class=\"number\">500</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在’layout/_partial/article.ejs’中添加对其的引用：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(!<span class=\"attr\">index</span> &amp;&amp; <span class=\"attr\">item.toc</span>)&#123; %&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">float_nav</span>') %&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>\n<p>添加css样式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">navbcolor=rgba(100, 100, 100, 0.74)</div><div class=\"line\">#menu-nav</div><div class=\"line\">  position fixed;</div><div class=\"line\">  display none;</div><div class=\"line\">  cursor pointer;</div><div class=\"line\">  z-index 150;</div><div class=\"line\">  right 0;</div><div class=\"line\">  top 20%;</div><div class=\"line\">  box-shadow 0 0 5px rgba(0, 0, 0, 0.15);</div><div class=\"line\">  color white;</div><div class=\"line\">  background navbcolor;</div><div class=\"line\">  #title-nav</div><div class=\"line\">    display inline-block;</div><div class=\"line\">    vertical-align middle;</div><div class=\"line\">    width: 30px;</div><div class=\"line\">    height: 100%;</div><div class=\"line\">    font-size: 16px;</div><div class=\"line\">    text-align: center;</div><div class=\"line\">    padding: 10px 0;</div><div class=\"line\">  #content-nav</div><div class=\"line\">    display inline-block;</div><div class=\"line\">    vertical-align middle;</div><div class=\"line\">    white-space:nowrap;</div><div class=\"line\">    border-left: 1px dashed #ccc;</div><div class=\"line\">    box-sizing border-box;</div><div class=\"line\">    padding 15px;</div><div class=\"line\">    line-height 18px;</div><div class=\"line\">    font-size 10px;</div><div class=\"line\">    li</div><div class=\"line\">      list-style-type none;</div><div class=\"line\">      width 100%;</div><div class=\"line\">      a</div><div class=\"line\">        display block;</div><div class=\"line\">        box-sizing border-box;</div><div class=\"line\">        color #FFFFFF;</div><div class=\"line\">        &amp;:hover</div><div class=\"line\">          background rgba(100, 100, 100, 1);</div><div class=\"line\">      .toc-child a</div><div class=\"line\">        padding-left 20px;</div></pre></td></tr></table></figure></p>\n<p>###添加”返回顶部”<br>与上一节相似，在’layout/_widget/‘中添加<code>totop.ejs</code>文件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"to-top\"</span>&gt;</span>↑<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$, scrollSpeed, fadeSpeed</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> T = $(<span class=\"string\">'#to-top'</span>);</div><div class=\"line\">\t$(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> top = $(<span class=\"keyword\">this</span>).scrollTop();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (top &gt;= <span class=\"number\">300</span>) &#123;</div><div class=\"line\">\t\t\tT.stop().fadeIn(fadeSpeed);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tT.stop().fadeOut(fadeSpeed);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\tT.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t$(<span class=\"string\">\"html,body\"</span>).animate(&#123;</div><div class=\"line\">\t\t\tscrollTop: <span class=\"number\">0</span></div><div class=\"line\">\t\t&#125;, scrollSpeed);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;)(jQuery, <span class=\"number\">500</span>, <span class=\"number\">200</span>);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在’lightum/_config.yml’中启用该挂件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">widgets:</div><div class=\"line\">- totop</div></pre></td></tr></table></figure></p>\n<p>添加css样式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">#to-top</div><div class=\"line\">  background navbcolor;</div><div class=\"line\">  position fixed;</div><div class=\"line\">  display none;</div><div class=\"line\">  z-index 200;</div><div class=\"line\">  right 40px;</div><div class=\"line\">  bottom 10%;</div><div class=\"line\">  box-shadow 0 0 5px rgba(0, 0, 0, 0.15);</div><div class=\"line\">  font-size 14px;</div><div class=\"line\">  color white;</div><div class=\"line\">  padding 5px 15px;</div><div class=\"line\">  cursor pointer;</div><div class=\"line\">  font-size 12px;</div><div class=\"line\">  text-align center;</div><div class=\"line\">  &amp;:hover</div><div class=\"line\">    background rgba(100,100,100,1);</div></pre></td></tr></table></figure></p>\n<p>##参考</p>\n<ul>\n<li><a href=\"http://deffi.info/2014/10/03/Hexo-%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%8D%9A%E5%AE%A2%E5%AE%9E%E7%8E%B0%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD/\" target=\"_blank\" rel=\"external\">Hexo 主题修改:为博客实现更多功能</a></li>\n<li><a href=\"https://luolei.org/duoshuo-css/\" target=\"_blank\" rel=\"external\">多说评论也玩圆角头像动画「自定义CSS:无压力小白级教程」</a></li>\n<li><a href=\"http://lukang.me/2015/optimization-of-hexo-2.html\" target=\"_blank\" rel=\"external\">Hexo 优化与定制(二)</a></li>\n</ul>\n","excerpt":"<p>首先我使用的是由<a href=\"http://zipperary.com/\">zippera</a>基于官方<a href=\"https://github.com/hexojs/hexo-theme-light\">Light</a>主题改进而来的<a href=\"https://github.com/zippera/lightum\">Lightum</a>主题,其他主题可能稍有出入。</p>\n<p>##速度优化<br>参考之前的文章：<a href=\"http://kevinsfork.info/2015/02/25/hexo-speedup-instantclick/\">静态页面优化</a>。然后使用了<a href=\"https://github.com/gyk001/hexo-qiniu-sync\">hexo-qiniu-sync</a>这个项目，将静态的图片以及css、js同步到了七牛云。（PS：主题模板中包含了两个不同版本的jquery，分别在head.ejs与after-footer.ejs中，随便删除一个。）</p>\n<p>对于处于body区域的script、style的引用尽可能的加入data-no-instant属性，避免InstantClick重复加载。</p>\n<p>##给instantclick加载进度条加上阴影效果<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#instantclick-bar</span>&#123;</div><div class=\"line\"><span class=\"attribute\">-webkit-box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">8px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.56);</div><div class=\"line\"><span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">8px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.56);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>##加入Swiftype搜索<br>去<a href=\"https://swiftype.com/\">Swiftype</a>官网申请代码，然后修改search.ejs文件为：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"st-search-input\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"&lt;%= __('search') %&gt;\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>","more":"<p>更具体的指导具体可以参考这篇文章：<a href=\"http://lukang.me/2015/optimization-of-hexo-2.html\">click here</a>。</p>\n<p>##改进多说评论框</p>\n<p>###添加data-thread-key等属性<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 多说评论框 start --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"&lt;%= page.path %&gt;\"</span> <span class=\"attr\">data-title</span>=<span class=\"string\">\"&lt;%= page.title %&gt;\"</span> <span class=\"attr\">data-url</span>=<span class=\"string\">\"&lt;%= page.permalink %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 多说评论框 end --&gt;</span></div></pre></td></tr></table></figure></p>\n<p>###美化多说评论框<br>进入多说评论的管理后台，将下面代码粘贴到‘设置-&gt;自定义CSS’中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">#ds-reset .ds-avatar img&#123;width:54px;height:54px;border-radius:27px;-webkit-border-radius:27px;-moz-border-radius:27px;box-shadow:inset 0 -1px 0 #3333sf;-webkit-box-shadow:inset 0 -1px 0 #3333sf;-webkit-transition:0.4s;-webkit-transition:-webkit-transform 0.4s ease-out;transition:transform 0.4s ease-out;-moz-transition:-moz-transform 0.4s ease-out;&#125;</div><div class=\"line\">#ds-reset .ds-avatar img:hover&#123;box-shadow:0 0 10px #fff;rgba(255,255,255,.6),inset 0 0 20px rgba(255,255,255,1);-webkit-box-shadow:0 0 10px #fff;rgba(255,255,255,.6),inset 0 0 20px rgba(255,255,255,1);transform:rotateZ(360deg);-webkit-transform:rotateZ(360deg);-moz-transform:rotateZ(360deg);&#125;</div><div class=\"line\">p.ds-powered-by,#ds-sync-checkbox,.ds-sync label&#123;display:none!important;&#125;</div><div class=\"line\">#ds-reset .ds-rounded-top&#123;-webkit-border-top-right-radius:0px;-webkit-border-top-left-radius:0px;border-top-right-radius:0px;border-top-left-radius:0px;&#125;</div><div class=\"line\">#ds-thread #ds-reset .ds-textarea-wrapper&#123;background:#fff;border:0;margin-bottom:20px;padding-right:0px;&#125;</div><div class=\"line\">#ds-thread #ds-reset .ds-textarea-wrapper textarea&#123;min-height:80px;border:1px solid #ccc;padding:10px;-webkit-appearance:none;border-radius:0;background-color:#FFFFFF;border-color:#cccccc;box-shadow:inset 0 1px 2px rgba(0,0,0,0.1);color:rgba(0,0,0,0.75);-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-transition:border-color 0.15s linear,background 0.15s linear;-moz-transition:border-color 0.15s linear,background 0.15s linear;-ms-transition:border-color 0.15s linear,background 0.15s linear;-o-transition:border-color 0.15s linear,background 0.15s linear;transition:border-color 0.15s linear,background 0.15s linear;&#125;</div><div class=\"line\">#ds-thread #ds-reset .ds-textarea-wrapper textarea:focus&#123;border-color:#999999;background:#fafafa;outline:none;&#125;</div><div class=\"line\">#ds-thread #ds-reset .ds-post-options&#123;border-bottom-left-radius:0px;-webkit-border-bottom-left-radius:0px;border:none;background:none!important;&#125;</div><div class=\"line\">#ds-thread #ds-reset .ds-post-button&#123;border-bottom-right-radius:0px;-webkit-border-bottom-right-radius:0px;&#125;</div><div class=\"line\">#ds-reset .ds-textarea-wrapper textarea:focus&#123;border-color:#66afe9;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);&#125;</div><div class=\"line\">#ds-thread #ds-reset .ds-post-button&#123;background-image:none;text-shadow:none;border:none;font-weight:normal;line-height:normal;position:absolute;-webkit-appearance:button;-moz-appearance:button;background-color:#008CBA;border-color:#007095;color:#FFFFFF;transition:background-color 300ms ease-out;&#125;</div><div class=\"line\">#ds-thread #ds-reset .ds-post-button:hover,#ds-thread #ds-reset .ds-post-button:focus&#123;background-color:#007095;color:#FFFFFF;&#125;</div></pre></td></tr></table></figure></p>\n<p>##加入多说最新评论<br>修改’theme/lightum/_config.yml’文件，在widgets下面添加<code>- recent_comments</code>项。<br>在主题文件的’theme/lightum/layout/_widget’目录中新建recent_comments.ejs文件，并放入如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;widget tag&quot;&gt;</div><div class=\"line\">&lt;h3 class=&quot;title&quot;&gt;&lt;%= __(&apos;recent_comments&apos;)&lt;/h3&gt;</div><div class=\"line\">&lt;div class=&quot;entry&quot;&gt;</div><div class=\"line\">&lt;!-- 多说最新评论 start --&gt;</div><div class=\"line\">    &lt;div class=&quot;ds-recent-comments&quot; data-num-items=&quot;5&quot; data-show-avatars=&quot;1&quot; data-show-time=&quot;1&quot; data-show-title=&quot;1&quot; data-show-admin=&quot;1&quot; data-excerpt-length=&quot;70&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;!-- 多说最新评论 end --&gt;</div><div class=\"line\">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</div><div class=\"line\">..........</div><div class=\"line\">&lt;!-- 多说公共JS代码 end --&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>然后在’/languages/zh-CN.yml’文件添加翻译：<code>recent_comments: 最新评论</code></p>\n<p>最后，原来的评论样式不太符合lightum主题，可以在’/source/css/_partial’里建立一个recent_comment.styl文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.ds-recent-comments</div><div class=\"line\">  li.ds-comment</div><div class=\"line\">    &amp;:first-child</div><div class=\"line\">      border-top none !important</div></pre></td></tr></table></figure></p>\n<p>然后在/theme/lightum/source/css/style中将之包括进来：<code>@import &#39;_partial/recent_comments&#39;</code></p>\n<p>多说的这个插件同样不兼容于instantclick。我们可以在这篇文章的基础上解决：<a href=\"/2015/02/25/hexo-speedup-instantclick/\">click here</a>:</p>\n<ul>\n<li>将多说的公共JS放入head或加入’data-no-instant’属性放入body中，并删除recent.ejs与comment.ejs中重复的JS。</li>\n<li>修改change事件中的代码为：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(typeof DUOSHUO !== &apos;undefined&apos;)&#123; //support 多说评论框</div><div class=\"line\">if($(&quot;.ds-thread&quot;).length)&#123;</div><div class=\"line\">    DUOSHUO.EmbedThread($(&apos;.ds-thread&apos;)[0]);</div><div class=\"line\">&#125;</div><div class=\"line\">DUOSHUO.RecentComments($(&apos;.ds-recent-comments&apos;)[0]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样虽然能够解决问题，但是会显示方面又会出现点小问题。可以加入下面css修复：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">span.caption&#123;</div><div class=\"line\">display: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"加入文章导航\"><a href=\"#加入文章导航\" class=\"headerlink\" title=\"加入文章导航\"></a>加入文章导航</h2><p>修改’/layout/_partical/article.ejs’文件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"&lt;%= item.layout %&gt;\"</span>&gt;</span></div><div class=\"line\">  // ...</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"entry\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (<span class=\"attr\">item.excerpt</span> &amp;&amp; <span class=\"attr\">index</span>)&#123; %&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">item.excerpt</span> %&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; <span class=\"attr\">else</span> &#123; %&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (!<span class=\"attr\">index</span>)&#123; %&gt;</span></div><div class=\"line\">        // 插入文章导航</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">toc</span>') %&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">item.content</span> %&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在’\\source\\css_partial\\article.styl’文件后添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">.toc-article</div><div class=\"line\">  float right</div><div class=\"line\">   </div><div class=\"line\">#toc</div><div class=\"line\">  background #eee</div><div class=\"line\">  margin 0 0 10px 20px</div><div class=\"line\">  padding 12px</div><div class=\"line\">  line-height 18px</div><div class=\"line\">  font-size 10px</div><div class=\"line\">  strong</div><div class=\"line\">    font-size 15px</div><div class=\"line\">  ol</div><div class=\"line\">    margin-top 5px</div><div class=\"line\">    margin-left 0</div><div class=\"line\">  .toc</div><div class=\"line\">    padding 0</div><div class=\"line\">    li</div><div class=\"line\">      list-style-type none</div><div class=\"line\">  .toc-child</div><div class=\"line\">    padding-left 20px</div></pre></td></tr></table></figure></p>\n<p>这样，我们就能在写文章的时候添加<code>toc: true</code>来启动文章导航功能。</p>\n<p>###扩展：浮动式导航<br>实现当页面滑动到下方时将文章导航浮动到屏幕右侧。</p>\n<p>在’\\layout_partial\\’里新建文件：<code>float_nav.ejs</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"menu-nav\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"title-nav\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">__</span>('<span class=\"attr\">navigation</span>') %&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>→<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content-nav\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">toc</span>(<span class=\"attr\">item.content</span>) %&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$, scrollSpeed, hiddenSpeed, fadeSpeed</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> T = $(<span class=\"string\">'#toc'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> M = $(<span class=\"string\">'#menu-nav'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> C = $(<span class=\"string\">'#content-nav'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> Tx = T.position().top;</div><div class=\"line\">\t$(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> top = $(<span class=\"keyword\">this</span>).scrollTop();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (top &gt;= Tx + <span class=\"number\">300</span>) &#123;</div><div class=\"line\">\t\t\tM.stop().fadeIn(fadeSpeed);</div><div class=\"line\">\t\t\tT.stop().fadeTo(fadeSpeed, <span class=\"number\">0</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tM.stop().fadeOut(fadeSpeed);</div><div class=\"line\">\t\t\tT.stop().fadeTo(fadeSpeed, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t$(<span class=\"string\">'.toc-link'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//阻止默认跳转</span></div><div class=\"line\">\t\te.preventDefault();</div><div class=\"line\">\t\t<span class=\"comment\">//定义滚动动画</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> scrollTarget = $(<span class=\"string\">'#'</span> + $(<span class=\"keyword\">this</span>).children(<span class=\"string\">'.toc-text'</span>).first().text());</div><div class=\"line\">\t\t$(<span class=\"string\">\"html,body\"</span>).animate(&#123;</div><div class=\"line\">\t\t\tscrollTop: scrollTarget.prev().offset().top</div><div class=\"line\">\t\t&#125;, scrollSpeed);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\tC.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">\t\te.stopPropagation();</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\tM.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tC.toggle(hiddenSpeed, <span class=\"string\">'linear'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> T = $(<span class=\"string\">'#title-nav div'</span>);</div><div class=\"line\">\t\t\tT.text() == <span class=\"string\">'←'</span> ? T.text(<span class=\"string\">'→'</span>) : T.text(<span class=\"string\">'←'</span>);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;)(jQuery, <span class=\"number\">500</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在’layout/_partial/article.ejs’中添加对其的引用：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(!<span class=\"attr\">index</span> &amp;&amp; <span class=\"attr\">item.toc</span>)&#123; %&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">float_nav</span>') %&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>\n<p>添加css样式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">navbcolor=rgba(100, 100, 100, 0.74)</div><div class=\"line\">#menu-nav</div><div class=\"line\">  position fixed;</div><div class=\"line\">  display none;</div><div class=\"line\">  cursor pointer;</div><div class=\"line\">  z-index 150;</div><div class=\"line\">  right 0;</div><div class=\"line\">  top 20%;</div><div class=\"line\">  box-shadow 0 0 5px rgba(0, 0, 0, 0.15);</div><div class=\"line\">  color white;</div><div class=\"line\">  background navbcolor;</div><div class=\"line\">  #title-nav</div><div class=\"line\">    display inline-block;</div><div class=\"line\">    vertical-align middle;</div><div class=\"line\">    width: 30px;</div><div class=\"line\">    height: 100%;</div><div class=\"line\">    font-size: 16px;</div><div class=\"line\">    text-align: center;</div><div class=\"line\">    padding: 10px 0;</div><div class=\"line\">  #content-nav</div><div class=\"line\">    display inline-block;</div><div class=\"line\">    vertical-align middle;</div><div class=\"line\">    white-space:nowrap;</div><div class=\"line\">    border-left: 1px dashed #ccc;</div><div class=\"line\">    box-sizing border-box;</div><div class=\"line\">    padding 15px;</div><div class=\"line\">    line-height 18px;</div><div class=\"line\">    font-size 10px;</div><div class=\"line\">    li</div><div class=\"line\">      list-style-type none;</div><div class=\"line\">      width 100%;</div><div class=\"line\">      a</div><div class=\"line\">        display block;</div><div class=\"line\">        box-sizing border-box;</div><div class=\"line\">        color #FFFFFF;</div><div class=\"line\">        &amp;:hover</div><div class=\"line\">          background rgba(100, 100, 100, 1);</div><div class=\"line\">      .toc-child a</div><div class=\"line\">        padding-left 20px;</div></pre></td></tr></table></figure></p>\n<p>###添加”返回顶部”<br>与上一节相似，在’layout/_widget/‘中添加<code>totop.ejs</code>文件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"to-top\"</span>&gt;</span>↑<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$, scrollSpeed, fadeSpeed</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> T = $(<span class=\"string\">'#to-top'</span>);</div><div class=\"line\">\t$(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> top = $(<span class=\"keyword\">this</span>).scrollTop();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (top &gt;= <span class=\"number\">300</span>) &#123;</div><div class=\"line\">\t\t\tT.stop().fadeIn(fadeSpeed);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tT.stop().fadeOut(fadeSpeed);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\tT.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t$(<span class=\"string\">\"html,body\"</span>).animate(&#123;</div><div class=\"line\">\t\t\tscrollTop: <span class=\"number\">0</span></div><div class=\"line\">\t\t&#125;, scrollSpeed);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;)(jQuery, <span class=\"number\">500</span>, <span class=\"number\">200</span>);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在’lightum/_config.yml’中启用该挂件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">widgets:</div><div class=\"line\">- totop</div></pre></td></tr></table></figure></p>\n<p>添加css样式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">#to-top</div><div class=\"line\">  background navbcolor;</div><div class=\"line\">  position fixed;</div><div class=\"line\">  display none;</div><div class=\"line\">  z-index 200;</div><div class=\"line\">  right 40px;</div><div class=\"line\">  bottom 10%;</div><div class=\"line\">  box-shadow 0 0 5px rgba(0, 0, 0, 0.15);</div><div class=\"line\">  font-size 14px;</div><div class=\"line\">  color white;</div><div class=\"line\">  padding 5px 15px;</div><div class=\"line\">  cursor pointer;</div><div class=\"line\">  font-size 12px;</div><div class=\"line\">  text-align center;</div><div class=\"line\">  &amp;:hover</div><div class=\"line\">    background rgba(100,100,100,1);</div></pre></td></tr></table></figure></p>\n<p>##参考</p>\n<ul>\n<li><a href=\"http://deffi.info/2014/10/03/Hexo-%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%8D%9A%E5%AE%A2%E5%AE%9E%E7%8E%B0%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD/\">Hexo 主题修改:为博客实现更多功能</a></li>\n<li><a href=\"https://luolei.org/duoshuo-css/\">多说评论也玩圆角头像动画「自定义CSS:无压力小白级教程」</a></li>\n<li><a href=\"http://lukang.me/2015/optimization-of-hexo-2.html\">Hexo 优化与定制(二)</a></li>\n</ul>"},{"title":"KDE4的配置参考","id":"114","date":"2014-10-31T12:35:05.000Z","_content":"\n西北工大回来后,时间又充裕了,所以又开始了折腾KDE。\n\n话说KDE的渲染阴影等效果非常接近MacBook。先放几张图：\n\n[![抓图14](http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图14-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图14.png)\n<!--more-->\n[![抓图15](http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图15-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图15.png) [![抓图18](http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图18-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图18.png)\n\n下面说一下，我的配置过程：\n\n1.  **发行版：**\n 我的发行版是Arch，没有Arch强大的AUR，很多桌面的配件很难装上。\n2.  **主题：**\n 我的plasma主题是Helium与dynamo主题混合而成。标题栏主题是Qtcurve，图标主题是dynamo与flattr混合而成，鼠标主题是Breeze。应用程序主题是Qtcurve，配色是Breeze。这些都可以到[这里下载](http://pan.baidu.com/s/1jGLy3n4)。先安装qtcurve再将下载下来的文件解压并覆盖～/.kde4/share/即可。注意，Qtcurve的配置方案是Breeze，并且在窗口管理器中设置边框大小是无侧边框。\n3.  **全局菜单：**\n 全局菜单可以先加archlinuxcn源，然后依次用yaourt安装appmenu-qt,appmenu-qt5,appmenu-gtk,kdeplasma-applets-menubar。完成之后在面板上添加刚安装的部件再打开“系统设置&gt;应用程序外观&gt;风格”然后选择微调标签，修改“菜单栏风格”为“仅导出”就能有全局菜单了。\n4.  **最大化隐藏菜单栏：**\n 最大化隐藏菜单栏可以直接在qtCurve中配置，依然在“窗口管理器”中，勾选“最大化窗口无边框”复选框即可。\n5.  **最大化上面板显示窗口控制按钮：**（最后一张图鼠标所指的地方）\n 在AUR中安装kdeplasma-applets-kwin-button-improved，然后在面板上重复三次添加这个部件，分别设置为最小化（iconify），最大化/回复（maximize/restore）和关闭（close）就行了。\n","source":"_posts/kde4-config.md","raw":"title: KDE4的配置参考\ncategories:\n  - KDE\nid: 114\ndate: 2014-10-31 20:35:05\ntags: [linux,DE/WM,美化]\n---\n\n西北工大回来后,时间又充裕了,所以又开始了折腾KDE。\n\n话说KDE的渲染阴影等效果非常接近MacBook。先放几张图：\n\n[![抓图14](http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图14-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图14.png)\n<!--more-->\n[![抓图15](http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图15-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图15.png) [![抓图18](http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图18-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图18.png)\n\n下面说一下，我的配置过程：\n\n1.  **发行版：**\n 我的发行版是Arch，没有Arch强大的AUR，很多桌面的配件很难装上。\n2.  **主题：**\n 我的plasma主题是Helium与dynamo主题混合而成。标题栏主题是Qtcurve，图标主题是dynamo与flattr混合而成，鼠标主题是Breeze。应用程序主题是Qtcurve，配色是Breeze。这些都可以到[这里下载](http://pan.baidu.com/s/1jGLy3n4)。先安装qtcurve再将下载下来的文件解压并覆盖～/.kde4/share/即可。注意，Qtcurve的配置方案是Breeze，并且在窗口管理器中设置边框大小是无侧边框。\n3.  **全局菜单：**\n 全局菜单可以先加archlinuxcn源，然后依次用yaourt安装appmenu-qt,appmenu-qt5,appmenu-gtk,kdeplasma-applets-menubar。完成之后在面板上添加刚安装的部件再打开“系统设置&gt;应用程序外观&gt;风格”然后选择微调标签，修改“菜单栏风格”为“仅导出”就能有全局菜单了。\n4.  **最大化隐藏菜单栏：**\n 最大化隐藏菜单栏可以直接在qtCurve中配置，依然在“窗口管理器”中，勾选“最大化窗口无边框”复选框即可。\n5.  **最大化上面板显示窗口控制按钮：**（最后一张图鼠标所指的地方）\n 在AUR中安装kdeplasma-applets-kwin-button-improved，然后在面板上重复三次添加这个部件，分别设置为最小化（iconify），最大化/回复（maximize/restore）和关闭（close）就行了。\n","slug":"kde4-config","published":1,"updated":"2015-02-26T03:09:48.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8ns001dwppva3flf6k2","content":"<p>西北工大回来后,时间又充裕了,所以又开始了折腾KDE。</p>\n<p>话说KDE的渲染阴影等效果非常接近MacBook。先放几张图：</p>\n<p><a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图14.png\" target=\"_blank\" rel=\"external\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图14-1024x575.png\" alt=\"抓图14\"></a><br><a id=\"more\"></a><br><a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图15.png\" target=\"_blank\" rel=\"external\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图15-1024x575.png\" alt=\"抓图15\"></a> <a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图18.png\" target=\"_blank\" rel=\"external\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图18-1024x575.png\" alt=\"抓图18\"></a></p>\n<p>下面说一下，我的配置过程：</p>\n<ol>\n<li><strong>发行版：</strong><br>我的发行版是Arch，没有Arch强大的AUR，很多桌面的配件很难装上。</li>\n<li><strong>主题：</strong><br>我的plasma主题是Helium与dynamo主题混合而成。标题栏主题是Qtcurve，图标主题是dynamo与flattr混合而成，鼠标主题是Breeze。应用程序主题是Qtcurve，配色是Breeze。这些都可以到<a href=\"http://pan.baidu.com/s/1jGLy3n4\" target=\"_blank\" rel=\"external\">这里下载</a>。先安装qtcurve再将下载下来的文件解压并覆盖～/.kde4/share/即可。注意，Qtcurve的配置方案是Breeze，并且在窗口管理器中设置边框大小是无侧边框。</li>\n<li><strong>全局菜单：</strong><br>全局菜单可以先加archlinuxcn源，然后依次用yaourt安装appmenu-qt,appmenu-qt5,appmenu-gtk,kdeplasma-applets-menubar。完成之后在面板上添加刚安装的部件再打开“系统设置&gt;应用程序外观&gt;风格”然后选择微调标签，修改“菜单栏风格”为“仅导出”就能有全局菜单了。</li>\n<li><strong>最大化隐藏菜单栏：</strong><br>最大化隐藏菜单栏可以直接在qtCurve中配置，依然在“窗口管理器”中，勾选“最大化窗口无边框”复选框即可。</li>\n<li><strong>最大化上面板显示窗口控制按钮：</strong>（最后一张图鼠标所指的地方）<br>在AUR中安装kdeplasma-applets-kwin-button-improved，然后在面板上重复三次添加这个部件，分别设置为最小化（iconify），最大化/回复（maximize/restore）和关闭（close）就行了。</li>\n</ol>\n","excerpt":"<p>西北工大回来后,时间又充裕了,所以又开始了折腾KDE。</p>\n<p>话说KDE的渲染阴影等效果非常接近MacBook。先放几张图：</p>\n<p><a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图14.png\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图14-1024x575.png\" alt=\"抓图14\"></a><br>","more":"<br><a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图15.png\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图15-1024x575.png\" alt=\"抓图15\"></a> <a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图18.png\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图18-1024x575.png\" alt=\"抓图18\"></a></p>\n<p>下面说一下，我的配置过程：</p>\n<ol>\n<li><strong>发行版：</strong><br>我的发行版是Arch，没有Arch强大的AUR，很多桌面的配件很难装上。</li>\n<li><strong>主题：</strong><br>我的plasma主题是Helium与dynamo主题混合而成。标题栏主题是Qtcurve，图标主题是dynamo与flattr混合而成，鼠标主题是Breeze。应用程序主题是Qtcurve，配色是Breeze。这些都可以到<a href=\"http://pan.baidu.com/s/1jGLy3n4\">这里下载</a>。先安装qtcurve再将下载下来的文件解压并覆盖～/.kde4/share/即可。注意，Qtcurve的配置方案是Breeze，并且在窗口管理器中设置边框大小是无侧边框。</li>\n<li><strong>全局菜单：</strong><br>全局菜单可以先加archlinuxcn源，然后依次用yaourt安装appmenu-qt,appmenu-qt5,appmenu-gtk,kdeplasma-applets-menubar。完成之后在面板上添加刚安装的部件再打开“系统设置&gt;应用程序外观&gt;风格”然后选择微调标签，修改“菜单栏风格”为“仅导出”就能有全局菜单了。</li>\n<li><strong>最大化隐藏菜单栏：</strong><br>最大化隐藏菜单栏可以直接在qtCurve中配置，依然在“窗口管理器”中，勾选“最大化窗口无边框”复选框即可。</li>\n<li><strong>最大化上面板显示窗口控制按钮：</strong>（最后一张图鼠标所指的地方）<br>在AUR中安装kdeplasma-applets-kwin-button-improved，然后在面板上重复三次添加这个部件，分别设置为最小化（iconify），最大化/回复（maximize/restore）和关闭（close）就行了。</li>\n</ol>"},{"title":"KDE的Mac向折腾指南","id":"157","date":"2014-12-07T04:45:53.000Z","_content":"\n\n\n惯例，先上图：\n\n[![logo9](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo9-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo9.png)\n<!--more-->\n[![logo5](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo5-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo5.png) [![logo6](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo6-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo6.png) [![logo7](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo7-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo7.png) [![logo8](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo8-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo8.png)\n\n首先，KDE的全局菜单可以参考我以前的文章《[KDE4的配置参考](http://kevinsfork.info/2014/10/31/kde4-e7-9a-84-e9-85-8d-e7-bd-ae-e5-8f-82-e8-80-83/)》。\n\n然后，Plasma的主题是AG-plasma，aurorae主题是Yoxydaze-light。这些可以去kde-look里找。\n\n底部的dock是plank，主题是ArHU，在deviantART中找到的。另外，plank上的图标是受gtk主题控制的，所以装numix-circle是最好不过的。\n\n我的apps文件可以在这里下载：[click here](http://pan.baidu.com/s/1hqGJDmk)\n\n~/.config/plank/dock1/settings文件：\n```language\n#This file auto-generated by Plank.\n#2014-12-06T09:47:52+0000\n\n[PlankDockPreferences]\n#Whether to show only windows of the current workspace.\nCurrentWorkspaceOnly=false\n#The size of dock icons (in pixels).\nIconSize=42\n#If 0, the dock won't hide. If 1, the dock intelligently hides. If 2, the dock auto-hides. If 3, the dock dodges active maximized windows.\nHideMode=0\n#Time (in ms) to wait before unhiding the dock.\nUnhideDelay=0\n#The monitor number for the dock. Use -1 to keep on the primary monitor.\nMonitor=-1\n#List of *.dockitem files on this dock. DO NOT MODIFY\nDockItems=plank.dockitem;;google-chrome.dockitem;;dolphin.dockitem;;juk.dockitem;;eclipse.dockitem;;chrome-pjkebmlmkppdjcdcilfcjdkifljollfd-Default.dockitem;;kate.dockitem;;gwenview.dockitem;;wps-office-wps.dockitem;;konsole.dockitem;;sublime_text_3.dockitem;;love-wallpaper.dockitem;;ksysguard.dockitem;;virtualbox.dockitem\n#The position for the dock on the monitor. If 0, left. If 1, right. If 2, top. If 3, bottom.\nPosition=3\n#The dock's position offset from center (in percent).\nOffset=0\n#The name of the dock's theme to use.\nTheme=ArHU\n#The alignment for the dock on the monitor's edge. If 0, panel-mode. If 1, left-aligned. If 2, right-aligned. If 3, centered.\nAlignment=3\n#The alignment of the items in this dock if panel-mode is used. If 1, left-aligned. If 2, right-aligned. If 3, centered.\nItemsAlignment=3\n#Whether to prevent drag'n'drop actions and lock items on the dock.\nLockItems=false\n#Whether to use pressure-based revealing of the dock if the support is available.\nPressureReveal=false\n#Whether to show only pinned applications. Useful for running more then one dock.\nPinnedOnly=true\n#Whether to automatically pin an application if it seems useful to do.\nAutoPinning=true\n```\n\n~/.local/share/plank/themes/ArHU/中的dock.theme和hover.theme文件分别是：\n\n```language\n\n#This file auto-generated by Plank.\n#2014-12-06T06:22:37+0000\n\n[PlankDrawingTheme]\n#The roundness of the top corners.\nTopRoundness=6\n#The roundness of the bottom corners.\nBottomRoundness=0\n#The thickness (in pixels) of lines drawn.\nLineWidth=0\n#The color (RGBA) of the outer stroke.\nOuterStrokeColor=0;;0;;0;;0\n#The starting color (RGBA) of the fill gradient.\nFillStartColor=255;;255;;255;;150\n#The ending color (RGBA) of the fill gradient.\nFillEndColor=255;;255;;255;;150\n#The color (RGBA) of the inner stroke.\nInnerStrokeColor=255;;255;;255;;255\n\n[PlankDrawingDockTheme]\n#The padding on the left/right dock edges, in tenths of a percent of IconSize.\nHorizPadding=0\n#The padding on the top dock edge, in tenths of a percent of IconSize.\nTopPadding=1\n#The padding on the bottom dock edge, in tenths of a percent of IconSize.\nBottomPadding=1\n#The padding between items on the dock, in tenths of a percent of IconSize.\nItemPadding=4\n#The size of item indicators, in tenths of a percent of IconSize.\nIndicatorSize=0\n#The size of the icon-shadow behind every item, in tenths of a percent of IconSize.\nIconShadowSize=0\n#The height (in percent of IconSize) to bounce an icon when the application sets urgent.\nUrgentBounceHeight=0.10000000000000001\n#The height (in percent of IconSize) to bounce an icon when launching an application.\nLaunchBounceHeight=0.10000000000000001\n#The opacity value (0 to 1) to fade the dock to when hiding it.\nFadeOpacity=0\n#The amount of time (in ms) for click animations.\nClickTime=150\n#The amount of time (in ms) to bounce an urgent icon.\nUrgentBounceTime=300\n#The amount of time (in ms) to bounce an icon when launching an application.\nLaunchBounceTime=300\n#The amount of time (in ms) for active window indicator animations.\nActiveTime=150\n#The amount of time (in ms) to slide icons into/out of the dock.\nSlideTime=150\n#The time (in ms) to fade the dock in/out on a hide (if FadeOpacity is &lt; 1).\nFadeTime=100\n#The time (in ms) to slide the dock in/out on a hide (if FadeOpacity is 1).\nHideTime=100\n#The size of the urgent glow (shown when dock is hidden), in tenths of a percent of IconSize.\nGlowSize=30\n#The total time (in ms) to show the hidden-dock urgent glow.\nGlowTime=10000\n#The time (in ms) of each pulse of the hidden-dock urgent glow.\nGlowPulseTime=2000\n#The hue-shift (-180 to 180) of the urgent indicator color.\nUrgentHueShift=150\n#The time (in ms) to move an item to its new position.\nItemMoveTime=150\n```\n```language\n#This theme written by Perian. thexperian.deviantart.com\n\n[PlankDrawingTheme]\nTopRoundness=3\nLineWidth=0\nOuterStrokeColor=0;;0;;0;;0\nFillStartColor=0;;0;;0;;150\nFillEndColor=0;;0;;0;;150\nInnerStrokeColor=0;;0;;0;;0\n\n```\n\n以上是我折腾的结果，找主题也找了半天。大家如果有更好的主题与壁纸也拿来分享一下吧。\n\n","source":"_posts/kde-to-mac.md","raw":"title: KDE的Mac向折腾指南\ncategories:\n\n- KDE\n\nid: 157\ndate: 2014-12-07 12:45:53\ntags: [linux,DE/WM,美化]\n\n---\n\n\n\n惯例，先上图：\n\n[![logo9](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo9-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo9.png)\n<!--more-->\n[![logo5](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo5-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo5.png) [![logo6](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo6-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo6.png) [![logo7](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo7-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo7.png) [![logo8](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo8-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo8.png)\n\n首先，KDE的全局菜单可以参考我以前的文章《[KDE4的配置参考](http://kevinsfork.info/2014/10/31/kde4-e7-9a-84-e9-85-8d-e7-bd-ae-e5-8f-82-e8-80-83/)》。\n\n然后，Plasma的主题是AG-plasma，aurorae主题是Yoxydaze-light。这些可以去kde-look里找。\n\n底部的dock是plank，主题是ArHU，在deviantART中找到的。另外，plank上的图标是受gtk主题控制的，所以装numix-circle是最好不过的。\n\n我的apps文件可以在这里下载：[click here](http://pan.baidu.com/s/1hqGJDmk)\n\n~/.config/plank/dock1/settings文件：\n```language\n#This file auto-generated by Plank.\n#2014-12-06T09:47:52+0000\n\n[PlankDockPreferences]\n#Whether to show only windows of the current workspace.\nCurrentWorkspaceOnly=false\n#The size of dock icons (in pixels).\nIconSize=42\n#If 0, the dock won't hide. If 1, the dock intelligently hides. If 2, the dock auto-hides. If 3, the dock dodges active maximized windows.\nHideMode=0\n#Time (in ms) to wait before unhiding the dock.\nUnhideDelay=0\n#The monitor number for the dock. Use -1 to keep on the primary monitor.\nMonitor=-1\n#List of *.dockitem files on this dock. DO NOT MODIFY\nDockItems=plank.dockitem;;google-chrome.dockitem;;dolphin.dockitem;;juk.dockitem;;eclipse.dockitem;;chrome-pjkebmlmkppdjcdcilfcjdkifljollfd-Default.dockitem;;kate.dockitem;;gwenview.dockitem;;wps-office-wps.dockitem;;konsole.dockitem;;sublime_text_3.dockitem;;love-wallpaper.dockitem;;ksysguard.dockitem;;virtualbox.dockitem\n#The position for the dock on the monitor. If 0, left. If 1, right. If 2, top. If 3, bottom.\nPosition=3\n#The dock's position offset from center (in percent).\nOffset=0\n#The name of the dock's theme to use.\nTheme=ArHU\n#The alignment for the dock on the monitor's edge. If 0, panel-mode. If 1, left-aligned. If 2, right-aligned. If 3, centered.\nAlignment=3\n#The alignment of the items in this dock if panel-mode is used. If 1, left-aligned. If 2, right-aligned. If 3, centered.\nItemsAlignment=3\n#Whether to prevent drag'n'drop actions and lock items on the dock.\nLockItems=false\n#Whether to use pressure-based revealing of the dock if the support is available.\nPressureReveal=false\n#Whether to show only pinned applications. Useful for running more then one dock.\nPinnedOnly=true\n#Whether to automatically pin an application if it seems useful to do.\nAutoPinning=true\n```\n\n~/.local/share/plank/themes/ArHU/中的dock.theme和hover.theme文件分别是：\n\n```language\n\n#This file auto-generated by Plank.\n#2014-12-06T06:22:37+0000\n\n[PlankDrawingTheme]\n#The roundness of the top corners.\nTopRoundness=6\n#The roundness of the bottom corners.\nBottomRoundness=0\n#The thickness (in pixels) of lines drawn.\nLineWidth=0\n#The color (RGBA) of the outer stroke.\nOuterStrokeColor=0;;0;;0;;0\n#The starting color (RGBA) of the fill gradient.\nFillStartColor=255;;255;;255;;150\n#The ending color (RGBA) of the fill gradient.\nFillEndColor=255;;255;;255;;150\n#The color (RGBA) of the inner stroke.\nInnerStrokeColor=255;;255;;255;;255\n\n[PlankDrawingDockTheme]\n#The padding on the left/right dock edges, in tenths of a percent of IconSize.\nHorizPadding=0\n#The padding on the top dock edge, in tenths of a percent of IconSize.\nTopPadding=1\n#The padding on the bottom dock edge, in tenths of a percent of IconSize.\nBottomPadding=1\n#The padding between items on the dock, in tenths of a percent of IconSize.\nItemPadding=4\n#The size of item indicators, in tenths of a percent of IconSize.\nIndicatorSize=0\n#The size of the icon-shadow behind every item, in tenths of a percent of IconSize.\nIconShadowSize=0\n#The height (in percent of IconSize) to bounce an icon when the application sets urgent.\nUrgentBounceHeight=0.10000000000000001\n#The height (in percent of IconSize) to bounce an icon when launching an application.\nLaunchBounceHeight=0.10000000000000001\n#The opacity value (0 to 1) to fade the dock to when hiding it.\nFadeOpacity=0\n#The amount of time (in ms) for click animations.\nClickTime=150\n#The amount of time (in ms) to bounce an urgent icon.\nUrgentBounceTime=300\n#The amount of time (in ms) to bounce an icon when launching an application.\nLaunchBounceTime=300\n#The amount of time (in ms) for active window indicator animations.\nActiveTime=150\n#The amount of time (in ms) to slide icons into/out of the dock.\nSlideTime=150\n#The time (in ms) to fade the dock in/out on a hide (if FadeOpacity is &lt; 1).\nFadeTime=100\n#The time (in ms) to slide the dock in/out on a hide (if FadeOpacity is 1).\nHideTime=100\n#The size of the urgent glow (shown when dock is hidden), in tenths of a percent of IconSize.\nGlowSize=30\n#The total time (in ms) to show the hidden-dock urgent glow.\nGlowTime=10000\n#The time (in ms) of each pulse of the hidden-dock urgent glow.\nGlowPulseTime=2000\n#The hue-shift (-180 to 180) of the urgent indicator color.\nUrgentHueShift=150\n#The time (in ms) to move an item to its new position.\nItemMoveTime=150\n```\n```language\n#This theme written by Perian. thexperian.deviantart.com\n\n[PlankDrawingTheme]\nTopRoundness=3\nLineWidth=0\nOuterStrokeColor=0;;0;;0;;0\nFillStartColor=0;;0;;0;;150\nFillEndColor=0;;0;;0;;150\nInnerStrokeColor=0;;0;;0;;0\n\n```\n\n以上是我折腾的结果，找主题也找了半天。大家如果有更好的主题与壁纸也拿来分享一下吧。\n\n","slug":"kde-to-mac","published":1,"updated":"2016-11-22T13:46:32.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8nw001gwppvngwvcpj2","content":"<p>惯例，先上图：</p>\n<p><a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo9.png\" target=\"_blank\" rel=\"external\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo9-1024x575.png\" alt=\"logo9\"></a><br><a id=\"more\"></a><br><a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo5.png\" target=\"_blank\" rel=\"external\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo5-1024x575.png\" alt=\"logo5\"></a> <a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo6.png\" target=\"_blank\" rel=\"external\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo6-1024x575.png\" alt=\"logo6\"></a> <a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo7.png\" target=\"_blank\" rel=\"external\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo7-1024x575.png\" alt=\"logo7\"></a> <a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo8.png\" target=\"_blank\" rel=\"external\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo8-1024x575.png\" alt=\"logo8\"></a></p>\n<p>首先，KDE的全局菜单可以参考我以前的文章《<a href=\"http://kevinsfork.info/2014/10/31/kde4-e7-9a-84-e9-85-8d-e7-bd-ae-e5-8f-82-e8-80-83/\" target=\"_blank\" rel=\"external\">KDE4的配置参考</a>》。</p>\n<p>然后，Plasma的主题是AG-plasma，aurorae主题是Yoxydaze-light。这些可以去kde-look里找。</p>\n<p>底部的dock是plank，主题是ArHU，在deviantART中找到的。另外，plank上的图标是受gtk主题控制的，所以装numix-circle是最好不过的。</p>\n<p>我的apps文件可以在这里下载：<a href=\"http://pan.baidu.com/s/1hqGJDmk\" target=\"_blank\" rel=\"external\">click here</a></p>\n<p>~/.config/plank/dock1/settings文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">#This file auto-generated by Plank.</div><div class=\"line\">#2014-12-06T09:47:52+0000</div><div class=\"line\"></div><div class=\"line\">[PlankDockPreferences]</div><div class=\"line\">#Whether to show only windows of the current workspace.</div><div class=\"line\">CurrentWorkspaceOnly=false</div><div class=\"line\">#The size of dock icons (in pixels).</div><div class=\"line\">IconSize=42</div><div class=\"line\">#If 0, the dock won&apos;t hide. If 1, the dock intelligently hides. If 2, the dock auto-hides. If 3, the dock dodges active maximized windows.</div><div class=\"line\">HideMode=0</div><div class=\"line\">#Time (in ms) to wait before unhiding the dock.</div><div class=\"line\">UnhideDelay=0</div><div class=\"line\">#The monitor number for the dock. Use -1 to keep on the primary monitor.</div><div class=\"line\">Monitor=-1</div><div class=\"line\">#List of *.dockitem files on this dock. DO NOT MODIFY</div><div class=\"line\">DockItems=plank.dockitem;;google-chrome.dockitem;;dolphin.dockitem;;juk.dockitem;;eclipse.dockitem;;chrome-pjkebmlmkppdjcdcilfcjdkifljollfd-Default.dockitem;;kate.dockitem;;gwenview.dockitem;;wps-office-wps.dockitem;;konsole.dockitem;;sublime_text_3.dockitem;;love-wallpaper.dockitem;;ksysguard.dockitem;;virtualbox.dockitem</div><div class=\"line\">#The position for the dock on the monitor. If 0, left. If 1, right. If 2, top. If 3, bottom.</div><div class=\"line\">Position=3</div><div class=\"line\">#The dock&apos;s position offset from center (in percent).</div><div class=\"line\">Offset=0</div><div class=\"line\">#The name of the dock&apos;s theme to use.</div><div class=\"line\">Theme=ArHU</div><div class=\"line\">#The alignment for the dock on the monitor&apos;s edge. If 0, panel-mode. If 1, left-aligned. If 2, right-aligned. If 3, centered.</div><div class=\"line\">Alignment=3</div><div class=\"line\">#The alignment of the items in this dock if panel-mode is used. If 1, left-aligned. If 2, right-aligned. If 3, centered.</div><div class=\"line\">ItemsAlignment=3</div><div class=\"line\">#Whether to prevent drag&apos;n&apos;drop actions and lock items on the dock.</div><div class=\"line\">LockItems=false</div><div class=\"line\">#Whether to use pressure-based revealing of the dock if the support is available.</div><div class=\"line\">PressureReveal=false</div><div class=\"line\">#Whether to show only pinned applications. Useful for running more then one dock.</div><div class=\"line\">PinnedOnly=true</div><div class=\"line\">#Whether to automatically pin an application if it seems useful to do.</div><div class=\"line\">AutoPinning=true</div></pre></td></tr></table></figure></p>\n<p>~/.local/share/plank/themes/ArHU/中的dock.theme和hover.theme文件分别是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#This file auto-generated by Plank.</div><div class=\"line\">#2014-12-06T06:22:37+0000</div><div class=\"line\"></div><div class=\"line\">[PlankDrawingTheme]</div><div class=\"line\">#The roundness of the top corners.</div><div class=\"line\">TopRoundness=6</div><div class=\"line\">#The roundness of the bottom corners.</div><div class=\"line\">BottomRoundness=0</div><div class=\"line\">#The thickness (in pixels) of lines drawn.</div><div class=\"line\">LineWidth=0</div><div class=\"line\">#The color (RGBA) of the outer stroke.</div><div class=\"line\">OuterStrokeColor=0;;0;;0;;0</div><div class=\"line\">#The starting color (RGBA) of the fill gradient.</div><div class=\"line\">FillStartColor=255;;255;;255;;150</div><div class=\"line\">#The ending color (RGBA) of the fill gradient.</div><div class=\"line\">FillEndColor=255;;255;;255;;150</div><div class=\"line\">#The color (RGBA) of the inner stroke.</div><div class=\"line\">InnerStrokeColor=255;;255;;255;;255</div><div class=\"line\"></div><div class=\"line\">[PlankDrawingDockTheme]</div><div class=\"line\">#The padding on the left/right dock edges, in tenths of a percent of IconSize.</div><div class=\"line\">HorizPadding=0</div><div class=\"line\">#The padding on the top dock edge, in tenths of a percent of IconSize.</div><div class=\"line\">TopPadding=1</div><div class=\"line\">#The padding on the bottom dock edge, in tenths of a percent of IconSize.</div><div class=\"line\">BottomPadding=1</div><div class=\"line\">#The padding between items on the dock, in tenths of a percent of IconSize.</div><div class=\"line\">ItemPadding=4</div><div class=\"line\">#The size of item indicators, in tenths of a percent of IconSize.</div><div class=\"line\">IndicatorSize=0</div><div class=\"line\">#The size of the icon-shadow behind every item, in tenths of a percent of IconSize.</div><div class=\"line\">IconShadowSize=0</div><div class=\"line\">#The height (in percent of IconSize) to bounce an icon when the application sets urgent.</div><div class=\"line\">UrgentBounceHeight=0.10000000000000001</div><div class=\"line\">#The height (in percent of IconSize) to bounce an icon when launching an application.</div><div class=\"line\">LaunchBounceHeight=0.10000000000000001</div><div class=\"line\">#The opacity value (0 to 1) to fade the dock to when hiding it.</div><div class=\"line\">FadeOpacity=0</div><div class=\"line\">#The amount of time (in ms) for click animations.</div><div class=\"line\">ClickTime=150</div><div class=\"line\">#The amount of time (in ms) to bounce an urgent icon.</div><div class=\"line\">UrgentBounceTime=300</div><div class=\"line\">#The amount of time (in ms) to bounce an icon when launching an application.</div><div class=\"line\">LaunchBounceTime=300</div><div class=\"line\">#The amount of time (in ms) for active window indicator animations.</div><div class=\"line\">ActiveTime=150</div><div class=\"line\">#The amount of time (in ms) to slide icons into/out of the dock.</div><div class=\"line\">SlideTime=150</div><div class=\"line\">#The time (in ms) to fade the dock in/out on a hide (if FadeOpacity is &amp;lt; 1).</div><div class=\"line\">FadeTime=100</div><div class=\"line\">#The time (in ms) to slide the dock in/out on a hide (if FadeOpacity is 1).</div><div class=\"line\">HideTime=100</div><div class=\"line\">#The size of the urgent glow (shown when dock is hidden), in tenths of a percent of IconSize.</div><div class=\"line\">GlowSize=30</div><div class=\"line\">#The total time (in ms) to show the hidden-dock urgent glow.</div><div class=\"line\">GlowTime=10000</div><div class=\"line\">#The time (in ms) of each pulse of the hidden-dock urgent glow.</div><div class=\"line\">GlowPulseTime=2000</div><div class=\"line\">#The hue-shift (-180 to 180) of the urgent indicator color.</div><div class=\"line\">UrgentHueShift=150</div><div class=\"line\">#The time (in ms) to move an item to its new position.</div><div class=\"line\">ItemMoveTime=150</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">#This theme written by Perian. thexperian.deviantart.com</div><div class=\"line\"></div><div class=\"line\">[PlankDrawingTheme]</div><div class=\"line\">TopRoundness=3</div><div class=\"line\">LineWidth=0</div><div class=\"line\">OuterStrokeColor=0;;0;;0;;0</div><div class=\"line\">FillStartColor=0;;0;;0;;150</div><div class=\"line\">FillEndColor=0;;0;;0;;150</div><div class=\"line\">InnerStrokeColor=0;;0;;0;;0</div></pre></td></tr></table></figure>\n<p>以上是我折腾的结果，找主题也找了半天。大家如果有更好的主题与壁纸也拿来分享一下吧。</p>\n","excerpt":"<p>惯例，先上图：</p>\n<p><a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo9.png\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo9-1024x575.png\" alt=\"logo9\"></a><br>","more":"<br><a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo5.png\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo5-1024x575.png\" alt=\"logo5\"></a> <a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo6.png\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo6-1024x575.png\" alt=\"logo6\"></a> <a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo7.png\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo7-1024x575.png\" alt=\"logo7\"></a> <a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo8.png\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo8-1024x575.png\" alt=\"logo8\"></a></p>\n<p>首先，KDE的全局菜单可以参考我以前的文章《<a href=\"http://kevinsfork.info/2014/10/31/kde4-e7-9a-84-e9-85-8d-e7-bd-ae-e5-8f-82-e8-80-83/\">KDE4的配置参考</a>》。</p>\n<p>然后，Plasma的主题是AG-plasma，aurorae主题是Yoxydaze-light。这些可以去kde-look里找。</p>\n<p>底部的dock是plank，主题是ArHU，在deviantART中找到的。另外，plank上的图标是受gtk主题控制的，所以装numix-circle是最好不过的。</p>\n<p>我的apps文件可以在这里下载：<a href=\"http://pan.baidu.com/s/1hqGJDmk\">click here</a></p>\n<p>~/.config/plank/dock1/settings文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">#This file auto-generated by Plank.</div><div class=\"line\">#2014-12-06T09:47:52+0000</div><div class=\"line\"></div><div class=\"line\">[PlankDockPreferences]</div><div class=\"line\">#Whether to show only windows of the current workspace.</div><div class=\"line\">CurrentWorkspaceOnly=false</div><div class=\"line\">#The size of dock icons (in pixels).</div><div class=\"line\">IconSize=42</div><div class=\"line\">#If 0, the dock won&apos;t hide. If 1, the dock intelligently hides. If 2, the dock auto-hides. If 3, the dock dodges active maximized windows.</div><div class=\"line\">HideMode=0</div><div class=\"line\">#Time (in ms) to wait before unhiding the dock.</div><div class=\"line\">UnhideDelay=0</div><div class=\"line\">#The monitor number for the dock. Use -1 to keep on the primary monitor.</div><div class=\"line\">Monitor=-1</div><div class=\"line\">#List of *.dockitem files on this dock. DO NOT MODIFY</div><div class=\"line\">DockItems=plank.dockitem;;google-chrome.dockitem;;dolphin.dockitem;;juk.dockitem;;eclipse.dockitem;;chrome-pjkebmlmkppdjcdcilfcjdkifljollfd-Default.dockitem;;kate.dockitem;;gwenview.dockitem;;wps-office-wps.dockitem;;konsole.dockitem;;sublime_text_3.dockitem;;love-wallpaper.dockitem;;ksysguard.dockitem;;virtualbox.dockitem</div><div class=\"line\">#The position for the dock on the monitor. If 0, left. If 1, right. If 2, top. If 3, bottom.</div><div class=\"line\">Position=3</div><div class=\"line\">#The dock&apos;s position offset from center (in percent).</div><div class=\"line\">Offset=0</div><div class=\"line\">#The name of the dock&apos;s theme to use.</div><div class=\"line\">Theme=ArHU</div><div class=\"line\">#The alignment for the dock on the monitor&apos;s edge. If 0, panel-mode. If 1, left-aligned. If 2, right-aligned. If 3, centered.</div><div class=\"line\">Alignment=3</div><div class=\"line\">#The alignment of the items in this dock if panel-mode is used. If 1, left-aligned. If 2, right-aligned. If 3, centered.</div><div class=\"line\">ItemsAlignment=3</div><div class=\"line\">#Whether to prevent drag&apos;n&apos;drop actions and lock items on the dock.</div><div class=\"line\">LockItems=false</div><div class=\"line\">#Whether to use pressure-based revealing of the dock if the support is available.</div><div class=\"line\">PressureReveal=false</div><div class=\"line\">#Whether to show only pinned applications. Useful for running more then one dock.</div><div class=\"line\">PinnedOnly=true</div><div class=\"line\">#Whether to automatically pin an application if it seems useful to do.</div><div class=\"line\">AutoPinning=true</div></pre></td></tr></table></figure></p>\n<p>~/.local/share/plank/themes/ArHU/中的dock.theme和hover.theme文件分别是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#This file auto-generated by Plank.</div><div class=\"line\">#2014-12-06T06:22:37+0000</div><div class=\"line\"></div><div class=\"line\">[PlankDrawingTheme]</div><div class=\"line\">#The roundness of the top corners.</div><div class=\"line\">TopRoundness=6</div><div class=\"line\">#The roundness of the bottom corners.</div><div class=\"line\">BottomRoundness=0</div><div class=\"line\">#The thickness (in pixels) of lines drawn.</div><div class=\"line\">LineWidth=0</div><div class=\"line\">#The color (RGBA) of the outer stroke.</div><div class=\"line\">OuterStrokeColor=0;;0;;0;;0</div><div class=\"line\">#The starting color (RGBA) of the fill gradient.</div><div class=\"line\">FillStartColor=255;;255;;255;;150</div><div class=\"line\">#The ending color (RGBA) of the fill gradient.</div><div class=\"line\">FillEndColor=255;;255;;255;;150</div><div class=\"line\">#The color (RGBA) of the inner stroke.</div><div class=\"line\">InnerStrokeColor=255;;255;;255;;255</div><div class=\"line\"></div><div class=\"line\">[PlankDrawingDockTheme]</div><div class=\"line\">#The padding on the left/right dock edges, in tenths of a percent of IconSize.</div><div class=\"line\">HorizPadding=0</div><div class=\"line\">#The padding on the top dock edge, in tenths of a percent of IconSize.</div><div class=\"line\">TopPadding=1</div><div class=\"line\">#The padding on the bottom dock edge, in tenths of a percent of IconSize.</div><div class=\"line\">BottomPadding=1</div><div class=\"line\">#The padding between items on the dock, in tenths of a percent of IconSize.</div><div class=\"line\">ItemPadding=4</div><div class=\"line\">#The size of item indicators, in tenths of a percent of IconSize.</div><div class=\"line\">IndicatorSize=0</div><div class=\"line\">#The size of the icon-shadow behind every item, in tenths of a percent of IconSize.</div><div class=\"line\">IconShadowSize=0</div><div class=\"line\">#The height (in percent of IconSize) to bounce an icon when the application sets urgent.</div><div class=\"line\">UrgentBounceHeight=0.10000000000000001</div><div class=\"line\">#The height (in percent of IconSize) to bounce an icon when launching an application.</div><div class=\"line\">LaunchBounceHeight=0.10000000000000001</div><div class=\"line\">#The opacity value (0 to 1) to fade the dock to when hiding it.</div><div class=\"line\">FadeOpacity=0</div><div class=\"line\">#The amount of time (in ms) for click animations.</div><div class=\"line\">ClickTime=150</div><div class=\"line\">#The amount of time (in ms) to bounce an urgent icon.</div><div class=\"line\">UrgentBounceTime=300</div><div class=\"line\">#The amount of time (in ms) to bounce an icon when launching an application.</div><div class=\"line\">LaunchBounceTime=300</div><div class=\"line\">#The amount of time (in ms) for active window indicator animations.</div><div class=\"line\">ActiveTime=150</div><div class=\"line\">#The amount of time (in ms) to slide icons into/out of the dock.</div><div class=\"line\">SlideTime=150</div><div class=\"line\">#The time (in ms) to fade the dock in/out on a hide (if FadeOpacity is &amp;lt; 1).</div><div class=\"line\">FadeTime=100</div><div class=\"line\">#The time (in ms) to slide the dock in/out on a hide (if FadeOpacity is 1).</div><div class=\"line\">HideTime=100</div><div class=\"line\">#The size of the urgent glow (shown when dock is hidden), in tenths of a percent of IconSize.</div><div class=\"line\">GlowSize=30</div><div class=\"line\">#The total time (in ms) to show the hidden-dock urgent glow.</div><div class=\"line\">GlowTime=10000</div><div class=\"line\">#The time (in ms) of each pulse of the hidden-dock urgent glow.</div><div class=\"line\">GlowPulseTime=2000</div><div class=\"line\">#The hue-shift (-180 to 180) of the urgent indicator color.</div><div class=\"line\">UrgentHueShift=150</div><div class=\"line\">#The time (in ms) to move an item to its new position.</div><div class=\"line\">ItemMoveTime=150</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">#This theme written by Perian. thexperian.deviantart.com</div><div class=\"line\"></div><div class=\"line\">[PlankDrawingTheme]</div><div class=\"line\">TopRoundness=3</div><div class=\"line\">LineWidth=0</div><div class=\"line\">OuterStrokeColor=0;;0;;0;;0</div><div class=\"line\">FillStartColor=0;;0;;0;;150</div><div class=\"line\">FillEndColor=0;;0;;0;;150</div><div class=\"line\">InnerStrokeColor=0;;0;;0;;0</div></pre></td></tr></table></figure>\n<p>以上是我折腾的结果，找主题也找了半天。大家如果有更好的主题与壁纸也拿来分享一下吧。</p>"},{"title":"(转)慢慢的，就没有了，就像从未存在过","date":"2014-11-27T16:24:29.000Z","_content":"几年以前，我曾经嘲笑过某科技界大佬。当时他说：也许90后、95后会慢慢不知道谷歌是什么网站。\n\n　　那一年，这对于我来说简直就是世界上最好笑的笑话。谷歌，全世界最卓越的互联网公司，活在互联网的一代中国人，会不知道他们的网站？\n\n　　今天，我收回这句嘲笑。因为这件不可能的事，它慢慢变成了现实。\n\n　　没有人再关注什么谷歌不谷歌。对他们来说，百度也蛮好用的，反正他们几乎没用过谷歌。没有谷歌又怎样？大家还是开心的刷微博，看微信，听歌，看娱乐节目。对于从来就不知道谷歌的人来说，少了谷歌又有什么影响？\n\n![慢慢的，就没有了，就像从未存在过](http://www.williamlong.info/upload/4058_1.jpg)\n<!--more-->\n　　多年前，我们也是可以登陆Facebook的。其实这个网站和校内一样，也挺蠢的。可在上面你能看到老外们的生活，可以轻易的跟一万公里以外的人互相拜访，可以看到很多根本不会开到校内上的主页。你用汉语回复，下面给你聊起来的可能是香港仔，可能是台湾人。你用英语回复，说不定有比你英语用的更蹩脚的寂寞的北欧人来跟你搭讪。你感觉地球真的变成了地球村，你还没拉门走出去，别人就推门走了进来。\n\n　　然后，它就没有了。起初，它的失踪激起了很大的声音，后来，声音就消失了。\n\n　　多年前，我们也是可以登陆Twitter的。其实这个网站和微博一样，也不过是些信息流，刷上一整天，也不见得有什么用处。但至少，你可以以最快速度获取你想知道的任何新事，你会真正了解什么事情在全世界是流行的，而不是经过各种截图、翻译、转发，甚至曲解、断章取义、黑白颠倒的东西。你知道的是真相，赤裸裸的，也许有点太短的真相。但至少中间不会有无数人的加工与再加工，偏激、片面，就在这个过程中产生了，不管后来者有意还是无意。\n\n　　然后，它就没有了。首先是它的本体没有了，然后它的模仿者也没有了，模仿者的模仿者也没有了。只剩一个模仿者的模仿者的模仿者，现在你每天能在上面看到无数广告。\n\n　　多年前，我们也是可以登陆YouTube的。对于有的人来说，这个网站就是个大型优酷，当年有人信誓旦旦的说，没有YouTube，我们中国人会很快让优酷超过YouTube。可这么多年过去了，视频还是那么卡，内容还是那么垃圾，原创还是那么容易被盗窃，视频丰富度还是那么的可怜。在YouTube上，你能看到全世界最棒的手艺人，最逗乐的笑话，最天马行空的创意，最激荡人心的音乐，最美好的完美瞬间，可在优酷上，你想看一分钟视频，请先看半分钟广告。\n\n　　哦，对了。Instagram，有些人可能感觉它和QQ空间也差不多。可我在上面关注了六百多个摄影师，它们都是顶好顶好的影像记录者，每天看他们的作品，我感觉到很幸福，那种即使没有到那里去，也身临其境的幸福。我还在上面认识了一个日本的爱自拍的帅小伙，一个爱喝酒的韩国大叔，一个十年前到过中国今天会在每张我发的紫禁城照片下点赞的美国大爷，一个美丽无比的俄罗斯妹子，我和他们基本上都难以交流，语言是很大的障碍，但几个简单的单词，心意也就到了，这种感觉，有时候比多年老友相聚还兴奋。因为这是人类不同族群自由交流互相沟通的过程，这种过程很神奇，真的很神奇。\n\n　　可现在，它没有了，它之所以没有就因为在某个特定的时间你在搜索特定的词汇时，会搜出来特定的照片。虽然这么搜的人并不多，虽然看到的人也不会大惊小怪，也不会觉得天黑了，天亮了，天要塌了，天要变了。可它就是没了，Instagram，就这么没了。谷歌也是这么没的，Twitter也是这么没的，Facebook也是这么没的。不知道是什么人，在什么场合，说了什么话，下了什么决定。就要有超过十亿人像陷于哥谭市的孤岛里一样，看着一座又一座桥梁被炸掉，又被炸掉，又被炸掉，然后，就什么都没了。\n\n　　我时常觉得悲哀，真的好悲哀，一个我根本不认识也不知道是谁的人，也许是一个群体，在不断抢走我身边的东西，而我却无能为力。我抱怨一声，他听不到，任何人都听不到。我怒吼一句，身边的大多数人却像看疯子一样的看着我。我哀嚎一声，这声音被阻碍在黑黑的幕墙以里。我发出尖锐的嘶吼，这声音传不了多远，就和我那被抢走的东西一样，消失了，不见了，就像从来没存在过一样。\n\n　　对于本来就没存在过的东西，有谁又会觉得在意呢？那些本来拥有又被掠夺的人的哀愁，后来的人又怎么懂呢？我曾经是拥有一切的，我曾经是拥有世界的，我站在这片土地上，呼吸的是自由的空气，饮下的是自由的琼浆玉液。就在长的无法计数的时间里，我自由生命的一部分又一部分就这么被杀死了，突然就杀死了。可我还始终觉得，它们还奄奄一息的活着，就像它们是慢慢的死去的一样。\n\n　　可它们终归是死了，而且随着它们的死，愈来愈多的事情慢慢的发生了，很慢很慢，几乎不被人察觉，可还是发生了。\n\n　　没有谷歌，我可以用百度呀。可某些结果被越挪越后，越挪越后，最后就不见了。就像本来就不该搜出这个结果一样。\n\n　　没有Facebook，我可以用校内呀。可你想发只有在Facebook上能发的文章，很快在校内上就失踪了。接着，校内变成了人人，话题变成了人人都关心的话题。大家都在抢着看星座、明星、八卦、娱乐。没有人会关心什么消失了，反正它们本来也没多少存在感。\n\n　　没有YouTube，我可以用优酷呀。可你却经常只能在优酷上看到抄袭别人的作品，而且还不署名，而且还洋洋得意，而且还自我陶醉，就好像那个idea本来属于他自己一样。你看了还要惊呼，他是如此的有创意！好一个抄袭的创意，可你却不知道，因为你不知道这个世界上有个网站叫YouTube。\n\n　　没有Twitter，我还可以用微博呀。可你想知道最近发生了什么，你搜的越勤快，越能看到越明显的“根据相关法律法规，相关搜索结果不予显示”。时间长了，你想，反正知道了也没什么用，不如不看了。\n\n　　慢慢的，一扇又一扇的门关上了。今天你打开世界上最大的博客网站，发现它没了。明天你一看，世界上最好的设计师分享网站没了，一开始是刷新的很慢很慢，后来它就没了。过两天再一看，平常每天都会读两篇文章的媒体网站没了，那里的文章缤纷多彩，最后都变成了该页无法显示几个字。再过几个月，大学的网站不让上了，摄影师的网站不让上了，就连百度日本这种自家网站，也没了。\n\n　　接着，漫画看不了了，接着，动画看不成了。接着，美剧英剧失踪了。下载美剧英剧的网站又又又失踪了。尊重正版，保护权益，行吧，然后字幕网站也没了。\n\n　　游戏没了，你习惯性登陆的游戏网站，发现下载栏正在整治中。论坛关了，天天都在看的论坛，突然接到相关部门的电话，因为“报备问题”不让办了。个人网站，私人博客，对不起，说没就没有，你在上面存了多少多年辛勤耕耘的东西都没用。\n\n　　你关注的人，有一天你登陆微博，发现他怎么好久都没说话了，然后你搜索了一下，发现他的账号不存在了，而且你搜他的名字，他的名字未予显示。\n\n　　一盏一盏的灯，灭了。四面八方的光源，消失了。我们生活的五光十色的世界，变成了一片黑色。\n\n　　天黑了，那么睡觉吧，但愿长醉不复醒。\n\n　　最后，我们变成了一群做梦的人，这个梦的名字，叫根据相关法律法规，相关搜索结果不予显示梦。\n\n　　作者：小海，来源：豆瓣网，[原文](http://www.douban.com/note/456932116/)已被和谐","source":"_posts/man-man-de.md","raw":"---\ntitle: (转)慢慢的，就没有了，就像从未存在过\ncategories: [GFW]\ndate: 2014-11-28 00:24:29\ntags: [只言片语]\n---\n几年以前，我曾经嘲笑过某科技界大佬。当时他说：也许90后、95后会慢慢不知道谷歌是什么网站。\n\n　　那一年，这对于我来说简直就是世界上最好笑的笑话。谷歌，全世界最卓越的互联网公司，活在互联网的一代中国人，会不知道他们的网站？\n\n　　今天，我收回这句嘲笑。因为这件不可能的事，它慢慢变成了现实。\n\n　　没有人再关注什么谷歌不谷歌。对他们来说，百度也蛮好用的，反正他们几乎没用过谷歌。没有谷歌又怎样？大家还是开心的刷微博，看微信，听歌，看娱乐节目。对于从来就不知道谷歌的人来说，少了谷歌又有什么影响？\n\n![慢慢的，就没有了，就像从未存在过](http://www.williamlong.info/upload/4058_1.jpg)\n<!--more-->\n　　多年前，我们也是可以登陆Facebook的。其实这个网站和校内一样，也挺蠢的。可在上面你能看到老外们的生活，可以轻易的跟一万公里以外的人互相拜访，可以看到很多根本不会开到校内上的主页。你用汉语回复，下面给你聊起来的可能是香港仔，可能是台湾人。你用英语回复，说不定有比你英语用的更蹩脚的寂寞的北欧人来跟你搭讪。你感觉地球真的变成了地球村，你还没拉门走出去，别人就推门走了进来。\n\n　　然后，它就没有了。起初，它的失踪激起了很大的声音，后来，声音就消失了。\n\n　　多年前，我们也是可以登陆Twitter的。其实这个网站和微博一样，也不过是些信息流，刷上一整天，也不见得有什么用处。但至少，你可以以最快速度获取你想知道的任何新事，你会真正了解什么事情在全世界是流行的，而不是经过各种截图、翻译、转发，甚至曲解、断章取义、黑白颠倒的东西。你知道的是真相，赤裸裸的，也许有点太短的真相。但至少中间不会有无数人的加工与再加工，偏激、片面，就在这个过程中产生了，不管后来者有意还是无意。\n\n　　然后，它就没有了。首先是它的本体没有了，然后它的模仿者也没有了，模仿者的模仿者也没有了。只剩一个模仿者的模仿者的模仿者，现在你每天能在上面看到无数广告。\n\n　　多年前，我们也是可以登陆YouTube的。对于有的人来说，这个网站就是个大型优酷，当年有人信誓旦旦的说，没有YouTube，我们中国人会很快让优酷超过YouTube。可这么多年过去了，视频还是那么卡，内容还是那么垃圾，原创还是那么容易被盗窃，视频丰富度还是那么的可怜。在YouTube上，你能看到全世界最棒的手艺人，最逗乐的笑话，最天马行空的创意，最激荡人心的音乐，最美好的完美瞬间，可在优酷上，你想看一分钟视频，请先看半分钟广告。\n\n　　哦，对了。Instagram，有些人可能感觉它和QQ空间也差不多。可我在上面关注了六百多个摄影师，它们都是顶好顶好的影像记录者，每天看他们的作品，我感觉到很幸福，那种即使没有到那里去，也身临其境的幸福。我还在上面认识了一个日本的爱自拍的帅小伙，一个爱喝酒的韩国大叔，一个十年前到过中国今天会在每张我发的紫禁城照片下点赞的美国大爷，一个美丽无比的俄罗斯妹子，我和他们基本上都难以交流，语言是很大的障碍，但几个简单的单词，心意也就到了，这种感觉，有时候比多年老友相聚还兴奋。因为这是人类不同族群自由交流互相沟通的过程，这种过程很神奇，真的很神奇。\n\n　　可现在，它没有了，它之所以没有就因为在某个特定的时间你在搜索特定的词汇时，会搜出来特定的照片。虽然这么搜的人并不多，虽然看到的人也不会大惊小怪，也不会觉得天黑了，天亮了，天要塌了，天要变了。可它就是没了，Instagram，就这么没了。谷歌也是这么没的，Twitter也是这么没的，Facebook也是这么没的。不知道是什么人，在什么场合，说了什么话，下了什么决定。就要有超过十亿人像陷于哥谭市的孤岛里一样，看着一座又一座桥梁被炸掉，又被炸掉，又被炸掉，然后，就什么都没了。\n\n　　我时常觉得悲哀，真的好悲哀，一个我根本不认识也不知道是谁的人，也许是一个群体，在不断抢走我身边的东西，而我却无能为力。我抱怨一声，他听不到，任何人都听不到。我怒吼一句，身边的大多数人却像看疯子一样的看着我。我哀嚎一声，这声音被阻碍在黑黑的幕墙以里。我发出尖锐的嘶吼，这声音传不了多远，就和我那被抢走的东西一样，消失了，不见了，就像从来没存在过一样。\n\n　　对于本来就没存在过的东西，有谁又会觉得在意呢？那些本来拥有又被掠夺的人的哀愁，后来的人又怎么懂呢？我曾经是拥有一切的，我曾经是拥有世界的，我站在这片土地上，呼吸的是自由的空气，饮下的是自由的琼浆玉液。就在长的无法计数的时间里，我自由生命的一部分又一部分就这么被杀死了，突然就杀死了。可我还始终觉得，它们还奄奄一息的活着，就像它们是慢慢的死去的一样。\n\n　　可它们终归是死了，而且随着它们的死，愈来愈多的事情慢慢的发生了，很慢很慢，几乎不被人察觉，可还是发生了。\n\n　　没有谷歌，我可以用百度呀。可某些结果被越挪越后，越挪越后，最后就不见了。就像本来就不该搜出这个结果一样。\n\n　　没有Facebook，我可以用校内呀。可你想发只有在Facebook上能发的文章，很快在校内上就失踪了。接着，校内变成了人人，话题变成了人人都关心的话题。大家都在抢着看星座、明星、八卦、娱乐。没有人会关心什么消失了，反正它们本来也没多少存在感。\n\n　　没有YouTube，我可以用优酷呀。可你却经常只能在优酷上看到抄袭别人的作品，而且还不署名，而且还洋洋得意，而且还自我陶醉，就好像那个idea本来属于他自己一样。你看了还要惊呼，他是如此的有创意！好一个抄袭的创意，可你却不知道，因为你不知道这个世界上有个网站叫YouTube。\n\n　　没有Twitter，我还可以用微博呀。可你想知道最近发生了什么，你搜的越勤快，越能看到越明显的“根据相关法律法规，相关搜索结果不予显示”。时间长了，你想，反正知道了也没什么用，不如不看了。\n\n　　慢慢的，一扇又一扇的门关上了。今天你打开世界上最大的博客网站，发现它没了。明天你一看，世界上最好的设计师分享网站没了，一开始是刷新的很慢很慢，后来它就没了。过两天再一看，平常每天都会读两篇文章的媒体网站没了，那里的文章缤纷多彩，最后都变成了该页无法显示几个字。再过几个月，大学的网站不让上了，摄影师的网站不让上了，就连百度日本这种自家网站，也没了。\n\n　　接着，漫画看不了了，接着，动画看不成了。接着，美剧英剧失踪了。下载美剧英剧的网站又又又失踪了。尊重正版，保护权益，行吧，然后字幕网站也没了。\n\n　　游戏没了，你习惯性登陆的游戏网站，发现下载栏正在整治中。论坛关了，天天都在看的论坛，突然接到相关部门的电话，因为“报备问题”不让办了。个人网站，私人博客，对不起，说没就没有，你在上面存了多少多年辛勤耕耘的东西都没用。\n\n　　你关注的人，有一天你登陆微博，发现他怎么好久都没说话了，然后你搜索了一下，发现他的账号不存在了，而且你搜他的名字，他的名字未予显示。\n\n　　一盏一盏的灯，灭了。四面八方的光源，消失了。我们生活的五光十色的世界，变成了一片黑色。\n\n　　天黑了，那么睡觉吧，但愿长醉不复醒。\n\n　　最后，我们变成了一群做梦的人，这个梦的名字，叫根据相关法律法规，相关搜索结果不予显示梦。\n\n　　作者：小海，来源：豆瓣网，[原文](http://www.douban.com/note/456932116/)已被和谐","slug":"man-man-de","published":1,"updated":"2016-11-23T06:48:27.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8nz001jwppvdqmo7y7q","content":"<p>几年以前，我曾经嘲笑过某科技界大佬。当时他说：也许90后、95后会慢慢不知道谷歌是什么网站。</p>\n<p>　　那一年，这对于我来说简直就是世界上最好笑的笑话。谷歌，全世界最卓越的互联网公司，活在互联网的一代中国人，会不知道他们的网站？</p>\n<p>　　今天，我收回这句嘲笑。因为这件不可能的事，它慢慢变成了现实。</p>\n<p>　　没有人再关注什么谷歌不谷歌。对他们来说，百度也蛮好用的，反正他们几乎没用过谷歌。没有谷歌又怎样？大家还是开心的刷微博，看微信，听歌，看娱乐节目。对于从来就不知道谷歌的人来说，少了谷歌又有什么影响？</p>\n<p><img src=\"http://www.williamlong.info/upload/4058_1.jpg\" alt=\"慢慢的，就没有了，就像从未存在过\"><br><a id=\"more\"></a><br>　　多年前，我们也是可以登陆Facebook的。其实这个网站和校内一样，也挺蠢的。可在上面你能看到老外们的生活，可以轻易的跟一万公里以外的人互相拜访，可以看到很多根本不会开到校内上的主页。你用汉语回复，下面给你聊起来的可能是香港仔，可能是台湾人。你用英语回复，说不定有比你英语用的更蹩脚的寂寞的北欧人来跟你搭讪。你感觉地球真的变成了地球村，你还没拉门走出去，别人就推门走了进来。</p>\n<p>　　然后，它就没有了。起初，它的失踪激起了很大的声音，后来，声音就消失了。</p>\n<p>　　多年前，我们也是可以登陆Twitter的。其实这个网站和微博一样，也不过是些信息流，刷上一整天，也不见得有什么用处。但至少，你可以以最快速度获取你想知道的任何新事，你会真正了解什么事情在全世界是流行的，而不是经过各种截图、翻译、转发，甚至曲解、断章取义、黑白颠倒的东西。你知道的是真相，赤裸裸的，也许有点太短的真相。但至少中间不会有无数人的加工与再加工，偏激、片面，就在这个过程中产生了，不管后来者有意还是无意。</p>\n<p>　　然后，它就没有了。首先是它的本体没有了，然后它的模仿者也没有了，模仿者的模仿者也没有了。只剩一个模仿者的模仿者的模仿者，现在你每天能在上面看到无数广告。</p>\n<p>　　多年前，我们也是可以登陆YouTube的。对于有的人来说，这个网站就是个大型优酷，当年有人信誓旦旦的说，没有YouTube，我们中国人会很快让优酷超过YouTube。可这么多年过去了，视频还是那么卡，内容还是那么垃圾，原创还是那么容易被盗窃，视频丰富度还是那么的可怜。在YouTube上，你能看到全世界最棒的手艺人，最逗乐的笑话，最天马行空的创意，最激荡人心的音乐，最美好的完美瞬间，可在优酷上，你想看一分钟视频，请先看半分钟广告。</p>\n<p>　　哦，对了。Instagram，有些人可能感觉它和QQ空间也差不多。可我在上面关注了六百多个摄影师，它们都是顶好顶好的影像记录者，每天看他们的作品，我感觉到很幸福，那种即使没有到那里去，也身临其境的幸福。我还在上面认识了一个日本的爱自拍的帅小伙，一个爱喝酒的韩国大叔，一个十年前到过中国今天会在每张我发的紫禁城照片下点赞的美国大爷，一个美丽无比的俄罗斯妹子，我和他们基本上都难以交流，语言是很大的障碍，但几个简单的单词，心意也就到了，这种感觉，有时候比多年老友相聚还兴奋。因为这是人类不同族群自由交流互相沟通的过程，这种过程很神奇，真的很神奇。</p>\n<p>　　可现在，它没有了，它之所以没有就因为在某个特定的时间你在搜索特定的词汇时，会搜出来特定的照片。虽然这么搜的人并不多，虽然看到的人也不会大惊小怪，也不会觉得天黑了，天亮了，天要塌了，天要变了。可它就是没了，Instagram，就这么没了。谷歌也是这么没的，Twitter也是这么没的，Facebook也是这么没的。不知道是什么人，在什么场合，说了什么话，下了什么决定。就要有超过十亿人像陷于哥谭市的孤岛里一样，看着一座又一座桥梁被炸掉，又被炸掉，又被炸掉，然后，就什么都没了。</p>\n<p>　　我时常觉得悲哀，真的好悲哀，一个我根本不认识也不知道是谁的人，也许是一个群体，在不断抢走我身边的东西，而我却无能为力。我抱怨一声，他听不到，任何人都听不到。我怒吼一句，身边的大多数人却像看疯子一样的看着我。我哀嚎一声，这声音被阻碍在黑黑的幕墙以里。我发出尖锐的嘶吼，这声音传不了多远，就和我那被抢走的东西一样，消失了，不见了，就像从来没存在过一样。</p>\n<p>　　对于本来就没存在过的东西，有谁又会觉得在意呢？那些本来拥有又被掠夺的人的哀愁，后来的人又怎么懂呢？我曾经是拥有一切的，我曾经是拥有世界的，我站在这片土地上，呼吸的是自由的空气，饮下的是自由的琼浆玉液。就在长的无法计数的时间里，我自由生命的一部分又一部分就这么被杀死了，突然就杀死了。可我还始终觉得，它们还奄奄一息的活着，就像它们是慢慢的死去的一样。</p>\n<p>　　可它们终归是死了，而且随着它们的死，愈来愈多的事情慢慢的发生了，很慢很慢，几乎不被人察觉，可还是发生了。</p>\n<p>　　没有谷歌，我可以用百度呀。可某些结果被越挪越后，越挪越后，最后就不见了。就像本来就不该搜出这个结果一样。</p>\n<p>　　没有Facebook，我可以用校内呀。可你想发只有在Facebook上能发的文章，很快在校内上就失踪了。接着，校内变成了人人，话题变成了人人都关心的话题。大家都在抢着看星座、明星、八卦、娱乐。没有人会关心什么消失了，反正它们本来也没多少存在感。</p>\n<p>　　没有YouTube，我可以用优酷呀。可你却经常只能在优酷上看到抄袭别人的作品，而且还不署名，而且还洋洋得意，而且还自我陶醉，就好像那个idea本来属于他自己一样。你看了还要惊呼，他是如此的有创意！好一个抄袭的创意，可你却不知道，因为你不知道这个世界上有个网站叫YouTube。</p>\n<p>　　没有Twitter，我还可以用微博呀。可你想知道最近发生了什么，你搜的越勤快，越能看到越明显的“根据相关法律法规，相关搜索结果不予显示”。时间长了，你想，反正知道了也没什么用，不如不看了。</p>\n<p>　　慢慢的，一扇又一扇的门关上了。今天你打开世界上最大的博客网站，发现它没了。明天你一看，世界上最好的设计师分享网站没了，一开始是刷新的很慢很慢，后来它就没了。过两天再一看，平常每天都会读两篇文章的媒体网站没了，那里的文章缤纷多彩，最后都变成了该页无法显示几个字。再过几个月，大学的网站不让上了，摄影师的网站不让上了，就连百度日本这种自家网站，也没了。</p>\n<p>　　接着，漫画看不了了，接着，动画看不成了。接着，美剧英剧失踪了。下载美剧英剧的网站又又又失踪了。尊重正版，保护权益，行吧，然后字幕网站也没了。</p>\n<p>　　游戏没了，你习惯性登陆的游戏网站，发现下载栏正在整治中。论坛关了，天天都在看的论坛，突然接到相关部门的电话，因为“报备问题”不让办了。个人网站，私人博客，对不起，说没就没有，你在上面存了多少多年辛勤耕耘的东西都没用。</p>\n<p>　　你关注的人，有一天你登陆微博，发现他怎么好久都没说话了，然后你搜索了一下，发现他的账号不存在了，而且你搜他的名字，他的名字未予显示。</p>\n<p>　　一盏一盏的灯，灭了。四面八方的光源，消失了。我们生活的五光十色的世界，变成了一片黑色。</p>\n<p>　　天黑了，那么睡觉吧，但愿长醉不复醒。</p>\n<p>　　最后，我们变成了一群做梦的人，这个梦的名字，叫根据相关法律法规，相关搜索结果不予显示梦。</p>\n<p>　　作者：小海，来源：豆瓣网，<a href=\"http://www.douban.com/note/456932116/\" target=\"_blank\" rel=\"external\">原文</a>已被和谐</p>\n","excerpt":"<p>几年以前，我曾经嘲笑过某科技界大佬。当时他说：也许90后、95后会慢慢不知道谷歌是什么网站。</p>\n<p>　　那一年，这对于我来说简直就是世界上最好笑的笑话。谷歌，全世界最卓越的互联网公司，活在互联网的一代中国人，会不知道他们的网站？</p>\n<p>　　今天，我收回这句嘲笑。因为这件不可能的事，它慢慢变成了现实。</p>\n<p>　　没有人再关注什么谷歌不谷歌。对他们来说，百度也蛮好用的，反正他们几乎没用过谷歌。没有谷歌又怎样？大家还是开心的刷微博，看微信，听歌，看娱乐节目。对于从来就不知道谷歌的人来说，少了谷歌又有什么影响？</p>\n<p><img src=\"http://www.williamlong.info/upload/4058_1.jpg\" alt=\"慢慢的，就没有了，就像从未存在过\"><br>","more":"<br>　　多年前，我们也是可以登陆Facebook的。其实这个网站和校内一样，也挺蠢的。可在上面你能看到老外们的生活，可以轻易的跟一万公里以外的人互相拜访，可以看到很多根本不会开到校内上的主页。你用汉语回复，下面给你聊起来的可能是香港仔，可能是台湾人。你用英语回复，说不定有比你英语用的更蹩脚的寂寞的北欧人来跟你搭讪。你感觉地球真的变成了地球村，你还没拉门走出去，别人就推门走了进来。</p>\n<p>　　然后，它就没有了。起初，它的失踪激起了很大的声音，后来，声音就消失了。</p>\n<p>　　多年前，我们也是可以登陆Twitter的。其实这个网站和微博一样，也不过是些信息流，刷上一整天，也不见得有什么用处。但至少，你可以以最快速度获取你想知道的任何新事，你会真正了解什么事情在全世界是流行的，而不是经过各种截图、翻译、转发，甚至曲解、断章取义、黑白颠倒的东西。你知道的是真相，赤裸裸的，也许有点太短的真相。但至少中间不会有无数人的加工与再加工，偏激、片面，就在这个过程中产生了，不管后来者有意还是无意。</p>\n<p>　　然后，它就没有了。首先是它的本体没有了，然后它的模仿者也没有了，模仿者的模仿者也没有了。只剩一个模仿者的模仿者的模仿者，现在你每天能在上面看到无数广告。</p>\n<p>　　多年前，我们也是可以登陆YouTube的。对于有的人来说，这个网站就是个大型优酷，当年有人信誓旦旦的说，没有YouTube，我们中国人会很快让优酷超过YouTube。可这么多年过去了，视频还是那么卡，内容还是那么垃圾，原创还是那么容易被盗窃，视频丰富度还是那么的可怜。在YouTube上，你能看到全世界最棒的手艺人，最逗乐的笑话，最天马行空的创意，最激荡人心的音乐，最美好的完美瞬间，可在优酷上，你想看一分钟视频，请先看半分钟广告。</p>\n<p>　　哦，对了。Instagram，有些人可能感觉它和QQ空间也差不多。可我在上面关注了六百多个摄影师，它们都是顶好顶好的影像记录者，每天看他们的作品，我感觉到很幸福，那种即使没有到那里去，也身临其境的幸福。我还在上面认识了一个日本的爱自拍的帅小伙，一个爱喝酒的韩国大叔，一个十年前到过中国今天会在每张我发的紫禁城照片下点赞的美国大爷，一个美丽无比的俄罗斯妹子，我和他们基本上都难以交流，语言是很大的障碍，但几个简单的单词，心意也就到了，这种感觉，有时候比多年老友相聚还兴奋。因为这是人类不同族群自由交流互相沟通的过程，这种过程很神奇，真的很神奇。</p>\n<p>　　可现在，它没有了，它之所以没有就因为在某个特定的时间你在搜索特定的词汇时，会搜出来特定的照片。虽然这么搜的人并不多，虽然看到的人也不会大惊小怪，也不会觉得天黑了，天亮了，天要塌了，天要变了。可它就是没了，Instagram，就这么没了。谷歌也是这么没的，Twitter也是这么没的，Facebook也是这么没的。不知道是什么人，在什么场合，说了什么话，下了什么决定。就要有超过十亿人像陷于哥谭市的孤岛里一样，看着一座又一座桥梁被炸掉，又被炸掉，又被炸掉，然后，就什么都没了。</p>\n<p>　　我时常觉得悲哀，真的好悲哀，一个我根本不认识也不知道是谁的人，也许是一个群体，在不断抢走我身边的东西，而我却无能为力。我抱怨一声，他听不到，任何人都听不到。我怒吼一句，身边的大多数人却像看疯子一样的看着我。我哀嚎一声，这声音被阻碍在黑黑的幕墙以里。我发出尖锐的嘶吼，这声音传不了多远，就和我那被抢走的东西一样，消失了，不见了，就像从来没存在过一样。</p>\n<p>　　对于本来就没存在过的东西，有谁又会觉得在意呢？那些本来拥有又被掠夺的人的哀愁，后来的人又怎么懂呢？我曾经是拥有一切的，我曾经是拥有世界的，我站在这片土地上，呼吸的是自由的空气，饮下的是自由的琼浆玉液。就在长的无法计数的时间里，我自由生命的一部分又一部分就这么被杀死了，突然就杀死了。可我还始终觉得，它们还奄奄一息的活着，就像它们是慢慢的死去的一样。</p>\n<p>　　可它们终归是死了，而且随着它们的死，愈来愈多的事情慢慢的发生了，很慢很慢，几乎不被人察觉，可还是发生了。</p>\n<p>　　没有谷歌，我可以用百度呀。可某些结果被越挪越后，越挪越后，最后就不见了。就像本来就不该搜出这个结果一样。</p>\n<p>　　没有Facebook，我可以用校内呀。可你想发只有在Facebook上能发的文章，很快在校内上就失踪了。接着，校内变成了人人，话题变成了人人都关心的话题。大家都在抢着看星座、明星、八卦、娱乐。没有人会关心什么消失了，反正它们本来也没多少存在感。</p>\n<p>　　没有YouTube，我可以用优酷呀。可你却经常只能在优酷上看到抄袭别人的作品，而且还不署名，而且还洋洋得意，而且还自我陶醉，就好像那个idea本来属于他自己一样。你看了还要惊呼，他是如此的有创意！好一个抄袭的创意，可你却不知道，因为你不知道这个世界上有个网站叫YouTube。</p>\n<p>　　没有Twitter，我还可以用微博呀。可你想知道最近发生了什么，你搜的越勤快，越能看到越明显的“根据相关法律法规，相关搜索结果不予显示”。时间长了，你想，反正知道了也没什么用，不如不看了。</p>\n<p>　　慢慢的，一扇又一扇的门关上了。今天你打开世界上最大的博客网站，发现它没了。明天你一看，世界上最好的设计师分享网站没了，一开始是刷新的很慢很慢，后来它就没了。过两天再一看，平常每天都会读两篇文章的媒体网站没了，那里的文章缤纷多彩，最后都变成了该页无法显示几个字。再过几个月，大学的网站不让上了，摄影师的网站不让上了，就连百度日本这种自家网站，也没了。</p>\n<p>　　接着，漫画看不了了，接着，动画看不成了。接着，美剧英剧失踪了。下载美剧英剧的网站又又又失踪了。尊重正版，保护权益，行吧，然后字幕网站也没了。</p>\n<p>　　游戏没了，你习惯性登陆的游戏网站，发现下载栏正在整治中。论坛关了，天天都在看的论坛，突然接到相关部门的电话，因为“报备问题”不让办了。个人网站，私人博客，对不起，说没就没有，你在上面存了多少多年辛勤耕耘的东西都没用。</p>\n<p>　　你关注的人，有一天你登陆微博，发现他怎么好久都没说话了，然后你搜索了一下，发现他的账号不存在了，而且你搜他的名字，他的名字未予显示。</p>\n<p>　　一盏一盏的灯，灭了。四面八方的光源，消失了。我们生活的五光十色的世界，变成了一片黑色。</p>\n<p>　　天黑了，那么睡觉吧，但愿长醉不复醒。</p>\n<p>　　最后，我们变成了一群做梦的人，这个梦的名字，叫根据相关法律法规，相关搜索结果不予显示梦。</p>\n<p>　　作者：小海，来源：豆瓣网，<a href=\"http://www.douban.com/note/456932116/\">原文</a>已被和谐</p>"},{"title":"POJ1330 Nearest Common Ancestors","id":"39","date":"2014-08-01T02:43:01.000Z","_content":"\nTime Limit: 1000MS Memory Limit: 10000K  \nTotal Submissions: 17734 Accepted: 9405\n\n##Description\nA rooted tree is a well-known data structure in computer science and engineering. An example is shown below:\n\nIn the figure, each node is labeled with an integer from {1, 2,...,16}. Node 8 is the root of the tree. Node x is an ancestor of node y if node x is in the path between the root and node y. For example, node 4 is an ancestor of node 16\\. Node 10 is also an ancestor of node 16\\. As a matter of fact, nodes 8, 4, 10, and 16 are the ancestors of node 16\\. Remember that a node is an ancestor of itself. Nodes 8, 4, 6, and 7 are the ancestors of node 7\\. A node x is called a common ancestor of two different nodes y and z if node x is an ancestor of node y and an ancestor of node z. Thus, nodes 8 and 4 are the common ancestors of nodes 16 and 7\\. A node x is called the nearest common ancestor of nodes y and z if x is a common ancestor of y and z and nearest to y and z among their common ancestors. Hence, the nearest common ancestor of nodes 16 and 7 is node 4\\. Node 4 is nearer to nodes 16 and 7 than node 8 is.\n<!--more-->\nFor other examples, the nearest common ancestor of nodes 2 and 3 is node 10, the nearest common ancestor of nodes 6 and 13 is node 8, and the nearest common ancestor of nodes 4 and 12 is node 4\\. In the last example, if y is an ancestor of z, then the nearest common ancestor of y and z is y.\n\nWrite a program that finds the nearest common ancestor of two distinct nodes in a tree.\n\n##Input\nThe input consists of T test cases. The number of test cases (T) is given in the first line of the input file. Each test case starts with a line containing an integer N , the number of nodes in a tree, 2&lt;=N&lt;=10,000\\. The nodes are labeled with integers 1, 2,..., N. Each of the next N -1 lines contains a pair of integers that represent an edge --the first integer is the parent node of the second integer. Note that a tree with N nodes has exactly N - 1 edges. The last line of each test case contains two distinct integers whose nearest common ancestor is to be computed.\n\n##Output\nPrint exactly one line for each test case. The line should contain the integer that is the nearest common ancestor.\n\n##Sample Input\n\n2\n16\n1 14\n8 5\n10 16\n5 9\n4 6\n8 4\n4 10\n1 13\n6 15\n10 11\n6 7\n10 2\n16 3\n8 1\n16 12\n16 7\n5\n2 3\n3 4\n3 1\n1 5\n3 5\n\n##Sample Output\n\n4\n3\n\n##Source\nTaejon 2002\n<br/>\n\n- - -\n\n\ntarjan+并查集求LCA模板。将u的子儿子v递归合并到u，若y在x的子树上，则根据并查集的性质，公共祖先即为x（father[y]）。若y和x不再同一子树上。则根据dfs回溯的性质，则搜完y之后一定是回溯到x,y的最近公共祖先才能搜到x的，而此时由并查集的性质，回溯的节点刚好就是father[y]。\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define MP make_pair\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SI(x) set&lt;x&gt;::iterator\n#define F first\n#define S second\n#define clrQ(x) while(!x.empty)x.pop();\n#define clrA(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf=~0u&gt;&gt;1;\nconst LL lnf=~0ull&gt;&gt;1;\n#define N 10005\n#define M 10005\nint n, m;\n//UnionSet\nint p[N];\nvoid initUset() {\n    for (int i = 0; i &lt;= n; i++)\n        p[i] = i;\n}\nint uFind(int x) {\n    return x == p[x] ? p[x] : p[x] = uFind(p[x]);\n}\nvoid uMerge(int x, int y) { //y合并到x\n    int fx = uFind(x);\n    int fy = uFind(y);\n    if (fx != fy)\n        p[fy]=fx;\n}\n//Edge Graph\nint head[N], pos;\nstruct Edge {\n    int v, nxt;\n} e[M];\nvoid initEdge() {\n    memset(head, -1, sizeof(head));\n    pos = 0;\n}\nvoid add(int u, int v) {\n    e[pos].v = v;\n    e[pos].nxt = head[u];\n    head[u] = pos++;\n}\nint findRoot(){//有向图选择入度为0的点，无向图不同节点做根，LCA结果将不同。\n    for (int i = 1; i &lt; n; i++)\n        if (indeg[i] == 0) return i;\n    return assert(false),-1;\n}\n//LCA\nint size, root;\nint vis[N];\nint ans[5];\nint indeg[N];\nvector&lt;pr&lt;int, int&gt; &gt; que[N];\nint dfs(int u) {\n    int solved=0;\n    for (int i = head[u]; ~i; i = e[i].nxt) {\n        int v = e[i].v;\n        solved+=dfs(v);\n        if(solved==size)return solved;\n        uMerge(u, v);\n    }\n    vis[u] = 1;\n    for (int i = 0; i &lt; (int) que[u].size(); i++) {\n        int v = que[u][i].F;\n        if (vis[v]) {\n            ans[que[u][i].S] = uFind(v);\n            solved++;\n        }\n    }\n    return solved;\n}\nvoid tarjan() {\n    clrA(vis,0);\n    dfs(findRoot());\n}\nint main() {\n    int T;\n    scanf(\"%d\", &amp;T);\n    while (T--) {\n        scanf(\"%d\", &amp;n);\n        initEdge();\n        int u, v;\n        clrA(indeg,0);\n        for (int i = 1; i &lt; n; i++) {\n            scanf(\"%d%d\", &amp;u, &amp;v);\n            add(u, v);\n            indeg[v]++;\n        }\n        initUset();\n        size = 1;//查询的次数\n        for(int i=1;i&lt;=n;i++)que[i].clear();\n        for (int i = 1; i &lt;= size; i++) {\n            scanf(\"%d%d\", &amp;u, &amp;v);\n            que[u].push_back(MP(v, i));\n            que[v].push_back(MP(u, i));\n        }\n        tarjan();\n        for (int i = 1; i &lt;= size; i++) {\n            printf(\"%d\\n\", ans[i]);\n        }\n    }\n}\n```\nLCA还可以用倍增来求：（思想很普通，只是以2进制的步长向上走：dp[i][j]表示节点i向上走2^j步到达的节点。）\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;cmath&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define MP make_pair\n#define SI(x) set&lt;x&gt;::iterator\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set&lt;x&gt;::reverse_iterator\n#define VRI(x) vector&lt;x&gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define qlr(x) while(!x.empty)x.pop();\n#define clr(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n#define N 10005\n#define M N-1\nint n;\nint head[N], pos;\nstruct edge {\n    int v, nxt;\n} e[M];\nvoid add(int u, int v) {\n    e[pos].v = v;\n    e[pos].nxt = head[u];\n    head[u] = pos++;\n}\nvoid initEdge() {\n    clr(head, -1);\n    pos = 0;\n}\nint deep[N];\nvector&lt;int&gt; dp[N];\nint size;\nint findRoot() {\n    for (int i = 1; i &lt;= n; i++) {\n        if (dp[i].empty()) return i;\n    }\n    return -1;\n}\nvoid getDeep(int u = findRoot()) {\n    for (int i = head[u]; ~i; i = e[i].nxt) {\n        int v = e[i].v;\n        deep[v] = deep[u] + 1;\n        getDeep(v);\n    }\n    size = max(size, deep[u] + 1);//记录最大深度\n}\nvoid initLCA() {\n    clr(deep, 0);\n    size = 0;\n    getDeep();\n    for (int len = 1,t=2;t&lt;=size; len++,t&lt;&lt;=1) {//跳出条件：(t=2^len)&lt;=size\n        for (int i = 1; i &lt;= n; i++) {\n            if ((int)dp[i].size() &gt;= len &amp;&amp; (int)dp[dp[i][len-1]].size() &gt;= len) {\n                dp[i].push_back(dp[dp[i][len-1]][len-1]);\n            }\n        }\n    }\n}\nint getLCA(int u, int v) {\n    if (deep[u] &lt; deep[v]) swap(u, v);\n    int d = deep[u] - deep[v];\n    for (int i = 0; d; i++, d &gt;&gt;= 1) {\n        u = d &amp; 1 ? dp[u][i] : u;\n    }//以差值二进制形式将u往上走差值\n    if (u == v) return u;\n    for (int i = min(dp[u].size(),dp[v].size())-1; i &gt;= 0; i--) {\n        if (dp[u][i] != dp[v][i]) {\n            u = dp[u][i];\n            v = dp[v][i];\n            i=(int)min(dp[u].size(),dp[v].size());//注意每次都要更新i！！\n        }\n    }\n    u = dp[u][0];\n    return u;\n}\nint main() {\n    int T;\n    cin &gt;&gt; T;\n    while (T--) {\n        scanf(\"%d\", &amp;n);\n        int u, v;\n        initEdge();\n        for (int i = 1; i &lt;= n; i++)\n            dp[i].clear();\n        for (int i = 1; i &lt; n; i++) {\n            scanf(\"%d%d\", &amp;u, &amp;v);\n            add(u, v);\n            dp[v].push_back(u);\n        }\n        initLCA();\n        scanf(\"%d%d\", &amp;u, &amp;v);\n        printf(\"%d\\n\", getLCA(u, v));\n    }\n}\n```\nLCA还可以转化为RMQ问题（个人更喜欢此方法，在线，且效率高）\n```C++\n//============================================================================\n// Name        : test3.cpp\n// Author      : \n// Version     :\n// Copyright   : Your copyright notice\n// Description : Hello World in C++, Ansi-style\n//============================================================================\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define MP make_pair\n#define SI(x) set&lt;x&gt;::iterator\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set&lt;x&gt;::reverse_iterator\n#define VRI(x) vector&lt;x&gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define clrQ(x) while(!x.empty)x.pop();\n#define clrA(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\nint n, m;\n#define N 10005\n#define M 10005\nint head[N], pos;\nstruct Edge {\n    int v, nxt;\n} e[M];\nvoid initEdge() {\n    memset(head, -1, sizeof(head));\n    pos = 0;\n}\nvoid add(int u, int v) {\n    e[pos].v = v;\n    e[pos].nxt = head[u];\n    head[u] = pos++;\n}\n//RMQ\nint dpM[20][N &lt;&lt; 1 | 1];\nint lg2[N &lt;&lt; 1 | 1];\n#define getLeft(R,L) (R-(L)+1)\nvoid initRMQ(int n) { //dp[0][i]表示区间i的值。预先处理出来。\n    lg2[0] = -1;\n    int limit;\n    for (int i = 1; i &lt;= n; i++) {\n        lg2[i] = i &amp; (i - 1) ? lg2[i - 1] : lg2[i - 1] + 1;\n    }\n    for (int i = 1; i &lt;= lg2[n]; i++) {\n        limit = getLeft(n, 1 &lt;&lt; i);\n        for (int j = 1; j &lt;= limit; j++) {\n            dpM[i][j] = min(dpM[i - 1][j], dpM[i - 1][j + (1 &lt;&lt; (i - 1))]);\n        }\n    }\n}\nint getRMQ(int x, int y) {\n    if (x &gt; y) swap(x, y);\n    int t = lg2[y - x + 1];\n    return min(dpM[t][x], dpM[t][getLeft(y, 1 &lt;&lt; t)]);\n}\n//LCA\nint depth, cnt;\nint inde[N], H[N], E[N];\n//dp[0][N&lt;&lt;1|1]深度序列（dfs编号），E[N]每个dfs编号对应的节点，H[N]节点第一次出现在dfs编号序列中的位置\nint findRoot() {\n    for (int i = 1; i &lt;= n; i++)\n        if (!inde[i]) return i;\n    return -1;\n}\nvoid getEuler(int u = findRoot()) {\n    int dfn = dpM[0][H[u] = ++cnt] = ++depth;\n    E[dfn] = u;\n    for (int i = head[u]; ~i; i = e[i].nxt) {\n        int v = e[i].v;\n        getEuler(v);\n        dpM[0][++cnt] = dfn;\n    }\n}\nvoid initLCA() {\n    depth = cnt = 0;\n    getEuler();\n    initRMQ(cnt);\n}\nint getLCA(int u, int v) {\n    if (H[u] &gt; H[v]) swap(u, v);\n    return E[getRMQ(H[u], H[v])];\n}\nint main() {\n    int T;\n    scanf(\"%d\", &amp;T);\n    while (T--) {\n        scanf(\"%d\", &amp;n);m=n-1;\n        int u, v;\n        initEdge();\n        memset(inde, 0, sizeof(inde));\n        for (int i = 1; i &lt;= m; i++) {\n            scanf(\"%d%d\", &amp;u, &amp;v);\n            add(u, v);\n            inde[v]++;\n        }\n        initLCA();\n        scanf(\"%d%d\", &amp;u, &amp;v);\n        printf(\"%d\\n\", getLCA(u, v));\n    }\n}\n```\n&nbsp;","source":"_posts/poj1330-nearest-common-ancestors.md","raw":"title: POJ1330 Nearest Common Ancestors\ntags:\n  - LCA\n  - 图论\n  - tarjan\n  - 倍增\ncategories:\n  - ACM\nid: 39\ndate: 2014-08-01 10:43:01\n---\n\nTime Limit: 1000MS Memory Limit: 10000K  \nTotal Submissions: 17734 Accepted: 9405\n\n##Description\nA rooted tree is a well-known data structure in computer science and engineering. An example is shown below:\n\nIn the figure, each node is labeled with an integer from {1, 2,...,16}. Node 8 is the root of the tree. Node x is an ancestor of node y if node x is in the path between the root and node y. For example, node 4 is an ancestor of node 16\\. Node 10 is also an ancestor of node 16\\. As a matter of fact, nodes 8, 4, 10, and 16 are the ancestors of node 16\\. Remember that a node is an ancestor of itself. Nodes 8, 4, 6, and 7 are the ancestors of node 7\\. A node x is called a common ancestor of two different nodes y and z if node x is an ancestor of node y and an ancestor of node z. Thus, nodes 8 and 4 are the common ancestors of nodes 16 and 7\\. A node x is called the nearest common ancestor of nodes y and z if x is a common ancestor of y and z and nearest to y and z among their common ancestors. Hence, the nearest common ancestor of nodes 16 and 7 is node 4\\. Node 4 is nearer to nodes 16 and 7 than node 8 is.\n<!--more-->\nFor other examples, the nearest common ancestor of nodes 2 and 3 is node 10, the nearest common ancestor of nodes 6 and 13 is node 8, and the nearest common ancestor of nodes 4 and 12 is node 4\\. In the last example, if y is an ancestor of z, then the nearest common ancestor of y and z is y.\n\nWrite a program that finds the nearest common ancestor of two distinct nodes in a tree.\n\n##Input\nThe input consists of T test cases. The number of test cases (T) is given in the first line of the input file. Each test case starts with a line containing an integer N , the number of nodes in a tree, 2&lt;=N&lt;=10,000\\. The nodes are labeled with integers 1, 2,..., N. Each of the next N -1 lines contains a pair of integers that represent an edge --the first integer is the parent node of the second integer. Note that a tree with N nodes has exactly N - 1 edges. The last line of each test case contains two distinct integers whose nearest common ancestor is to be computed.\n\n##Output\nPrint exactly one line for each test case. The line should contain the integer that is the nearest common ancestor.\n\n##Sample Input\n\n2\n16\n1 14\n8 5\n10 16\n5 9\n4 6\n8 4\n4 10\n1 13\n6 15\n10 11\n6 7\n10 2\n16 3\n8 1\n16 12\n16 7\n5\n2 3\n3 4\n3 1\n1 5\n3 5\n\n##Sample Output\n\n4\n3\n\n##Source\nTaejon 2002\n<br/>\n\n- - -\n\n\ntarjan+并查集求LCA模板。将u的子儿子v递归合并到u，若y在x的子树上，则根据并查集的性质，公共祖先即为x（father[y]）。若y和x不再同一子树上。则根据dfs回溯的性质，则搜完y之后一定是回溯到x,y的最近公共祖先才能搜到x的，而此时由并查集的性质，回溯的节点刚好就是father[y]。\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define MP make_pair\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SI(x) set&lt;x&gt;::iterator\n#define F first\n#define S second\n#define clrQ(x) while(!x.empty)x.pop();\n#define clrA(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf=~0u&gt;&gt;1;\nconst LL lnf=~0ull&gt;&gt;1;\n#define N 10005\n#define M 10005\nint n, m;\n//UnionSet\nint p[N];\nvoid initUset() {\n    for (int i = 0; i &lt;= n; i++)\n        p[i] = i;\n}\nint uFind(int x) {\n    return x == p[x] ? p[x] : p[x] = uFind(p[x]);\n}\nvoid uMerge(int x, int y) { //y合并到x\n    int fx = uFind(x);\n    int fy = uFind(y);\n    if (fx != fy)\n        p[fy]=fx;\n}\n//Edge Graph\nint head[N], pos;\nstruct Edge {\n    int v, nxt;\n} e[M];\nvoid initEdge() {\n    memset(head, -1, sizeof(head));\n    pos = 0;\n}\nvoid add(int u, int v) {\n    e[pos].v = v;\n    e[pos].nxt = head[u];\n    head[u] = pos++;\n}\nint findRoot(){//有向图选择入度为0的点，无向图不同节点做根，LCA结果将不同。\n    for (int i = 1; i &lt; n; i++)\n        if (indeg[i] == 0) return i;\n    return assert(false),-1;\n}\n//LCA\nint size, root;\nint vis[N];\nint ans[5];\nint indeg[N];\nvector&lt;pr&lt;int, int&gt; &gt; que[N];\nint dfs(int u) {\n    int solved=0;\n    for (int i = head[u]; ~i; i = e[i].nxt) {\n        int v = e[i].v;\n        solved+=dfs(v);\n        if(solved==size)return solved;\n        uMerge(u, v);\n    }\n    vis[u] = 1;\n    for (int i = 0; i &lt; (int) que[u].size(); i++) {\n        int v = que[u][i].F;\n        if (vis[v]) {\n            ans[que[u][i].S] = uFind(v);\n            solved++;\n        }\n    }\n    return solved;\n}\nvoid tarjan() {\n    clrA(vis,0);\n    dfs(findRoot());\n}\nint main() {\n    int T;\n    scanf(\"%d\", &amp;T);\n    while (T--) {\n        scanf(\"%d\", &amp;n);\n        initEdge();\n        int u, v;\n        clrA(indeg,0);\n        for (int i = 1; i &lt; n; i++) {\n            scanf(\"%d%d\", &amp;u, &amp;v);\n            add(u, v);\n            indeg[v]++;\n        }\n        initUset();\n        size = 1;//查询的次数\n        for(int i=1;i&lt;=n;i++)que[i].clear();\n        for (int i = 1; i &lt;= size; i++) {\n            scanf(\"%d%d\", &amp;u, &amp;v);\n            que[u].push_back(MP(v, i));\n            que[v].push_back(MP(u, i));\n        }\n        tarjan();\n        for (int i = 1; i &lt;= size; i++) {\n            printf(\"%d\\n\", ans[i]);\n        }\n    }\n}\n```\nLCA还可以用倍增来求：（思想很普通，只是以2进制的步长向上走：dp[i][j]表示节点i向上走2^j步到达的节点。）\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;cmath&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define MP make_pair\n#define SI(x) set&lt;x&gt;::iterator\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set&lt;x&gt;::reverse_iterator\n#define VRI(x) vector&lt;x&gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define qlr(x) while(!x.empty)x.pop();\n#define clr(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n#define N 10005\n#define M N-1\nint n;\nint head[N], pos;\nstruct edge {\n    int v, nxt;\n} e[M];\nvoid add(int u, int v) {\n    e[pos].v = v;\n    e[pos].nxt = head[u];\n    head[u] = pos++;\n}\nvoid initEdge() {\n    clr(head, -1);\n    pos = 0;\n}\nint deep[N];\nvector&lt;int&gt; dp[N];\nint size;\nint findRoot() {\n    for (int i = 1; i &lt;= n; i++) {\n        if (dp[i].empty()) return i;\n    }\n    return -1;\n}\nvoid getDeep(int u = findRoot()) {\n    for (int i = head[u]; ~i; i = e[i].nxt) {\n        int v = e[i].v;\n        deep[v] = deep[u] + 1;\n        getDeep(v);\n    }\n    size = max(size, deep[u] + 1);//记录最大深度\n}\nvoid initLCA() {\n    clr(deep, 0);\n    size = 0;\n    getDeep();\n    for (int len = 1,t=2;t&lt;=size; len++,t&lt;&lt;=1) {//跳出条件：(t=2^len)&lt;=size\n        for (int i = 1; i &lt;= n; i++) {\n            if ((int)dp[i].size() &gt;= len &amp;&amp; (int)dp[dp[i][len-1]].size() &gt;= len) {\n                dp[i].push_back(dp[dp[i][len-1]][len-1]);\n            }\n        }\n    }\n}\nint getLCA(int u, int v) {\n    if (deep[u] &lt; deep[v]) swap(u, v);\n    int d = deep[u] - deep[v];\n    for (int i = 0; d; i++, d &gt;&gt;= 1) {\n        u = d &amp; 1 ? dp[u][i] : u;\n    }//以差值二进制形式将u往上走差值\n    if (u == v) return u;\n    for (int i = min(dp[u].size(),dp[v].size())-1; i &gt;= 0; i--) {\n        if (dp[u][i] != dp[v][i]) {\n            u = dp[u][i];\n            v = dp[v][i];\n            i=(int)min(dp[u].size(),dp[v].size());//注意每次都要更新i！！\n        }\n    }\n    u = dp[u][0];\n    return u;\n}\nint main() {\n    int T;\n    cin &gt;&gt; T;\n    while (T--) {\n        scanf(\"%d\", &amp;n);\n        int u, v;\n        initEdge();\n        for (int i = 1; i &lt;= n; i++)\n            dp[i].clear();\n        for (int i = 1; i &lt; n; i++) {\n            scanf(\"%d%d\", &amp;u, &amp;v);\n            add(u, v);\n            dp[v].push_back(u);\n        }\n        initLCA();\n        scanf(\"%d%d\", &amp;u, &amp;v);\n        printf(\"%d\\n\", getLCA(u, v));\n    }\n}\n```\nLCA还可以转化为RMQ问题（个人更喜欢此方法，在线，且效率高）\n```C++\n//============================================================================\n// Name        : test3.cpp\n// Author      : \n// Version     :\n// Copyright   : Your copyright notice\n// Description : Hello World in C++, Ansi-style\n//============================================================================\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define MP make_pair\n#define SI(x) set&lt;x&gt;::iterator\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set&lt;x&gt;::reverse_iterator\n#define VRI(x) vector&lt;x&gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define clrQ(x) while(!x.empty)x.pop();\n#define clrA(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\nint n, m;\n#define N 10005\n#define M 10005\nint head[N], pos;\nstruct Edge {\n    int v, nxt;\n} e[M];\nvoid initEdge() {\n    memset(head, -1, sizeof(head));\n    pos = 0;\n}\nvoid add(int u, int v) {\n    e[pos].v = v;\n    e[pos].nxt = head[u];\n    head[u] = pos++;\n}\n//RMQ\nint dpM[20][N &lt;&lt; 1 | 1];\nint lg2[N &lt;&lt; 1 | 1];\n#define getLeft(R,L) (R-(L)+1)\nvoid initRMQ(int n) { //dp[0][i]表示区间i的值。预先处理出来。\n    lg2[0] = -1;\n    int limit;\n    for (int i = 1; i &lt;= n; i++) {\n        lg2[i] = i &amp; (i - 1) ? lg2[i - 1] : lg2[i - 1] + 1;\n    }\n    for (int i = 1; i &lt;= lg2[n]; i++) {\n        limit = getLeft(n, 1 &lt;&lt; i);\n        for (int j = 1; j &lt;= limit; j++) {\n            dpM[i][j] = min(dpM[i - 1][j], dpM[i - 1][j + (1 &lt;&lt; (i - 1))]);\n        }\n    }\n}\nint getRMQ(int x, int y) {\n    if (x &gt; y) swap(x, y);\n    int t = lg2[y - x + 1];\n    return min(dpM[t][x], dpM[t][getLeft(y, 1 &lt;&lt; t)]);\n}\n//LCA\nint depth, cnt;\nint inde[N], H[N], E[N];\n//dp[0][N&lt;&lt;1|1]深度序列（dfs编号），E[N]每个dfs编号对应的节点，H[N]节点第一次出现在dfs编号序列中的位置\nint findRoot() {\n    for (int i = 1; i &lt;= n; i++)\n        if (!inde[i]) return i;\n    return -1;\n}\nvoid getEuler(int u = findRoot()) {\n    int dfn = dpM[0][H[u] = ++cnt] = ++depth;\n    E[dfn] = u;\n    for (int i = head[u]; ~i; i = e[i].nxt) {\n        int v = e[i].v;\n        getEuler(v);\n        dpM[0][++cnt] = dfn;\n    }\n}\nvoid initLCA() {\n    depth = cnt = 0;\n    getEuler();\n    initRMQ(cnt);\n}\nint getLCA(int u, int v) {\n    if (H[u] &gt; H[v]) swap(u, v);\n    return E[getRMQ(H[u], H[v])];\n}\nint main() {\n    int T;\n    scanf(\"%d\", &amp;T);\n    while (T--) {\n        scanf(\"%d\", &amp;n);m=n-1;\n        int u, v;\n        initEdge();\n        memset(inde, 0, sizeof(inde));\n        for (int i = 1; i &lt;= m; i++) {\n            scanf(\"%d%d\", &amp;u, &amp;v);\n            add(u, v);\n            inde[v]++;\n        }\n        initLCA();\n        scanf(\"%d%d\", &amp;u, &amp;v);\n        printf(\"%d\\n\", getLCA(u, v));\n    }\n}\n```\n&nbsp;","slug":"poj1330-nearest-common-ancestors","published":1,"updated":"2015-02-26T02:56:21.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8o1001mwppvgoxcxcvr","content":"<p>Time Limit: 1000MS Memory Limit: 10000K<br>Total Submissions: 17734 Accepted: 9405</p>\n<p>##Description<br>A rooted tree is a well-known data structure in computer science and engineering. An example is shown below:</p>\n<p>In the figure, each node is labeled with an integer from {1, 2,…,16}. Node 8 is the root of the tree. Node x is an ancestor of node y if node x is in the path between the root and node y. For example, node 4 is an ancestor of node 16. Node 10 is also an ancestor of node 16. As a matter of fact, nodes 8, 4, 10, and 16 are the ancestors of node 16. Remember that a node is an ancestor of itself. Nodes 8, 4, 6, and 7 are the ancestors of node 7. A node x is called a common ancestor of two different nodes y and z if node x is an ancestor of node y and an ancestor of node z. Thus, nodes 8 and 4 are the common ancestors of nodes 16 and 7. A node x is called the nearest common ancestor of nodes y and z if x is a common ancestor of y and z and nearest to y and z among their common ancestors. Hence, the nearest common ancestor of nodes 16 and 7 is node 4. Node 4 is nearer to nodes 16 and 7 than node 8 is.<br><a id=\"more\"></a><br>For other examples, the nearest common ancestor of nodes 2 and 3 is node 10, the nearest common ancestor of nodes 6 and 13 is node 8, and the nearest common ancestor of nodes 4 and 12 is node 4. In the last example, if y is an ancestor of z, then the nearest common ancestor of y and z is y.</p>\n<p>Write a program that finds the nearest common ancestor of two distinct nodes in a tree.</p>\n<p>##Input<br>The input consists of T test cases. The number of test cases (T) is given in the first line of the input file. Each test case starts with a line containing an integer N , the number of nodes in a tree, 2&lt;=N&lt;=10,000. The nodes are labeled with integers 1, 2,…, N. Each of the next N -1 lines contains a pair of integers that represent an edge –the first integer is the parent node of the second integer. Note that a tree with N nodes has exactly N - 1 edges. The last line of each test case contains two distinct integers whose nearest common ancestor is to be computed.</p>\n<p>##Output<br>Print exactly one line for each test case. The line should contain the integer that is the nearest common ancestor.</p>\n<p>##Sample Input</p>\n<p>2<br>16<br>1 14<br>8 5<br>10 16<br>5 9<br>4 6<br>8 4<br>4 10<br>1 13<br>6 15<br>10 11<br>6 7<br>10 2<br>16 3<br>8 1<br>16 12<br>16 7<br>5<br>2 3<br>3 4<br>3 1<br>1 5<br>3 5</p>\n<p>##Sample Output</p>\n<p>4<br>3</p>\n<p>##Source<br>Taejon 2002<br><br></p>\n<hr>\n<p>tarjan+并查集求LCA模板。将u的子儿子v递归合并到u，若y在x的子树上，则根据并查集的性质，公共祖先即为x（father[y]）。若y和x不再同一子树上。则根据dfs回溯的性质，则搜完y之后一定是回溯到x,y的最近公共祖先才能搜到x的，而此时由并查集的性质，回溯的节点刚好就是father[y]。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;map&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;set&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;stack&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;queue&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;string&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstdio&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;vector&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cctype&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cassert&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;utility&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;numeric&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstring&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;iostream&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;algorithm&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pr pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MP make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrQ(x) while(!x.empty)x.pop();</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrA(x,y) memset(x,y,sizeof(x));</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf=~<span class=\"number\">0u</span>&amp;gt;&amp;gt;<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL lnf=~<span class=\"number\">0u</span>ll&amp;gt;&amp;gt;<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 10005</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 10005</span></div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"comment\">//UnionSet</span></div><div class=\"line\"><span class=\"keyword\">int</span> p[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initUset</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt;= n; i++)</div><div class=\"line\">        p[i] = i;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">uFind</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x == p[x] ? p[x] : p[x] = uFind(p[x]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">uMerge</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123; <span class=\"comment\">//y合并到x</span></div><div class=\"line\">    <span class=\"keyword\">int</span> fx = uFind(x);</div><div class=\"line\">    <span class=\"keyword\">int</span> fy = uFind(y);</div><div class=\"line\">    <span class=\"keyword\">if</span> (fx != fy)</div><div class=\"line\">        p[fy]=fx;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Edge Graph</span></div><div class=\"line\"><span class=\"keyword\">int</span> head[N], pos;</div><div class=\"line\"><span class=\"keyword\">struct</span> Edge &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> v, nxt;</div><div class=\"line\">&#125; e[M];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initEdge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</div><div class=\"line\">    pos = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</div><div class=\"line\">    e[pos].v = v;</div><div class=\"line\">    e[pos].nxt = head[u];</div><div class=\"line\">    head[u] = pos++;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findRoot</span><span class=\"params\">()</span></span>&#123;<span class=\"comment\">//有向图选择入度为0的点，无向图不同节点做根，LCA结果将不同。</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt; n; i++)</div><div class=\"line\">        <span class=\"keyword\">if</span> (indeg[i] == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> i;</div><div class=\"line\">    <span class=\"keyword\">return</span> assert(<span class=\"literal\">false</span>),<span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//LCA</span></div><div class=\"line\"><span class=\"keyword\">int</span> size, root;</div><div class=\"line\"><span class=\"keyword\">int</span> vis[N];</div><div class=\"line\"><span class=\"keyword\">int</span> ans[<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> indeg[N];</div><div class=\"line\"><span class=\"built_in\">vector</span>&amp;lt;pr&amp;lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&amp;gt; &amp;gt; que[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> solved=<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = e[i].v;</div><div class=\"line\">        solved+=dfs(v);</div><div class=\"line\">        <span class=\"keyword\">if</span>(solved==size)<span class=\"keyword\">return</span> solved;</div><div class=\"line\">        uMerge(u, v);</div><div class=\"line\">    &#125;</div><div class=\"line\">    vis[u] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; (<span class=\"keyword\">int</span>) que[u].size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = que[u][i].F;</div><div class=\"line\">        <span class=\"keyword\">if</span> (vis[v]) &#123;</div><div class=\"line\">            ans[que[u][i].S] = uFind(v);</div><div class=\"line\">            solved++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> solved;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    clrA(vis,<span class=\"number\">0</span>);</div><div class=\"line\">    dfs(findRoot());</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> T;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;amp;T);</div><div class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;amp;n);</div><div class=\"line\">        initEdge();</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v;</div><div class=\"line\">        clrA(indeg,<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;amp;u, &amp;amp;v);</div><div class=\"line\">            add(u, v);</div><div class=\"line\">            indeg[v]++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        initUset();</div><div class=\"line\">        size = <span class=\"number\">1</span>;<span class=\"comment\">//查询的次数</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&amp;lt;=n;i++)que[i].clear();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= size; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;amp;u, &amp;amp;v);</div><div class=\"line\">            que[u].push_back(MP(v, i));</div><div class=\"line\">            que[v].push_back(MP(u, i));</div><div class=\"line\">        &#125;</div><div class=\"line\">        tarjan();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= size; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>LCA还可以用倍增来求：（思想很普通，只是以2进制的步长向上走：dp[i][j]表示节点i向上走2^j步到达的节点。）<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&amp;lt;map&amp;gt;</div><div class=\"line\">#include&amp;lt;set&amp;gt;</div><div class=\"line\">#include&amp;lt;cmath&amp;gt;</div><div class=\"line\">#include&amp;lt;stack&amp;gt;</div><div class=\"line\">#include&amp;lt;queue&amp;gt;</div><div class=\"line\">#include&amp;lt;string&amp;gt;</div><div class=\"line\">#include&amp;lt;cstdio&amp;gt;</div><div class=\"line\">#include&amp;lt;vector&amp;gt;</div><div class=\"line\">#include&amp;lt;cctype&amp;gt;</div><div class=\"line\">#include&amp;lt;cassert&amp;gt;</div><div class=\"line\">#include&amp;lt;utility&amp;gt;</div><div class=\"line\">#include&amp;lt;numeric&amp;gt;</div><div class=\"line\">#include&amp;lt;cstring&amp;gt;</div><div class=\"line\">#include&amp;lt;iostream&amp;gt;</div><div class=\"line\">#include&amp;lt;algorithm&amp;gt;</div><div class=\"line\">using namespace std;</div><div class=\"line\">#define pr pair</div><div class=\"line\">#define MP make_pair</div><div class=\"line\">#define SI(x) set&amp;lt;x&amp;gt;::iterator</div><div class=\"line\">#define VI(x) vector&amp;lt;x&amp;gt;::iterator</div><div class=\"line\">#define MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</div><div class=\"line\">#define SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</div><div class=\"line\">#define VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</div><div class=\"line\">#define MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</div><div class=\"line\">#define F first</div><div class=\"line\">#define S second</div><div class=\"line\">#define qlr(x) while(!x.empty)x.pop();</div><div class=\"line\">#define clr(x,y) memset(x,y,sizeof(x));</div><div class=\"line\">#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</div><div class=\"line\">#define LL __int64</div><div class=\"line\">#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"</div><div class=\"line\">#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"</div><div class=\"line\">#define LL_MAX _I64_MAX</div><div class=\"line\">#else</div><div class=\"line\">#define LL long long</div><div class=\"line\">#define LLS \"%\" \"l\" \"l\" \"d\"</div><div class=\"line\">#define LLU \"%\" \"l\" \"l\" \"u\"</div><div class=\"line\">#define LL_MAX _I64_MAX</div><div class=\"line\">#endif</div><div class=\"line\">const int inf = ~0u &amp;gt;&amp;gt; 1;</div><div class=\"line\">const LL lnf = ~0ull &amp;gt;&amp;gt; 1;</div><div class=\"line\">#define N 10005</div><div class=\"line\">#define M N-1</div><div class=\"line\">int n;</div><div class=\"line\">int head[N], pos;</div><div class=\"line\">struct edge &#123;</div><div class=\"line\">    int v, nxt;</div><div class=\"line\">&#125; e[M];</div><div class=\"line\">void add(int u, int v) &#123;</div><div class=\"line\">    e[pos].v = v;</div><div class=\"line\">    e[pos].nxt = head[u];</div><div class=\"line\">    head[u] = pos++;</div><div class=\"line\">&#125;</div><div class=\"line\">void initEdge() &#123;</div><div class=\"line\">    clr(head, -1);</div><div class=\"line\">    pos = 0;</div><div class=\"line\">&#125;</div><div class=\"line\">int deep[N];</div><div class=\"line\">vector&amp;lt;int&amp;gt; dp[N];</div><div class=\"line\">int size;</div><div class=\"line\">int findRoot() &#123;</div><div class=\"line\">    for (int i = 1; i &amp;lt;= n; i++) &#123;</div><div class=\"line\">        if (dp[i].empty()) return i;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return -1;</div><div class=\"line\">&#125;</div><div class=\"line\">void getDeep(int u = findRoot()) &#123;</div><div class=\"line\">    for (int i = head[u]; ~i; i = e[i].nxt) &#123;</div><div class=\"line\">        int v = e[i].v;</div><div class=\"line\">        deep[v] = deep[u] + 1;</div><div class=\"line\">        getDeep(v);</div><div class=\"line\">    &#125;</div><div class=\"line\">    size = max(size, deep[u] + 1);//记录最大深度</div><div class=\"line\">&#125;</div><div class=\"line\">void initLCA() &#123;</div><div class=\"line\">    clr(deep, 0);</div><div class=\"line\">    size = 0;</div><div class=\"line\">    getDeep();</div><div class=\"line\">    for (int len = 1,t=2;t&amp;lt;=size; len++,t&amp;lt;&amp;lt;=1) &#123;//跳出条件：(t=2^len)&amp;lt;=size</div><div class=\"line\">        for (int i = 1; i &amp;lt;= n; i++) &#123;</div><div class=\"line\">            if ((int)dp[i].size() &amp;gt;= len &amp;amp;&amp;amp; (int)dp[dp[i][len-1]].size() &amp;gt;= len) &#123;</div><div class=\"line\">                dp[i].push_back(dp[dp[i][len-1]][len-1]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">int getLCA(int u, int v) &#123;</div><div class=\"line\">    if (deep[u] &amp;lt; deep[v]) swap(u, v);</div><div class=\"line\">    int d = deep[u] - deep[v];</div><div class=\"line\">    for (int i = 0; d; i++, d &amp;gt;&amp;gt;= 1) &#123;</div><div class=\"line\">        u = d &amp;amp; 1 ? dp[u][i] : u;</div><div class=\"line\">    &#125;//以差值二进制形式将u往上走差值</div><div class=\"line\">    if (u == v) return u;</div><div class=\"line\">    for (int i = min(dp[u].size(),dp[v].size())-1; i &amp;gt;= 0; i--) &#123;</div><div class=\"line\">        if (dp[u][i] != dp[v][i]) &#123;</div><div class=\"line\">            u = dp[u][i];</div><div class=\"line\">            v = dp[v][i];</div><div class=\"line\">            i=(int)min(dp[u].size(),dp[v].size());//注意每次都要更新i！！</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    u = dp[u][0];</div><div class=\"line\">    return u;</div><div class=\"line\">&#125;</div><div class=\"line\">int main() &#123;</div><div class=\"line\">    int T;</div><div class=\"line\">    cin &amp;gt;&amp;gt; T;</div><div class=\"line\">    while (T--) &#123;</div><div class=\"line\">        scanf(\"%d\", &amp;amp;n);</div><div class=\"line\">        int u, v;</div><div class=\"line\">        initEdge();</div><div class=\"line\">        for (int i = 1; i &amp;lt;= n; i++)</div><div class=\"line\">            dp[i].clear();</div><div class=\"line\">        for (int i = 1; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            scanf(\"%d%d\", &amp;amp;u, &amp;amp;v);</div><div class=\"line\">            add(u, v);</div><div class=\"line\">            dp[v].push_back(u);</div><div class=\"line\">        &#125;</div><div class=\"line\">        initLCA();</div><div class=\"line\">        scanf(\"%d%d\", &amp;amp;u, &amp;amp;v);</div><div class=\"line\">        printf(\"%d\\n\", getLCA(u, v));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>LCA还可以转化为RMQ问题（个人更喜欢此方法，在线，且效率高）<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div></pre></td><td class=\"code\"><pre><div class=\"line\">//============================================================================</div><div class=\"line\">// Name        : test3.cpp</div><div class=\"line\">// Author      : </div><div class=\"line\">// Version     :</div><div class=\"line\">// Copyright   : Your copyright notice</div><div class=\"line\">// Description : Hello World in C++, Ansi-style</div><div class=\"line\">//============================================================================</div><div class=\"line\">#include&amp;lt;map&amp;gt;</div><div class=\"line\">#include&amp;lt;set&amp;gt;</div><div class=\"line\">#include&amp;lt;stack&amp;gt;</div><div class=\"line\">#include&amp;lt;queue&amp;gt;</div><div class=\"line\">#include&amp;lt;string&amp;gt;</div><div class=\"line\">#include&amp;lt;cstdio&amp;gt;</div><div class=\"line\">#include&amp;lt;vector&amp;gt;</div><div class=\"line\">#include&amp;lt;cctype&amp;gt;</div><div class=\"line\">#include&amp;lt;cassert&amp;gt;</div><div class=\"line\">#include&amp;lt;utility&amp;gt;</div><div class=\"line\">#include&amp;lt;numeric&amp;gt;</div><div class=\"line\">#include&amp;lt;cstring&amp;gt;</div><div class=\"line\">#include&amp;lt;iostream&amp;gt;</div><div class=\"line\">#include&amp;lt;algorithm&amp;gt;</div><div class=\"line\">using namespace std;</div><div class=\"line\">#define pr pair</div><div class=\"line\">#define MP make_pair</div><div class=\"line\">#define SI(x) set&amp;lt;x&amp;gt;::iterator</div><div class=\"line\">#define VI(x) vector&amp;lt;x&amp;gt;::iterator</div><div class=\"line\">#define MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</div><div class=\"line\">#define SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</div><div class=\"line\">#define VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</div><div class=\"line\">#define MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</div><div class=\"line\">#define F first</div><div class=\"line\">#define S second</div><div class=\"line\">#define clrQ(x) while(!x.empty)x.pop();</div><div class=\"line\">#define clrA(x,y) memset(x,y,sizeof(x));</div><div class=\"line\">#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</div><div class=\"line\">#define LL __int64</div><div class=\"line\">#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"</div><div class=\"line\">#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"</div><div class=\"line\">#define LL_MAX _I64_MAX</div><div class=\"line\">#else</div><div class=\"line\">#define LL long long</div><div class=\"line\">#define LLS \"%\" \"l\" \"l\" \"d\"</div><div class=\"line\">#define LLU \"%\" \"l\" \"l\" \"u\"</div><div class=\"line\">#define LL_MAX _I64_MAX</div><div class=\"line\">#endif</div><div class=\"line\">const int inf = ~0u &amp;gt;&amp;gt; 1;</div><div class=\"line\">const LL lnf = ~0ull &amp;gt;&amp;gt; 1;</div><div class=\"line\">int n, m;</div><div class=\"line\">#define N 10005</div><div class=\"line\">#define M 10005</div><div class=\"line\">int head[N], pos;</div><div class=\"line\">struct Edge &#123;</div><div class=\"line\">    int v, nxt;</div><div class=\"line\">&#125; e[M];</div><div class=\"line\">void initEdge() &#123;</div><div class=\"line\">    memset(head, -1, sizeof(head));</div><div class=\"line\">    pos = 0;</div><div class=\"line\">&#125;</div><div class=\"line\">void add(int u, int v) &#123;</div><div class=\"line\">    e[pos].v = v;</div><div class=\"line\">    e[pos].nxt = head[u];</div><div class=\"line\">    head[u] = pos++;</div><div class=\"line\">&#125;</div><div class=\"line\">//RMQ</div><div class=\"line\">int dpM[20][N &amp;lt;&amp;lt; 1 | 1];</div><div class=\"line\">int lg2[N &amp;lt;&amp;lt; 1 | 1];</div><div class=\"line\">#define getLeft(R,L) (R-(L)+1)</div><div class=\"line\">void initRMQ(int n) &#123; //dp[0][i]表示区间i的值。预先处理出来。</div><div class=\"line\">    lg2[0] = -1;</div><div class=\"line\">    int limit;</div><div class=\"line\">    for (int i = 1; i &amp;lt;= n; i++) &#123;</div><div class=\"line\">        lg2[i] = i &amp;amp; (i - 1) ? lg2[i - 1] : lg2[i - 1] + 1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    for (int i = 1; i &amp;lt;= lg2[n]; i++) &#123;</div><div class=\"line\">        limit = getLeft(n, 1 &amp;lt;&amp;lt; i);</div><div class=\"line\">        for (int j = 1; j &amp;lt;= limit; j++) &#123;</div><div class=\"line\">            dpM[i][j] = min(dpM[i - 1][j], dpM[i - 1][j + (1 &amp;lt;&amp;lt; (i - 1))]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">int getRMQ(int x, int y) &#123;</div><div class=\"line\">    if (x &amp;gt; y) swap(x, y);</div><div class=\"line\">    int t = lg2[y - x + 1];</div><div class=\"line\">    return min(dpM[t][x], dpM[t][getLeft(y, 1 &amp;lt;&amp;lt; t)]);</div><div class=\"line\">&#125;</div><div class=\"line\">//LCA</div><div class=\"line\">int depth, cnt;</div><div class=\"line\">int inde[N], H[N], E[N];</div><div class=\"line\">//dp[0][N&amp;lt;&amp;lt;1|1]深度序列（dfs编号），E[N]每个dfs编号对应的节点，H[N]节点第一次出现在dfs编号序列中的位置</div><div class=\"line\">int findRoot() &#123;</div><div class=\"line\">    for (int i = 1; i &amp;lt;= n; i++)</div><div class=\"line\">        if (!inde[i]) return i;</div><div class=\"line\">    return -1;</div><div class=\"line\">&#125;</div><div class=\"line\">void getEuler(int u = findRoot()) &#123;</div><div class=\"line\">    int dfn = dpM[0][H[u] = ++cnt] = ++depth;</div><div class=\"line\">    E[dfn] = u;</div><div class=\"line\">    for (int i = head[u]; ~i; i = e[i].nxt) &#123;</div><div class=\"line\">        int v = e[i].v;</div><div class=\"line\">        getEuler(v);</div><div class=\"line\">        dpM[0][++cnt] = dfn;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">void initLCA() &#123;</div><div class=\"line\">    depth = cnt = 0;</div><div class=\"line\">    getEuler();</div><div class=\"line\">    initRMQ(cnt);</div><div class=\"line\">&#125;</div><div class=\"line\">int getLCA(int u, int v) &#123;</div><div class=\"line\">    if (H[u] &amp;gt; H[v]) swap(u, v);</div><div class=\"line\">    return E[getRMQ(H[u], H[v])];</div><div class=\"line\">&#125;</div><div class=\"line\">int main() &#123;</div><div class=\"line\">    int T;</div><div class=\"line\">    scanf(\"%d\", &amp;amp;T);</div><div class=\"line\">    while (T--) &#123;</div><div class=\"line\">        scanf(\"%d\", &amp;amp;n);m=n-1;</div><div class=\"line\">        int u, v;</div><div class=\"line\">        initEdge();</div><div class=\"line\">        memset(inde, 0, sizeof(inde));</div><div class=\"line\">        for (int i = 1; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">            scanf(\"%d%d\", &amp;amp;u, &amp;amp;v);</div><div class=\"line\">            add(u, v);</div><div class=\"line\">            inde[v]++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        initLCA();</div><div class=\"line\">        scanf(\"%d%d\", &amp;amp;u, &amp;amp;v);</div><div class=\"line\">        printf(\"%d\\n\", getLCA(u, v));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n","excerpt":"<p>Time Limit: 1000MS Memory Limit: 10000K<br>Total Submissions: 17734 Accepted: 9405</p>\n<p>##Description<br>A rooted tree is a well-known data structure in computer science and engineering. An example is shown below:</p>\n<p>In the figure, each node is labeled with an integer from {1, 2,…,16}. Node 8 is the root of the tree. Node x is an ancestor of node y if node x is in the path between the root and node y. For example, node 4 is an ancestor of node 16. Node 10 is also an ancestor of node 16. As a matter of fact, nodes 8, 4, 10, and 16 are the ancestors of node 16. Remember that a node is an ancestor of itself. Nodes 8, 4, 6, and 7 are the ancestors of node 7. A node x is called a common ancestor of two different nodes y and z if node x is an ancestor of node y and an ancestor of node z. Thus, nodes 8 and 4 are the common ancestors of nodes 16 and 7. A node x is called the nearest common ancestor of nodes y and z if x is a common ancestor of y and z and nearest to y and z among their common ancestors. Hence, the nearest common ancestor of nodes 16 and 7 is node 4. Node 4 is nearer to nodes 16 and 7 than node 8 is.<br>","more":"<br>For other examples, the nearest common ancestor of nodes 2 and 3 is node 10, the nearest common ancestor of nodes 6 and 13 is node 8, and the nearest common ancestor of nodes 4 and 12 is node 4. In the last example, if y is an ancestor of z, then the nearest common ancestor of y and z is y.</p>\n<p>Write a program that finds the nearest common ancestor of two distinct nodes in a tree.</p>\n<p>##Input<br>The input consists of T test cases. The number of test cases (T) is given in the first line of the input file. Each test case starts with a line containing an integer N , the number of nodes in a tree, 2&lt;=N&lt;=10,000. The nodes are labeled with integers 1, 2,…, N. Each of the next N -1 lines contains a pair of integers that represent an edge –the first integer is the parent node of the second integer. Note that a tree with N nodes has exactly N - 1 edges. The last line of each test case contains two distinct integers whose nearest common ancestor is to be computed.</p>\n<p>##Output<br>Print exactly one line for each test case. The line should contain the integer that is the nearest common ancestor.</p>\n<p>##Sample Input</p>\n<p>2<br>16<br>1 14<br>8 5<br>10 16<br>5 9<br>4 6<br>8 4<br>4 10<br>1 13<br>6 15<br>10 11<br>6 7<br>10 2<br>16 3<br>8 1<br>16 12<br>16 7<br>5<br>2 3<br>3 4<br>3 1<br>1 5<br>3 5</p>\n<p>##Sample Output</p>\n<p>4<br>3</p>\n<p>##Source<br>Taejon 2002<br><br/></p>\n<hr>\n<p>tarjan+并查集求LCA模板。将u的子儿子v递归合并到u，若y在x的子树上，则根据并查集的性质，公共祖先即为x（father[y]）。若y和x不再同一子树上。则根据dfs回溯的性质，则搜完y之后一定是回溯到x,y的最近公共祖先才能搜到x的，而此时由并查集的性质，回溯的节点刚好就是father[y]。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;map&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;set&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;stack&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;queue&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;string&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstdio&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;vector&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cctype&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cassert&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;utility&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;numeric&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstring&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;iostream&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;algorithm&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pr pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MP make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrQ(x) while(!x.empty)x.pop();</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrA(x,y) memset(x,y,sizeof(x));</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf=~<span class=\"number\">0u</span>&amp;gt;&amp;gt;<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL lnf=~<span class=\"number\">0u</span>ll&amp;gt;&amp;gt;<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 10005</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 10005</span></div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"comment\">//UnionSet</span></div><div class=\"line\"><span class=\"keyword\">int</span> p[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initUset</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt;= n; i++)</div><div class=\"line\">        p[i] = i;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">uFind</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x == p[x] ? p[x] : p[x] = uFind(p[x]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">uMerge</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123; <span class=\"comment\">//y合并到x</span></div><div class=\"line\">    <span class=\"keyword\">int</span> fx = uFind(x);</div><div class=\"line\">    <span class=\"keyword\">int</span> fy = uFind(y);</div><div class=\"line\">    <span class=\"keyword\">if</span> (fx != fy)</div><div class=\"line\">        p[fy]=fx;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Edge Graph</span></div><div class=\"line\"><span class=\"keyword\">int</span> head[N], pos;</div><div class=\"line\"><span class=\"keyword\">struct</span> Edge &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> v, nxt;</div><div class=\"line\">&#125; e[M];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initEdge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</div><div class=\"line\">    pos = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</div><div class=\"line\">    e[pos].v = v;</div><div class=\"line\">    e[pos].nxt = head[u];</div><div class=\"line\">    head[u] = pos++;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findRoot</span><span class=\"params\">()</span></span>&#123;<span class=\"comment\">//有向图选择入度为0的点，无向图不同节点做根，LCA结果将不同。</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt; n; i++)</div><div class=\"line\">        <span class=\"keyword\">if</span> (indeg[i] == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> i;</div><div class=\"line\">    <span class=\"keyword\">return</span> assert(<span class=\"literal\">false</span>),<span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//LCA</span></div><div class=\"line\"><span class=\"keyword\">int</span> size, root;</div><div class=\"line\"><span class=\"keyword\">int</span> vis[N];</div><div class=\"line\"><span class=\"keyword\">int</span> ans[<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> indeg[N];</div><div class=\"line\"><span class=\"built_in\">vector</span>&amp;lt;pr&amp;lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&amp;gt; &amp;gt; que[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> solved=<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = e[i].v;</div><div class=\"line\">        solved+=dfs(v);</div><div class=\"line\">        <span class=\"keyword\">if</span>(solved==size)<span class=\"keyword\">return</span> solved;</div><div class=\"line\">        uMerge(u, v);</div><div class=\"line\">    &#125;</div><div class=\"line\">    vis[u] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; (<span class=\"keyword\">int</span>) que[u].size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = que[u][i].F;</div><div class=\"line\">        <span class=\"keyword\">if</span> (vis[v]) &#123;</div><div class=\"line\">            ans[que[u][i].S] = uFind(v);</div><div class=\"line\">            solved++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> solved;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    clrA(vis,<span class=\"number\">0</span>);</div><div class=\"line\">    dfs(findRoot());</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> T;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;amp;T);</div><div class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;amp;n);</div><div class=\"line\">        initEdge();</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v;</div><div class=\"line\">        clrA(indeg,<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;amp;u, &amp;amp;v);</div><div class=\"line\">            add(u, v);</div><div class=\"line\">            indeg[v]++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        initUset();</div><div class=\"line\">        size = <span class=\"number\">1</span>;<span class=\"comment\">//查询的次数</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&amp;lt;=n;i++)que[i].clear();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= size; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;amp;u, &amp;amp;v);</div><div class=\"line\">            que[u].push_back(MP(v, i));</div><div class=\"line\">            que[v].push_back(MP(u, i));</div><div class=\"line\">        &#125;</div><div class=\"line\">        tarjan();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= size; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>LCA还可以用倍增来求：（思想很普通，只是以2进制的步长向上走：dp[i][j]表示节点i向上走2^j步到达的节点。）<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&amp;lt;map&amp;gt;</div><div class=\"line\">#include&amp;lt;set&amp;gt;</div><div class=\"line\">#include&amp;lt;cmath&amp;gt;</div><div class=\"line\">#include&amp;lt;stack&amp;gt;</div><div class=\"line\">#include&amp;lt;queue&amp;gt;</div><div class=\"line\">#include&amp;lt;string&amp;gt;</div><div class=\"line\">#include&amp;lt;cstdio&amp;gt;</div><div class=\"line\">#include&amp;lt;vector&amp;gt;</div><div class=\"line\">#include&amp;lt;cctype&amp;gt;</div><div class=\"line\">#include&amp;lt;cassert&amp;gt;</div><div class=\"line\">#include&amp;lt;utility&amp;gt;</div><div class=\"line\">#include&amp;lt;numeric&amp;gt;</div><div class=\"line\">#include&amp;lt;cstring&amp;gt;</div><div class=\"line\">#include&amp;lt;iostream&amp;gt;</div><div class=\"line\">#include&amp;lt;algorithm&amp;gt;</div><div class=\"line\">using namespace std;</div><div class=\"line\">#define pr pair</div><div class=\"line\">#define MP make_pair</div><div class=\"line\">#define SI(x) set&amp;lt;x&amp;gt;::iterator</div><div class=\"line\">#define VI(x) vector&amp;lt;x&amp;gt;::iterator</div><div class=\"line\">#define MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</div><div class=\"line\">#define SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</div><div class=\"line\">#define VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</div><div class=\"line\">#define MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</div><div class=\"line\">#define F first</div><div class=\"line\">#define S second</div><div class=\"line\">#define qlr(x) while(!x.empty)x.pop();</div><div class=\"line\">#define clr(x,y) memset(x,y,sizeof(x));</div><div class=\"line\">#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</div><div class=\"line\">#define LL __int64</div><div class=\"line\">#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"</div><div class=\"line\">#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"</div><div class=\"line\">#define LL_MAX _I64_MAX</div><div class=\"line\">#else</div><div class=\"line\">#define LL long long</div><div class=\"line\">#define LLS \"%\" \"l\" \"l\" \"d\"</div><div class=\"line\">#define LLU \"%\" \"l\" \"l\" \"u\"</div><div class=\"line\">#define LL_MAX _I64_MAX</div><div class=\"line\">#endif</div><div class=\"line\">const int inf = ~0u &amp;gt;&amp;gt; 1;</div><div class=\"line\">const LL lnf = ~0ull &amp;gt;&amp;gt; 1;</div><div class=\"line\">#define N 10005</div><div class=\"line\">#define M N-1</div><div class=\"line\">int n;</div><div class=\"line\">int head[N], pos;</div><div class=\"line\">struct edge &#123;</div><div class=\"line\">    int v, nxt;</div><div class=\"line\">&#125; e[M];</div><div class=\"line\">void add(int u, int v) &#123;</div><div class=\"line\">    e[pos].v = v;</div><div class=\"line\">    e[pos].nxt = head[u];</div><div class=\"line\">    head[u] = pos++;</div><div class=\"line\">&#125;</div><div class=\"line\">void initEdge() &#123;</div><div class=\"line\">    clr(head, -1);</div><div class=\"line\">    pos = 0;</div><div class=\"line\">&#125;</div><div class=\"line\">int deep[N];</div><div class=\"line\">vector&amp;lt;int&amp;gt; dp[N];</div><div class=\"line\">int size;</div><div class=\"line\">int findRoot() &#123;</div><div class=\"line\">    for (int i = 1; i &amp;lt;= n; i++) &#123;</div><div class=\"line\">        if (dp[i].empty()) return i;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return -1;</div><div class=\"line\">&#125;</div><div class=\"line\">void getDeep(int u = findRoot()) &#123;</div><div class=\"line\">    for (int i = head[u]; ~i; i = e[i].nxt) &#123;</div><div class=\"line\">        int v = e[i].v;</div><div class=\"line\">        deep[v] = deep[u] + 1;</div><div class=\"line\">        getDeep(v);</div><div class=\"line\">    &#125;</div><div class=\"line\">    size = max(size, deep[u] + 1);//记录最大深度</div><div class=\"line\">&#125;</div><div class=\"line\">void initLCA() &#123;</div><div class=\"line\">    clr(deep, 0);</div><div class=\"line\">    size = 0;</div><div class=\"line\">    getDeep();</div><div class=\"line\">    for (int len = 1,t=2;t&amp;lt;=size; len++,t&amp;lt;&amp;lt;=1) &#123;//跳出条件：(t=2^len)&amp;lt;=size</div><div class=\"line\">        for (int i = 1; i &amp;lt;= n; i++) &#123;</div><div class=\"line\">            if ((int)dp[i].size() &amp;gt;= len &amp;amp;&amp;amp; (int)dp[dp[i][len-1]].size() &amp;gt;= len) &#123;</div><div class=\"line\">                dp[i].push_back(dp[dp[i][len-1]][len-1]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">int getLCA(int u, int v) &#123;</div><div class=\"line\">    if (deep[u] &amp;lt; deep[v]) swap(u, v);</div><div class=\"line\">    int d = deep[u] - deep[v];</div><div class=\"line\">    for (int i = 0; d; i++, d &amp;gt;&amp;gt;= 1) &#123;</div><div class=\"line\">        u = d &amp;amp; 1 ? dp[u][i] : u;</div><div class=\"line\">    &#125;//以差值二进制形式将u往上走差值</div><div class=\"line\">    if (u == v) return u;</div><div class=\"line\">    for (int i = min(dp[u].size(),dp[v].size())-1; i &amp;gt;= 0; i--) &#123;</div><div class=\"line\">        if (dp[u][i] != dp[v][i]) &#123;</div><div class=\"line\">            u = dp[u][i];</div><div class=\"line\">            v = dp[v][i];</div><div class=\"line\">            i=(int)min(dp[u].size(),dp[v].size());//注意每次都要更新i！！</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    u = dp[u][0];</div><div class=\"line\">    return u;</div><div class=\"line\">&#125;</div><div class=\"line\">int main() &#123;</div><div class=\"line\">    int T;</div><div class=\"line\">    cin &amp;gt;&amp;gt; T;</div><div class=\"line\">    while (T--) &#123;</div><div class=\"line\">        scanf(\"%d\", &amp;amp;n);</div><div class=\"line\">        int u, v;</div><div class=\"line\">        initEdge();</div><div class=\"line\">        for (int i = 1; i &amp;lt;= n; i++)</div><div class=\"line\">            dp[i].clear();</div><div class=\"line\">        for (int i = 1; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            scanf(\"%d%d\", &amp;amp;u, &amp;amp;v);</div><div class=\"line\">            add(u, v);</div><div class=\"line\">            dp[v].push_back(u);</div><div class=\"line\">        &#125;</div><div class=\"line\">        initLCA();</div><div class=\"line\">        scanf(\"%d%d\", &amp;amp;u, &amp;amp;v);</div><div class=\"line\">        printf(\"%d\\n\", getLCA(u, v));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>LCA还可以转化为RMQ问题（个人更喜欢此方法，在线，且效率高）<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div></pre></td><td class=\"code\"><pre><div class=\"line\">//============================================================================</div><div class=\"line\">// Name        : test3.cpp</div><div class=\"line\">// Author      : </div><div class=\"line\">// Version     :</div><div class=\"line\">// Copyright   : Your copyright notice</div><div class=\"line\">// Description : Hello World in C++, Ansi-style</div><div class=\"line\">//============================================================================</div><div class=\"line\">#include&amp;lt;map&amp;gt;</div><div class=\"line\">#include&amp;lt;set&amp;gt;</div><div class=\"line\">#include&amp;lt;stack&amp;gt;</div><div class=\"line\">#include&amp;lt;queue&amp;gt;</div><div class=\"line\">#include&amp;lt;string&amp;gt;</div><div class=\"line\">#include&amp;lt;cstdio&amp;gt;</div><div class=\"line\">#include&amp;lt;vector&amp;gt;</div><div class=\"line\">#include&amp;lt;cctype&amp;gt;</div><div class=\"line\">#include&amp;lt;cassert&amp;gt;</div><div class=\"line\">#include&amp;lt;utility&amp;gt;</div><div class=\"line\">#include&amp;lt;numeric&amp;gt;</div><div class=\"line\">#include&amp;lt;cstring&amp;gt;</div><div class=\"line\">#include&amp;lt;iostream&amp;gt;</div><div class=\"line\">#include&amp;lt;algorithm&amp;gt;</div><div class=\"line\">using namespace std;</div><div class=\"line\">#define pr pair</div><div class=\"line\">#define MP make_pair</div><div class=\"line\">#define SI(x) set&amp;lt;x&amp;gt;::iterator</div><div class=\"line\">#define VI(x) vector&amp;lt;x&amp;gt;::iterator</div><div class=\"line\">#define MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</div><div class=\"line\">#define SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</div><div class=\"line\">#define VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</div><div class=\"line\">#define MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</div><div class=\"line\">#define F first</div><div class=\"line\">#define S second</div><div class=\"line\">#define clrQ(x) while(!x.empty)x.pop();</div><div class=\"line\">#define clrA(x,y) memset(x,y,sizeof(x));</div><div class=\"line\">#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</div><div class=\"line\">#define LL __int64</div><div class=\"line\">#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"</div><div class=\"line\">#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"</div><div class=\"line\">#define LL_MAX _I64_MAX</div><div class=\"line\">#else</div><div class=\"line\">#define LL long long</div><div class=\"line\">#define LLS \"%\" \"l\" \"l\" \"d\"</div><div class=\"line\">#define LLU \"%\" \"l\" \"l\" \"u\"</div><div class=\"line\">#define LL_MAX _I64_MAX</div><div class=\"line\">#endif</div><div class=\"line\">const int inf = ~0u &amp;gt;&amp;gt; 1;</div><div class=\"line\">const LL lnf = ~0ull &amp;gt;&amp;gt; 1;</div><div class=\"line\">int n, m;</div><div class=\"line\">#define N 10005</div><div class=\"line\">#define M 10005</div><div class=\"line\">int head[N], pos;</div><div class=\"line\">struct Edge &#123;</div><div class=\"line\">    int v, nxt;</div><div class=\"line\">&#125; e[M];</div><div class=\"line\">void initEdge() &#123;</div><div class=\"line\">    memset(head, -1, sizeof(head));</div><div class=\"line\">    pos = 0;</div><div class=\"line\">&#125;</div><div class=\"line\">void add(int u, int v) &#123;</div><div class=\"line\">    e[pos].v = v;</div><div class=\"line\">    e[pos].nxt = head[u];</div><div class=\"line\">    head[u] = pos++;</div><div class=\"line\">&#125;</div><div class=\"line\">//RMQ</div><div class=\"line\">int dpM[20][N &amp;lt;&amp;lt; 1 | 1];</div><div class=\"line\">int lg2[N &amp;lt;&amp;lt; 1 | 1];</div><div class=\"line\">#define getLeft(R,L) (R-(L)+1)</div><div class=\"line\">void initRMQ(int n) &#123; //dp[0][i]表示区间i的值。预先处理出来。</div><div class=\"line\">    lg2[0] = -1;</div><div class=\"line\">    int limit;</div><div class=\"line\">    for (int i = 1; i &amp;lt;= n; i++) &#123;</div><div class=\"line\">        lg2[i] = i &amp;amp; (i - 1) ? lg2[i - 1] : lg2[i - 1] + 1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    for (int i = 1; i &amp;lt;= lg2[n]; i++) &#123;</div><div class=\"line\">        limit = getLeft(n, 1 &amp;lt;&amp;lt; i);</div><div class=\"line\">        for (int j = 1; j &amp;lt;= limit; j++) &#123;</div><div class=\"line\">            dpM[i][j] = min(dpM[i - 1][j], dpM[i - 1][j + (1 &amp;lt;&amp;lt; (i - 1))]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">int getRMQ(int x, int y) &#123;</div><div class=\"line\">    if (x &amp;gt; y) swap(x, y);</div><div class=\"line\">    int t = lg2[y - x + 1];</div><div class=\"line\">    return min(dpM[t][x], dpM[t][getLeft(y, 1 &amp;lt;&amp;lt; t)]);</div><div class=\"line\">&#125;</div><div class=\"line\">//LCA</div><div class=\"line\">int depth, cnt;</div><div class=\"line\">int inde[N], H[N], E[N];</div><div class=\"line\">//dp[0][N&amp;lt;&amp;lt;1|1]深度序列（dfs编号），E[N]每个dfs编号对应的节点，H[N]节点第一次出现在dfs编号序列中的位置</div><div class=\"line\">int findRoot() &#123;</div><div class=\"line\">    for (int i = 1; i &amp;lt;= n; i++)</div><div class=\"line\">        if (!inde[i]) return i;</div><div class=\"line\">    return -1;</div><div class=\"line\">&#125;</div><div class=\"line\">void getEuler(int u = findRoot()) &#123;</div><div class=\"line\">    int dfn = dpM[0][H[u] = ++cnt] = ++depth;</div><div class=\"line\">    E[dfn] = u;</div><div class=\"line\">    for (int i = head[u]; ~i; i = e[i].nxt) &#123;</div><div class=\"line\">        int v = e[i].v;</div><div class=\"line\">        getEuler(v);</div><div class=\"line\">        dpM[0][++cnt] = dfn;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">void initLCA() &#123;</div><div class=\"line\">    depth = cnt = 0;</div><div class=\"line\">    getEuler();</div><div class=\"line\">    initRMQ(cnt);</div><div class=\"line\">&#125;</div><div class=\"line\">int getLCA(int u, int v) &#123;</div><div class=\"line\">    if (H[u] &amp;gt; H[v]) swap(u, v);</div><div class=\"line\">    return E[getRMQ(H[u], H[v])];</div><div class=\"line\">&#125;</div><div class=\"line\">int main() &#123;</div><div class=\"line\">    int T;</div><div class=\"line\">    scanf(\"%d\", &amp;amp;T);</div><div class=\"line\">    while (T--) &#123;</div><div class=\"line\">        scanf(\"%d\", &amp;amp;n);m=n-1;</div><div class=\"line\">        int u, v;</div><div class=\"line\">        initEdge();</div><div class=\"line\">        memset(inde, 0, sizeof(inde));</div><div class=\"line\">        for (int i = 1; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">            scanf(\"%d%d\", &amp;amp;u, &amp;amp;v);</div><div class=\"line\">            add(u, v);</div><div class=\"line\">            inde[v]++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        initLCA();</div><div class=\"line\">        scanf(\"%d%d\", &amp;amp;u, &amp;amp;v);</div><div class=\"line\">        printf(\"%d\\n\", getLCA(u, v));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>"},{"title":"POJ1989 Distance Queries","id":"42","date":"2014-08-01T06:30:11.000Z","_content":"##Description\n\nFarmer John's cows refused to run in his marathon since he chose a path much too long for their leisurely lifestyle. He therefore wants to find a path of a more reasonable length. The input to this problem consists of the same input as in \"Navigation Nightmare\",followed by a line containing a single integer K, followed by K \"distance queries\". Each distance query is a line of input containing two integers, giving the numbers of two farms between which FJ is interested in computing distance (measured in the length of the roads along the path between the two farms). Please answer FJ's distance queries as quickly as possible!\n<!--more-->\n##Input\n\n\n-  Lines 1..1+M: Same format as \"Navigation Nightmare\"\n-  Line 2+M: A single integer, K. 1 &lt;= K &lt;= 10,000\n-  Lines 3+M..2+M+K: Each line corresponds to a distance query and contains the indices of two farms.\n\n##Output\n\n- Lines 1..K: For each distance query, output on a single line an integer giving the appropriate distance.\n\n##Sample Input\n\n7 6\n1 6 13 E\n6 3 9 E\n3 5 7 S\n4 1 3 N\n2 4 20 W\n4 7 2 S\n3\n1 6\n1 4\n2 6\n\n\n##Sample Output\n13\n3\n36\n\n##Hint\nFarms 2 and 6 are 20+3+13=36 apart.\n\n##Source\n[USACO 2004 February](http://poj.org/searchproblem?field=source&amp;key=USACO+2004+February)\n<br/>\n\n- - -\n\n- 无向树求节点距离：`dist(u,v)=dist(root,u)+dist(root,v)-2*dist(root,lca(u,v))`\n- tarjan+并查集求LCA。注意可能树不连通。\n\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define MP make_pair\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SI(x) set&lt;x&gt;::iterator\n#define F first\n#define S second\n#define clrQ(x) while(!x.empty)x.pop();\n#define clrA(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n#define N 40005\n#define M 40005\nint n, m;\n//Edge Graph\nint head[N], pos;\nstruct Edge {\n    int v, w, nxt;\n} e[M &lt;&lt; 1];\nvoid initEdge() {\n    memset(head, -1, sizeof(head));\n    pos = 0;\n}\nvoid add(int u, int v, int w) {\n    e[pos].v = v;\n    e[pos].w = w;\n    e[pos].nxt = head[u];\n    head[u] = pos++;\n}\n//UnionSet\nint p[N];\nvoid initUset() {\n    for (int i = 0; i &lt;= n; i++)\n        p[i] = i;\n}\nint uFind(int x) {\n    return x == p[x] ? p[x] : p[x] = uFind(p[x]);\n}\nvoid uMerge(int x, int y) { //y合并到x\n    int fx = uFind(x);\n    int fy = uFind(y);\n    if (fx != fy) p[fy] = fx;\n}\n//tarjan-LCA\nint size,bcnt;\nint lca[10005];\nint vis[N];\nint dis[N];\nint ans[10005];\nvector&lt;pr&lt;int, int&gt; &gt; query[N];\nint findRoot() {\n    for (int i = 1; i &lt;= n; i++) {\n        if (!vis[i]) return i;\n    }\n    return assert(false),-1;\n}\nint dfs(int u, int fa) {\n    int solved = 0;\n    for (int i = head[u]; ~i; i = e[i].nxt) {\n        int v = e[i].v;\n        if (v == fa) continue;\n        dis[v] = dis[u] + e[i].w;\n        solved += dfs(v, u);\n        if (solved == size) return solved;\n        uMerge(u, v);\n    }\n    vis[u] = bcnt;\n    for (int i = 0; i &lt; (int) query[u].size(); i++) {\n        int v = query[u][i].F;\n        if (vis[v]==bcnt) {\n            solved++;\n            lca[query[u][i].S] = uFind(v);\n            ans[query[u][i].S] = dis[u] + dis[v] - 2 * dis[lca[query[u][i].S]];\n        }\n    }\n    return solved;\n}\nvoid tarjan() {\n    clrA(vis, 0);\n    clrA(dis, 0);\n    int tot = 0;\n    bcnt=0;\n    do {\n        bcnt++;//从1开始\n        tot += dfs(findRoot(), -1);\n    } while (tot &lt; size);//图可能不连通\n}\n\nint main() {\n    while (~scanf(\"%d%d\", &amp;n, &amp;m)) {\n        int u, v, w;\n        char c;\n        initEdge();\n        for (int i = 1; i &lt;= m; i++) {\n            scanf(\"%d%d%d %c\", &amp;u, &amp;v, &amp;w, &amp;c);\n            add(u, v, w);\n            add(v, u, w);\n        }\n        initUset();\n        scanf(\"%d\", &amp;size);\n        for (int i = 1; i &lt;= n; i++)\n            query[i].clear();\n        for (int i = 1; i &lt;= size; i++) {\n            scanf(\"%d%d\", &amp;u, &amp;v);\n            query[u].push_back(MP(v, i));\n            query[v].push_back(MP(u, i));\n        }\n        tarjan();\n        for (int i = 1; i &lt;= size; i++) {\n            printf(\"%d\\n\", ans[i]);\n        }\n    }\n}\n```\n\n另外，还可以转化为RMQ问题求解：\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define MP make_pair\n#define SI(x) set&lt;x&gt;::iterator\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set&lt;x&gt;::reverse_iterator\n#define VRI(x) vector&lt;x&gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define clrQ(x) while(!x.empty)x.pop();\n#define clrA(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n#define N 40005\n#define M 40005\nint n, m;\n//Edge Graph\nint head[N], pos;\nstruct Edge {\n    int v, w, nxt;\n} e[M &lt;&lt; 1];\nvoid initEdge() {\n    memset(head, -1, sizeof(head));\n    pos = 0;\n}\nvoid add(int u, int v, int w) {\n    e[pos].v = v;\n    e[pos].w = w;\n    e[pos].nxt = head[u];\n    head[u] = pos++;\n}\n//RMQ\nint dpM[20][N&lt;&lt;1|1];//dpM[i][j]  从j开始的，连续2^i个数字的最值,j从1开始\nint lg2[N&lt;&lt;1|1];//等价于 (int)lg2(1.0*m)/lg2(2.0) 若空间不足可以这样写\n#define getLeft(R,L) (R-(L)+1) //输入右端点和长度，返回左端点\nvoid initRMQ(int n) {\n    lg2[0]=-1;int limit;\n    for(int i=1;i&lt;=n;i++) {\n        lg2[i]=(i&amp;(i-1))?lg2[i-1]:lg2[i-1]+1;\n    }\n    for(int i=1;i&lt;=lg2[n];i++){\n        limit=getLeft(n,1&lt;&lt;i);\n        for(int j=1;j&lt;=limit;j++){\n            dpM[i][j]=min(dpM[i-1][j],dpM[i-1][j+(1&lt;&lt;i&gt;&gt;1)]);\n        }\n    }\n}\nint getRMQ(int a,int b) {\n    int t=lg2[b-a+1];\n    int s1=a;\n    int s2=getLeft(b,1&lt;&lt;t);\n    //return max(Max[t][s1],Max[t][s2]);\n    return min(dpM[t][s1],dpM[t][s2]);\n}\n#undef getLeft\n//LCA\nint dist[N];\nint H[N];//节点第一次出现的位置\nint E[N&lt;&lt;1|1];//欧拉序列2n+1个\nint cnt,depth;\nint findRoot(){\n    for(int i=1;i&lt;=n;i++)return i;\n    return -1;\n}\nvoid getEuler(int u=findRoot(),int fa=-1){\n    int tmp=dpM[0][H[u]=++cnt]=++depth;\n    E[tmp]=u;\n    for(int i=head[u];~i;i=e[i].nxt){\n        int v=e[i].v;\n        if(v==fa)continue;\n        dist[v]=dist[u]+e[i].w;\n        getEuler(v,u);\n        dpM[0][++cnt]=tmp;\n    }\n}\nvoid initLCA(){\n    memset(dist,0,sizeof(dist));\n    cnt=depth=0;\n    getEuler();\n    initRMQ(cnt);\n}\nint getLCA(int u,int v){\n    if(H[u]&gt;H[v])swap(u,v);\n    return E[getRMQ(H[u],H[v])];\n}\nint main() {\n    while (~scanf(\"%d%d\", &amp;n, &amp;m)) {\n        int u, v, w;\n        char c;\n        initEdge();\n        for (int i = 1; i &lt;= m; i++) {\n            scanf(\"%d%d%d %c\", &amp;u, &amp;v, &amp;w, &amp;c);\n            add(u, v, w);\n            add(v, u, w);\n        }\n        initLCA();\n        scanf(\"%d\",&amp;m);\n        while(m--){\n            scanf(\"%d%d\",&amp;u,&amp;v);\n            printf(\"%d\\n\",dist[u]+dist[v]-2*dist[getLCA(u,v)]);\n        }\n    }\n}\n```","source":"_posts/poj1989-distance-queries.md","raw":"title: POJ1989 Distance Queries\ntags:\n  - LCA\n  - RMQ\n  - 图论\n  - tarjan\ncategories:\n  - ACM\nid: 42\ndate: 2014-08-01 14:30:11\n---\n##Description\n\nFarmer John's cows refused to run in his marathon since he chose a path much too long for their leisurely lifestyle. He therefore wants to find a path of a more reasonable length. The input to this problem consists of the same input as in \"Navigation Nightmare\",followed by a line containing a single integer K, followed by K \"distance queries\". Each distance query is a line of input containing two integers, giving the numbers of two farms between which FJ is interested in computing distance (measured in the length of the roads along the path between the two farms). Please answer FJ's distance queries as quickly as possible!\n<!--more-->\n##Input\n\n\n-  Lines 1..1+M: Same format as \"Navigation Nightmare\"\n-  Line 2+M: A single integer, K. 1 &lt;= K &lt;= 10,000\n-  Lines 3+M..2+M+K: Each line corresponds to a distance query and contains the indices of two farms.\n\n##Output\n\n- Lines 1..K: For each distance query, output on a single line an integer giving the appropriate distance.\n\n##Sample Input\n\n7 6\n1 6 13 E\n6 3 9 E\n3 5 7 S\n4 1 3 N\n2 4 20 W\n4 7 2 S\n3\n1 6\n1 4\n2 6\n\n\n##Sample Output\n13\n3\n36\n\n##Hint\nFarms 2 and 6 are 20+3+13=36 apart.\n\n##Source\n[USACO 2004 February](http://poj.org/searchproblem?field=source&amp;key=USACO+2004+February)\n<br/>\n\n- - -\n\n- 无向树求节点距离：`dist(u,v)=dist(root,u)+dist(root,v)-2*dist(root,lca(u,v))`\n- tarjan+并查集求LCA。注意可能树不连通。\n\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define MP make_pair\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SI(x) set&lt;x&gt;::iterator\n#define F first\n#define S second\n#define clrQ(x) while(!x.empty)x.pop();\n#define clrA(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n#define N 40005\n#define M 40005\nint n, m;\n//Edge Graph\nint head[N], pos;\nstruct Edge {\n    int v, w, nxt;\n} e[M &lt;&lt; 1];\nvoid initEdge() {\n    memset(head, -1, sizeof(head));\n    pos = 0;\n}\nvoid add(int u, int v, int w) {\n    e[pos].v = v;\n    e[pos].w = w;\n    e[pos].nxt = head[u];\n    head[u] = pos++;\n}\n//UnionSet\nint p[N];\nvoid initUset() {\n    for (int i = 0; i &lt;= n; i++)\n        p[i] = i;\n}\nint uFind(int x) {\n    return x == p[x] ? p[x] : p[x] = uFind(p[x]);\n}\nvoid uMerge(int x, int y) { //y合并到x\n    int fx = uFind(x);\n    int fy = uFind(y);\n    if (fx != fy) p[fy] = fx;\n}\n//tarjan-LCA\nint size,bcnt;\nint lca[10005];\nint vis[N];\nint dis[N];\nint ans[10005];\nvector&lt;pr&lt;int, int&gt; &gt; query[N];\nint findRoot() {\n    for (int i = 1; i &lt;= n; i++) {\n        if (!vis[i]) return i;\n    }\n    return assert(false),-1;\n}\nint dfs(int u, int fa) {\n    int solved = 0;\n    for (int i = head[u]; ~i; i = e[i].nxt) {\n        int v = e[i].v;\n        if (v == fa) continue;\n        dis[v] = dis[u] + e[i].w;\n        solved += dfs(v, u);\n        if (solved == size) return solved;\n        uMerge(u, v);\n    }\n    vis[u] = bcnt;\n    for (int i = 0; i &lt; (int) query[u].size(); i++) {\n        int v = query[u][i].F;\n        if (vis[v]==bcnt) {\n            solved++;\n            lca[query[u][i].S] = uFind(v);\n            ans[query[u][i].S] = dis[u] + dis[v] - 2 * dis[lca[query[u][i].S]];\n        }\n    }\n    return solved;\n}\nvoid tarjan() {\n    clrA(vis, 0);\n    clrA(dis, 0);\n    int tot = 0;\n    bcnt=0;\n    do {\n        bcnt++;//从1开始\n        tot += dfs(findRoot(), -1);\n    } while (tot &lt; size);//图可能不连通\n}\n\nint main() {\n    while (~scanf(\"%d%d\", &amp;n, &amp;m)) {\n        int u, v, w;\n        char c;\n        initEdge();\n        for (int i = 1; i &lt;= m; i++) {\n            scanf(\"%d%d%d %c\", &amp;u, &amp;v, &amp;w, &amp;c);\n            add(u, v, w);\n            add(v, u, w);\n        }\n        initUset();\n        scanf(\"%d\", &amp;size);\n        for (int i = 1; i &lt;= n; i++)\n            query[i].clear();\n        for (int i = 1; i &lt;= size; i++) {\n            scanf(\"%d%d\", &amp;u, &amp;v);\n            query[u].push_back(MP(v, i));\n            query[v].push_back(MP(u, i));\n        }\n        tarjan();\n        for (int i = 1; i &lt;= size; i++) {\n            printf(\"%d\\n\", ans[i]);\n        }\n    }\n}\n```\n\n另外，还可以转化为RMQ问题求解：\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define MP make_pair\n#define SI(x) set&lt;x&gt;::iterator\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set&lt;x&gt;::reverse_iterator\n#define VRI(x) vector&lt;x&gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define clrQ(x) while(!x.empty)x.pop();\n#define clrA(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n#define N 40005\n#define M 40005\nint n, m;\n//Edge Graph\nint head[N], pos;\nstruct Edge {\n    int v, w, nxt;\n} e[M &lt;&lt; 1];\nvoid initEdge() {\n    memset(head, -1, sizeof(head));\n    pos = 0;\n}\nvoid add(int u, int v, int w) {\n    e[pos].v = v;\n    e[pos].w = w;\n    e[pos].nxt = head[u];\n    head[u] = pos++;\n}\n//RMQ\nint dpM[20][N&lt;&lt;1|1];//dpM[i][j]  从j开始的，连续2^i个数字的最值,j从1开始\nint lg2[N&lt;&lt;1|1];//等价于 (int)lg2(1.0*m)/lg2(2.0) 若空间不足可以这样写\n#define getLeft(R,L) (R-(L)+1) //输入右端点和长度，返回左端点\nvoid initRMQ(int n) {\n    lg2[0]=-1;int limit;\n    for(int i=1;i&lt;=n;i++) {\n        lg2[i]=(i&amp;(i-1))?lg2[i-1]:lg2[i-1]+1;\n    }\n    for(int i=1;i&lt;=lg2[n];i++){\n        limit=getLeft(n,1&lt;&lt;i);\n        for(int j=1;j&lt;=limit;j++){\n            dpM[i][j]=min(dpM[i-1][j],dpM[i-1][j+(1&lt;&lt;i&gt;&gt;1)]);\n        }\n    }\n}\nint getRMQ(int a,int b) {\n    int t=lg2[b-a+1];\n    int s1=a;\n    int s2=getLeft(b,1&lt;&lt;t);\n    //return max(Max[t][s1],Max[t][s2]);\n    return min(dpM[t][s1],dpM[t][s2]);\n}\n#undef getLeft\n//LCA\nint dist[N];\nint H[N];//节点第一次出现的位置\nint E[N&lt;&lt;1|1];//欧拉序列2n+1个\nint cnt,depth;\nint findRoot(){\n    for(int i=1;i&lt;=n;i++)return i;\n    return -1;\n}\nvoid getEuler(int u=findRoot(),int fa=-1){\n    int tmp=dpM[0][H[u]=++cnt]=++depth;\n    E[tmp]=u;\n    for(int i=head[u];~i;i=e[i].nxt){\n        int v=e[i].v;\n        if(v==fa)continue;\n        dist[v]=dist[u]+e[i].w;\n        getEuler(v,u);\n        dpM[0][++cnt]=tmp;\n    }\n}\nvoid initLCA(){\n    memset(dist,0,sizeof(dist));\n    cnt=depth=0;\n    getEuler();\n    initRMQ(cnt);\n}\nint getLCA(int u,int v){\n    if(H[u]&gt;H[v])swap(u,v);\n    return E[getRMQ(H[u],H[v])];\n}\nint main() {\n    while (~scanf(\"%d%d\", &amp;n, &amp;m)) {\n        int u, v, w;\n        char c;\n        initEdge();\n        for (int i = 1; i &lt;= m; i++) {\n            scanf(\"%d%d%d %c\", &amp;u, &amp;v, &amp;w, &amp;c);\n            add(u, v, w);\n            add(v, u, w);\n        }\n        initLCA();\n        scanf(\"%d\",&amp;m);\n        while(m--){\n            scanf(\"%d%d\",&amp;u,&amp;v);\n            printf(\"%d\\n\",dist[u]+dist[v]-2*dist[getLCA(u,v)]);\n        }\n    }\n}\n```","slug":"poj1989-distance-queries","published":1,"updated":"2015-02-26T02:56:36.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8o2001qwppvn527edb2","content":"<p>##Description</p>\n<p>Farmer John’s cows refused to run in his marathon since he chose a path much too long for their leisurely lifestyle. He therefore wants to find a path of a more reasonable length. The input to this problem consists of the same input as in “Navigation Nightmare”,followed by a line containing a single integer K, followed by K “distance queries”. Each distance query is a line of input containing two integers, giving the numbers of two farms between which FJ is interested in computing distance (measured in the length of the roads along the path between the two farms). Please answer FJ’s distance queries as quickly as possible!<br><a id=\"more\"></a></p>\n<p>##Input</p>\n<ul>\n<li>Lines 1..1+M: Same format as “Navigation Nightmare”</li>\n<li>Line 2+M: A single integer, K. 1 &lt;= K &lt;= 10,000</li>\n<li>Lines 3+M..2+M+K: Each line corresponds to a distance query and contains the indices of two farms.</li>\n</ul>\n<p>##Output</p>\n<ul>\n<li>Lines 1..K: For each distance query, output on a single line an integer giving the appropriate distance.</li>\n</ul>\n<p>##Sample Input</p>\n<p>7 6<br>1 6 13 E<br>6 3 9 E<br>3 5 7 S<br>4 1 3 N<br>2 4 20 W<br>4 7 2 S<br>3<br>1 6<br>1 4<br>2 6</p>\n<p>##Sample Output<br>13<br>3<br>36</p>\n<p>##Hint<br>Farms 2 and 6 are 20+3+13=36 apart.</p>\n<p>##Source<br><a href=\"http://poj.org/searchproblem?field=source&amp;key=USACO+2004+February\" target=\"_blank\" rel=\"external\">USACO 2004 February</a><br><br></p>\n<hr>\n<ul>\n<li>无向树求节点距离：<code>dist(u,v)=dist(root,u)+dist(root,v)-2*dist(root,lca(u,v))</code></li>\n<li>tarjan+并查集求LCA。注意可能树不连通。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;map&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;set&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;stack&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;queue&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;string&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstdio&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;vector&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cctype&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cassert&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;utility&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;numeric&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstring&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;iostream&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;algorithm&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pr pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MP make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrQ(x) while(!x.empty)x.pop();</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrA(x,y) memset(x,y,sizeof(x));</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = ~<span class=\"number\">0u</span> &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL lnf = ~<span class=\"number\">0u</span>ll &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 40005</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 40005</span></div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"comment\">//Edge Graph</span></div><div class=\"line\"><span class=\"keyword\">int</span> head[N], pos;</div><div class=\"line\"><span class=\"keyword\">struct</span> Edge &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> v, w, nxt;</div><div class=\"line\">&#125; e[M &amp;lt;&amp;lt; <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initEdge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</div><div class=\"line\">    pos = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span> </span>&#123;</div><div class=\"line\">    e[pos].v = v;</div><div class=\"line\">    e[pos].w = w;</div><div class=\"line\">    e[pos].nxt = head[u];</div><div class=\"line\">    head[u] = pos++;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//UnionSet</span></div><div class=\"line\"><span class=\"keyword\">int</span> p[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initUset</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt;= n; i++)</div><div class=\"line\">        p[i] = i;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">uFind</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x == p[x] ? p[x] : p[x] = uFind(p[x]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">uMerge</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123; <span class=\"comment\">//y合并到x</span></div><div class=\"line\">    <span class=\"keyword\">int</span> fx = uFind(x);</div><div class=\"line\">    <span class=\"keyword\">int</span> fy = uFind(y);</div><div class=\"line\">    <span class=\"keyword\">if</span> (fx != fy) p[fy] = fx;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//tarjan-LCA</span></div><div class=\"line\"><span class=\"keyword\">int</span> size,bcnt;</div><div class=\"line\"><span class=\"keyword\">int</span> lca[<span class=\"number\">10005</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> vis[N];</div><div class=\"line\"><span class=\"keyword\">int</span> dis[N];</div><div class=\"line\"><span class=\"keyword\">int</span> ans[<span class=\"number\">10005</span>];</div><div class=\"line\"><span class=\"built_in\">vector</span>&amp;lt;pr&amp;lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&amp;gt; &amp;gt; query[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findRoot</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!vis[i]) <span class=\"keyword\">return</span> i;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> assert(<span class=\"literal\">false</span>),<span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> solved = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = e[i].v;</div><div class=\"line\">        <span class=\"keyword\">if</span> (v == fa) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        dis[v] = dis[u] + e[i].w;</div><div class=\"line\">        solved += dfs(v, u);</div><div class=\"line\">        <span class=\"keyword\">if</span> (solved == size) <span class=\"keyword\">return</span> solved;</div><div class=\"line\">        uMerge(u, v);</div><div class=\"line\">    &#125;</div><div class=\"line\">    vis[u] = bcnt;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; (<span class=\"keyword\">int</span>) query[u].size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = query[u][i].F;</div><div class=\"line\">        <span class=\"keyword\">if</span> (vis[v]==bcnt) &#123;</div><div class=\"line\">            solved++;</div><div class=\"line\">            lca[query[u][i].S] = uFind(v);</div><div class=\"line\">            ans[query[u][i].S] = dis[u] + dis[v] - <span class=\"number\">2</span> * dis[lca[query[u][i].S]];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> solved;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    clrA(vis, <span class=\"number\">0</span>);</div><div class=\"line\">    clrA(dis, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span> tot = <span class=\"number\">0</span>;</div><div class=\"line\">    bcnt=<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">        bcnt++;<span class=\"comment\">//从1开始</span></div><div class=\"line\">        tot += dfs(findRoot(), <span class=\"number\">-1</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (tot &amp;lt; size);<span class=\"comment\">//图可能不连通</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;amp;n, &amp;amp;m)) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v, w;</div><div class=\"line\">        <span class=\"keyword\">char</span> c;</div><div class=\"line\">        initEdge();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d %c\"</span>, &amp;amp;u, &amp;amp;v, &amp;amp;w, &amp;amp;c);</div><div class=\"line\">            add(u, v, w);</div><div class=\"line\">            add(v, u, w);</div><div class=\"line\">        &#125;</div><div class=\"line\">        initUset();</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;amp;size);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= n; i++)</div><div class=\"line\">            query[i].clear();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= size; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;amp;u, &amp;amp;v);</div><div class=\"line\">            query[u].push_back(MP(v, i));</div><div class=\"line\">            query[v].push_back(MP(u, i));</div><div class=\"line\">        &#125;</div><div class=\"line\">        tarjan();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= size; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>另外，还可以转化为RMQ问题求解：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&amp;lt;map&amp;gt;</div><div class=\"line\">#include&amp;lt;set&amp;gt;</div><div class=\"line\">#include&amp;lt;stack&amp;gt;</div><div class=\"line\">#include&amp;lt;queue&amp;gt;</div><div class=\"line\">#include&amp;lt;string&amp;gt;</div><div class=\"line\">#include&amp;lt;cstdio&amp;gt;</div><div class=\"line\">#include&amp;lt;vector&amp;gt;</div><div class=\"line\">#include&amp;lt;cctype&amp;gt;</div><div class=\"line\">#include&amp;lt;cassert&amp;gt;</div><div class=\"line\">#include&amp;lt;utility&amp;gt;</div><div class=\"line\">#include&amp;lt;numeric&amp;gt;</div><div class=\"line\">#include&amp;lt;cstring&amp;gt;</div><div class=\"line\">#include&amp;lt;iostream&amp;gt;</div><div class=\"line\">#include&amp;lt;algorithm&amp;gt;</div><div class=\"line\">using namespace std;</div><div class=\"line\">#define pr pair</div><div class=\"line\">#define MP make_pair</div><div class=\"line\">#define SI(x) set&amp;lt;x&amp;gt;::iterator</div><div class=\"line\">#define VI(x) vector&amp;lt;x&amp;gt;::iterator</div><div class=\"line\">#define MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</div><div class=\"line\">#define SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</div><div class=\"line\">#define VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</div><div class=\"line\">#define MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</div><div class=\"line\">#define F first</div><div class=\"line\">#define S second</div><div class=\"line\">#define clrQ(x) while(!x.empty)x.pop();</div><div class=\"line\">#define clrA(x,y) memset(x,y,sizeof(x));</div><div class=\"line\">#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</div><div class=\"line\">#define LL __int64</div><div class=\"line\">#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"</div><div class=\"line\">#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"</div><div class=\"line\">#define LL_MAX _I64_MAX</div><div class=\"line\">#else</div><div class=\"line\">#define LL long long</div><div class=\"line\">#define LLS \"%\" \"l\" \"l\" \"d\"</div><div class=\"line\">#define LLU \"%\" \"l\" \"l\" \"u\"</div><div class=\"line\">#define LL_MAX _I64_MAX</div><div class=\"line\">#endif</div><div class=\"line\">const int inf = ~0u &amp;gt;&amp;gt; 1;</div><div class=\"line\">const LL lnf = ~0ull &amp;gt;&amp;gt; 1;</div><div class=\"line\">#define N 40005</div><div class=\"line\">#define M 40005</div><div class=\"line\">int n, m;</div><div class=\"line\">//Edge Graph</div><div class=\"line\">int head[N], pos;</div><div class=\"line\">struct Edge &#123;</div><div class=\"line\">    int v, w, nxt;</div><div class=\"line\">&#125; e[M &amp;lt;&amp;lt; 1];</div><div class=\"line\">void initEdge() &#123;</div><div class=\"line\">    memset(head, -1, sizeof(head));</div><div class=\"line\">    pos = 0;</div><div class=\"line\">&#125;</div><div class=\"line\">void add(int u, int v, int w) &#123;</div><div class=\"line\">    e[pos].v = v;</div><div class=\"line\">    e[pos].w = w;</div><div class=\"line\">    e[pos].nxt = head[u];</div><div class=\"line\">    head[u] = pos++;</div><div class=\"line\">&#125;</div><div class=\"line\">//RMQ</div><div class=\"line\">int dpM[20][N&amp;lt;&amp;lt;1|1];//dpM[i][j]  从j开始的，连续2^i个数字的最值,j从1开始</div><div class=\"line\">int lg2[N&amp;lt;&amp;lt;1|1];//等价于 (int)lg2(1.0*m)/lg2(2.0) 若空间不足可以这样写</div><div class=\"line\">#define getLeft(R,L) (R-(L)+1) //输入右端点和长度，返回左端点</div><div class=\"line\">void initRMQ(int n) &#123;</div><div class=\"line\">    lg2[0]=-1;int limit;</div><div class=\"line\">    for(int i=1;i&amp;lt;=n;i++) &#123;</div><div class=\"line\">        lg2[i]=(i&amp;amp;(i-1))?lg2[i-1]:lg2[i-1]+1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    for(int i=1;i&amp;lt;=lg2[n];i++)&#123;</div><div class=\"line\">        limit=getLeft(n,1&amp;lt;&amp;lt;i);</div><div class=\"line\">        for(int j=1;j&amp;lt;=limit;j++)&#123;</div><div class=\"line\">            dpM[i][j]=min(dpM[i-1][j],dpM[i-1][j+(1&amp;lt;&amp;lt;i&amp;gt;&amp;gt;1)]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">int getRMQ(int a,int b) &#123;</div><div class=\"line\">    int t=lg2[b-a+1];</div><div class=\"line\">    int s1=a;</div><div class=\"line\">    int s2=getLeft(b,1&amp;lt;&amp;lt;t);</div><div class=\"line\">    //return max(Max[t][s1],Max[t][s2]);</div><div class=\"line\">    return min(dpM[t][s1],dpM[t][s2]);</div><div class=\"line\">&#125;</div><div class=\"line\">#undef getLeft</div><div class=\"line\">//LCA</div><div class=\"line\">int dist[N];</div><div class=\"line\">int H[N];//节点第一次出现的位置</div><div class=\"line\">int E[N&amp;lt;&amp;lt;1|1];//欧拉序列2n+1个</div><div class=\"line\">int cnt,depth;</div><div class=\"line\">int findRoot()&#123;</div><div class=\"line\">    for(int i=1;i&amp;lt;=n;i++)return i;</div><div class=\"line\">    return -1;</div><div class=\"line\">&#125;</div><div class=\"line\">void getEuler(int u=findRoot(),int fa=-1)&#123;</div><div class=\"line\">    int tmp=dpM[0][H[u]=++cnt]=++depth;</div><div class=\"line\">    E[tmp]=u;</div><div class=\"line\">    for(int i=head[u];~i;i=e[i].nxt)&#123;</div><div class=\"line\">        int v=e[i].v;</div><div class=\"line\">        if(v==fa)continue;</div><div class=\"line\">        dist[v]=dist[u]+e[i].w;</div><div class=\"line\">        getEuler(v,u);</div><div class=\"line\">        dpM[0][++cnt]=tmp;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">void initLCA()&#123;</div><div class=\"line\">    memset(dist,0,sizeof(dist));</div><div class=\"line\">    cnt=depth=0;</div><div class=\"line\">    getEuler();</div><div class=\"line\">    initRMQ(cnt);</div><div class=\"line\">&#125;</div><div class=\"line\">int getLCA(int u,int v)&#123;</div><div class=\"line\">    if(H[u]&amp;gt;H[v])swap(u,v);</div><div class=\"line\">    return E[getRMQ(H[u],H[v])];</div><div class=\"line\">&#125;</div><div class=\"line\">int main() &#123;</div><div class=\"line\">    while (~scanf(\"%d%d\", &amp;amp;n, &amp;amp;m)) &#123;</div><div class=\"line\">        int u, v, w;</div><div class=\"line\">        char c;</div><div class=\"line\">        initEdge();</div><div class=\"line\">        for (int i = 1; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">            scanf(\"%d%d%d %c\", &amp;amp;u, &amp;amp;v, &amp;amp;w, &amp;amp;c);</div><div class=\"line\">            add(u, v, w);</div><div class=\"line\">            add(v, u, w);</div><div class=\"line\">        &#125;</div><div class=\"line\">        initLCA();</div><div class=\"line\">        scanf(\"%d\",&amp;amp;m);</div><div class=\"line\">        while(m--)&#123;</div><div class=\"line\">            scanf(\"%d%d\",&amp;amp;u,&amp;amp;v);</div><div class=\"line\">            printf(\"%d\\n\",dist[u]+dist[v]-2*dist[getLCA(u,v)]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>##Description</p>\n<p>Farmer John’s cows refused to run in his marathon since he chose a path much too long for their leisurely lifestyle. He therefore wants to find a path of a more reasonable length. The input to this problem consists of the same input as in “Navigation Nightmare”,followed by a line containing a single integer K, followed by K “distance queries”. Each distance query is a line of input containing two integers, giving the numbers of two farms between which FJ is interested in computing distance (measured in the length of the roads along the path between the two farms). Please answer FJ’s distance queries as quickly as possible!<br>","more":"</p>\n<p>##Input</p>\n<ul>\n<li>Lines 1..1+M: Same format as “Navigation Nightmare”</li>\n<li>Line 2+M: A single integer, K. 1 &lt;= K &lt;= 10,000</li>\n<li>Lines 3+M..2+M+K: Each line corresponds to a distance query and contains the indices of two farms.</li>\n</ul>\n<p>##Output</p>\n<ul>\n<li>Lines 1..K: For each distance query, output on a single line an integer giving the appropriate distance.</li>\n</ul>\n<p>##Sample Input</p>\n<p>7 6<br>1 6 13 E<br>6 3 9 E<br>3 5 7 S<br>4 1 3 N<br>2 4 20 W<br>4 7 2 S<br>3<br>1 6<br>1 4<br>2 6</p>\n<p>##Sample Output<br>13<br>3<br>36</p>\n<p>##Hint<br>Farms 2 and 6 are 20+3+13=36 apart.</p>\n<p>##Source<br><a href=\"http://poj.org/searchproblem?field=source&amp;key=USACO+2004+February\">USACO 2004 February</a><br><br/></p>\n<hr>\n<ul>\n<li>无向树求节点距离：<code>dist(u,v)=dist(root,u)+dist(root,v)-2*dist(root,lca(u,v))</code></li>\n<li>tarjan+并查集求LCA。注意可能树不连通。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;map&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;set&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;stack&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;queue&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;string&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstdio&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;vector&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cctype&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cassert&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;utility&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;numeric&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstring&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;iostream&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;algorithm&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pr pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MP make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrQ(x) while(!x.empty)x.pop();</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrA(x,y) memset(x,y,sizeof(x));</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = ~<span class=\"number\">0u</span> &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL lnf = ~<span class=\"number\">0u</span>ll &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 40005</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 40005</span></div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"comment\">//Edge Graph</span></div><div class=\"line\"><span class=\"keyword\">int</span> head[N], pos;</div><div class=\"line\"><span class=\"keyword\">struct</span> Edge &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> v, w, nxt;</div><div class=\"line\">&#125; e[M &amp;lt;&amp;lt; <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initEdge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</div><div class=\"line\">    pos = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span> </span>&#123;</div><div class=\"line\">    e[pos].v = v;</div><div class=\"line\">    e[pos].w = w;</div><div class=\"line\">    e[pos].nxt = head[u];</div><div class=\"line\">    head[u] = pos++;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//UnionSet</span></div><div class=\"line\"><span class=\"keyword\">int</span> p[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initUset</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt;= n; i++)</div><div class=\"line\">        p[i] = i;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">uFind</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x == p[x] ? p[x] : p[x] = uFind(p[x]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">uMerge</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123; <span class=\"comment\">//y合并到x</span></div><div class=\"line\">    <span class=\"keyword\">int</span> fx = uFind(x);</div><div class=\"line\">    <span class=\"keyword\">int</span> fy = uFind(y);</div><div class=\"line\">    <span class=\"keyword\">if</span> (fx != fy) p[fy] = fx;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//tarjan-LCA</span></div><div class=\"line\"><span class=\"keyword\">int</span> size,bcnt;</div><div class=\"line\"><span class=\"keyword\">int</span> lca[<span class=\"number\">10005</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> vis[N];</div><div class=\"line\"><span class=\"keyword\">int</span> dis[N];</div><div class=\"line\"><span class=\"keyword\">int</span> ans[<span class=\"number\">10005</span>];</div><div class=\"line\"><span class=\"built_in\">vector</span>&amp;lt;pr&amp;lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&amp;gt; &amp;gt; query[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findRoot</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!vis[i]) <span class=\"keyword\">return</span> i;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> assert(<span class=\"literal\">false</span>),<span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> solved = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = e[i].v;</div><div class=\"line\">        <span class=\"keyword\">if</span> (v == fa) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        dis[v] = dis[u] + e[i].w;</div><div class=\"line\">        solved += dfs(v, u);</div><div class=\"line\">        <span class=\"keyword\">if</span> (solved == size) <span class=\"keyword\">return</span> solved;</div><div class=\"line\">        uMerge(u, v);</div><div class=\"line\">    &#125;</div><div class=\"line\">    vis[u] = bcnt;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; (<span class=\"keyword\">int</span>) query[u].size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = query[u][i].F;</div><div class=\"line\">        <span class=\"keyword\">if</span> (vis[v]==bcnt) &#123;</div><div class=\"line\">            solved++;</div><div class=\"line\">            lca[query[u][i].S] = uFind(v);</div><div class=\"line\">            ans[query[u][i].S] = dis[u] + dis[v] - <span class=\"number\">2</span> * dis[lca[query[u][i].S]];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> solved;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    clrA(vis, <span class=\"number\">0</span>);</div><div class=\"line\">    clrA(dis, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span> tot = <span class=\"number\">0</span>;</div><div class=\"line\">    bcnt=<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">        bcnt++;<span class=\"comment\">//从1开始</span></div><div class=\"line\">        tot += dfs(findRoot(), <span class=\"number\">-1</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (tot &amp;lt; size);<span class=\"comment\">//图可能不连通</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;amp;n, &amp;amp;m)) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v, w;</div><div class=\"line\">        <span class=\"keyword\">char</span> c;</div><div class=\"line\">        initEdge();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d %c\"</span>, &amp;amp;u, &amp;amp;v, &amp;amp;w, &amp;amp;c);</div><div class=\"line\">            add(u, v, w);</div><div class=\"line\">            add(v, u, w);</div><div class=\"line\">        &#125;</div><div class=\"line\">        initUset();</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;amp;size);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= n; i++)</div><div class=\"line\">            query[i].clear();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= size; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;amp;u, &amp;amp;v);</div><div class=\"line\">            query[u].push_back(MP(v, i));</div><div class=\"line\">            query[v].push_back(MP(u, i));</div><div class=\"line\">        &#125;</div><div class=\"line\">        tarjan();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= size; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>另外，还可以转化为RMQ问题求解：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&amp;lt;map&amp;gt;</div><div class=\"line\">#include&amp;lt;set&amp;gt;</div><div class=\"line\">#include&amp;lt;stack&amp;gt;</div><div class=\"line\">#include&amp;lt;queue&amp;gt;</div><div class=\"line\">#include&amp;lt;string&amp;gt;</div><div class=\"line\">#include&amp;lt;cstdio&amp;gt;</div><div class=\"line\">#include&amp;lt;vector&amp;gt;</div><div class=\"line\">#include&amp;lt;cctype&amp;gt;</div><div class=\"line\">#include&amp;lt;cassert&amp;gt;</div><div class=\"line\">#include&amp;lt;utility&amp;gt;</div><div class=\"line\">#include&amp;lt;numeric&amp;gt;</div><div class=\"line\">#include&amp;lt;cstring&amp;gt;</div><div class=\"line\">#include&amp;lt;iostream&amp;gt;</div><div class=\"line\">#include&amp;lt;algorithm&amp;gt;</div><div class=\"line\">using namespace std;</div><div class=\"line\">#define pr pair</div><div class=\"line\">#define MP make_pair</div><div class=\"line\">#define SI(x) set&amp;lt;x&amp;gt;::iterator</div><div class=\"line\">#define VI(x) vector&amp;lt;x&amp;gt;::iterator</div><div class=\"line\">#define MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</div><div class=\"line\">#define SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</div><div class=\"line\">#define VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</div><div class=\"line\">#define MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</div><div class=\"line\">#define F first</div><div class=\"line\">#define S second</div><div class=\"line\">#define clrQ(x) while(!x.empty)x.pop();</div><div class=\"line\">#define clrA(x,y) memset(x,y,sizeof(x));</div><div class=\"line\">#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</div><div class=\"line\">#define LL __int64</div><div class=\"line\">#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"</div><div class=\"line\">#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"</div><div class=\"line\">#define LL_MAX _I64_MAX</div><div class=\"line\">#else</div><div class=\"line\">#define LL long long</div><div class=\"line\">#define LLS \"%\" \"l\" \"l\" \"d\"</div><div class=\"line\">#define LLU \"%\" \"l\" \"l\" \"u\"</div><div class=\"line\">#define LL_MAX _I64_MAX</div><div class=\"line\">#endif</div><div class=\"line\">const int inf = ~0u &amp;gt;&amp;gt; 1;</div><div class=\"line\">const LL lnf = ~0ull &amp;gt;&amp;gt; 1;</div><div class=\"line\">#define N 40005</div><div class=\"line\">#define M 40005</div><div class=\"line\">int n, m;</div><div class=\"line\">//Edge Graph</div><div class=\"line\">int head[N], pos;</div><div class=\"line\">struct Edge &#123;</div><div class=\"line\">    int v, w, nxt;</div><div class=\"line\">&#125; e[M &amp;lt;&amp;lt; 1];</div><div class=\"line\">void initEdge() &#123;</div><div class=\"line\">    memset(head, -1, sizeof(head));</div><div class=\"line\">    pos = 0;</div><div class=\"line\">&#125;</div><div class=\"line\">void add(int u, int v, int w) &#123;</div><div class=\"line\">    e[pos].v = v;</div><div class=\"line\">    e[pos].w = w;</div><div class=\"line\">    e[pos].nxt = head[u];</div><div class=\"line\">    head[u] = pos++;</div><div class=\"line\">&#125;</div><div class=\"line\">//RMQ</div><div class=\"line\">int dpM[20][N&amp;lt;&amp;lt;1|1];//dpM[i][j]  从j开始的，连续2^i个数字的最值,j从1开始</div><div class=\"line\">int lg2[N&amp;lt;&amp;lt;1|1];//等价于 (int)lg2(1.0*m)/lg2(2.0) 若空间不足可以这样写</div><div class=\"line\">#define getLeft(R,L) (R-(L)+1) //输入右端点和长度，返回左端点</div><div class=\"line\">void initRMQ(int n) &#123;</div><div class=\"line\">    lg2[0]=-1;int limit;</div><div class=\"line\">    for(int i=1;i&amp;lt;=n;i++) &#123;</div><div class=\"line\">        lg2[i]=(i&amp;amp;(i-1))?lg2[i-1]:lg2[i-1]+1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    for(int i=1;i&amp;lt;=lg2[n];i++)&#123;</div><div class=\"line\">        limit=getLeft(n,1&amp;lt;&amp;lt;i);</div><div class=\"line\">        for(int j=1;j&amp;lt;=limit;j++)&#123;</div><div class=\"line\">            dpM[i][j]=min(dpM[i-1][j],dpM[i-1][j+(1&amp;lt;&amp;lt;i&amp;gt;&amp;gt;1)]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">int getRMQ(int a,int b) &#123;</div><div class=\"line\">    int t=lg2[b-a+1];</div><div class=\"line\">    int s1=a;</div><div class=\"line\">    int s2=getLeft(b,1&amp;lt;&amp;lt;t);</div><div class=\"line\">    //return max(Max[t][s1],Max[t][s2]);</div><div class=\"line\">    return min(dpM[t][s1],dpM[t][s2]);</div><div class=\"line\">&#125;</div><div class=\"line\">#undef getLeft</div><div class=\"line\">//LCA</div><div class=\"line\">int dist[N];</div><div class=\"line\">int H[N];//节点第一次出现的位置</div><div class=\"line\">int E[N&amp;lt;&amp;lt;1|1];//欧拉序列2n+1个</div><div class=\"line\">int cnt,depth;</div><div class=\"line\">int findRoot()&#123;</div><div class=\"line\">    for(int i=1;i&amp;lt;=n;i++)return i;</div><div class=\"line\">    return -1;</div><div class=\"line\">&#125;</div><div class=\"line\">void getEuler(int u=findRoot(),int fa=-1)&#123;</div><div class=\"line\">    int tmp=dpM[0][H[u]=++cnt]=++depth;</div><div class=\"line\">    E[tmp]=u;</div><div class=\"line\">    for(int i=head[u];~i;i=e[i].nxt)&#123;</div><div class=\"line\">        int v=e[i].v;</div><div class=\"line\">        if(v==fa)continue;</div><div class=\"line\">        dist[v]=dist[u]+e[i].w;</div><div class=\"line\">        getEuler(v,u);</div><div class=\"line\">        dpM[0][++cnt]=tmp;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">void initLCA()&#123;</div><div class=\"line\">    memset(dist,0,sizeof(dist));</div><div class=\"line\">    cnt=depth=0;</div><div class=\"line\">    getEuler();</div><div class=\"line\">    initRMQ(cnt);</div><div class=\"line\">&#125;</div><div class=\"line\">int getLCA(int u,int v)&#123;</div><div class=\"line\">    if(H[u]&amp;gt;H[v])swap(u,v);</div><div class=\"line\">    return E[getRMQ(H[u],H[v])];</div><div class=\"line\">&#125;</div><div class=\"line\">int main() &#123;</div><div class=\"line\">    while (~scanf(\"%d%d\", &amp;amp;n, &amp;amp;m)) &#123;</div><div class=\"line\">        int u, v, w;</div><div class=\"line\">        char c;</div><div class=\"line\">        initEdge();</div><div class=\"line\">        for (int i = 1; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">            scanf(\"%d%d%d %c\", &amp;amp;u, &amp;amp;v, &amp;amp;w, &amp;amp;c);</div><div class=\"line\">            add(u, v, w);</div><div class=\"line\">            add(v, u, w);</div><div class=\"line\">        &#125;</div><div class=\"line\">        initLCA();</div><div class=\"line\">        scanf(\"%d\",&amp;amp;m);</div><div class=\"line\">        while(m--)&#123;</div><div class=\"line\">            scanf(\"%d%d\",&amp;amp;u,&amp;amp;v);</div><div class=\"line\">            printf(\"%d\\n\",dist[u]+dist[v]-2*dist[getLCA(u,v)]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"pygobject-tutorial-1","date":"2016-11-08T08:55:47.000Z","_content":"# 基础\n这章将会介绍GTK+比较重要的几个方面\n## 主循环和信号\n就像大部分GUI库一样，GTK+使用了一种事件驱动的编程模型。当用户什么都没做，GTK+让主循环处于就绪状态并等待用户的输入。如果用户做了一些动作，比如鼠标事件，主循环就会被唤醒，然后将这个事件传递给GTK+程序。\n\n当部件收到一个事件，它们将会频繁的发出一个或者更多的信号，这些信号将会调用与之相绑定的函数。这样的函数通常被称作回调函数。当回调函数被调用时，你就可以进行一些操作了。比如说，你可能要弹出一个文件选择对话框当一个“打开”按钮被点击的之后。当回调函数执行完毕之后，GTK+将会返回到主循环然后等待用户再一次输入。\n\n一个典型的例子：\n```python\nhandler_id = widget.connect('event',callback,data)\n```\n首先，`widget`是一个之前以及创建好的widget实例。接着，我们来看看事件，每个部件都有它自己的事件。举个例子，如果你有一个按钮，那么你往往希望绑定它的点击事件。这样只要按钮被点击，你就能收到它所触发的信号。然后，参数`callback`代表者需要调用的回调函数的名字，它包含者将要运行的代码，当特定的信号产生之后。最后，`data`参数包含着任意你想要传递的数据，这个参数是一个可选参数，如果不需要可以省略。\n该方法返回一个数值，标志着这个signal-callback对。当这个函数再也不会","source":"_posts/pygobject-tutorial-1.md","raw":"---\ntitle: pygobject-tutorial-1\ndate: 2016-11-08 16:55:47\ntags: [python,gtk]\ncategories:\n- Python\n---\n# 基础\n这章将会介绍GTK+比较重要的几个方面\n## 主循环和信号\n就像大部分GUI库一样，GTK+使用了一种事件驱动的编程模型。当用户什么都没做，GTK+让主循环处于就绪状态并等待用户的输入。如果用户做了一些动作，比如鼠标事件，主循环就会被唤醒，然后将这个事件传递给GTK+程序。\n\n当部件收到一个事件，它们将会频繁的发出一个或者更多的信号，这些信号将会调用与之相绑定的函数。这样的函数通常被称作回调函数。当回调函数被调用时，你就可以进行一些操作了。比如说，你可能要弹出一个文件选择对话框当一个“打开”按钮被点击的之后。当回调函数执行完毕之后，GTK+将会返回到主循环然后等待用户再一次输入。\n\n一个典型的例子：\n```python\nhandler_id = widget.connect('event',callback,data)\n```\n首先，`widget`是一个之前以及创建好的widget实例。接着，我们来看看事件，每个部件都有它自己的事件。举个例子，如果你有一个按钮，那么你往往希望绑定它的点击事件。这样只要按钮被点击，你就能收到它所触发的信号。然后，参数`callback`代表者需要调用的回调函数的名字，它包含者将要运行的代码，当特定的信号产生之后。最后，`data`参数包含着任意你想要传递的数据，这个参数是一个可选参数，如果不需要可以省略。\n该方法返回一个数值，标志着这个signal-callback对。当这个函数再也不会","slug":"pygobject-tutorial-1","published":1,"updated":"2016-11-08T13:11:08.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8o2001twppv598ghzfc","content":"<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><p>这章将会介绍GTK+比较重要的几个方面</p>\n<h2 id=\"主循环和信号\"><a href=\"#主循环和信号\" class=\"headerlink\" title=\"主循环和信号\"></a>主循环和信号</h2><p>就像大部分GUI库一样，GTK+使用了一种事件驱动的编程模型。当用户什么都没做，GTK+让主循环处于就绪状态并等待用户的输入。如果用户做了一些动作，比如鼠标事件，主循环就会被唤醒，然后将这个事件传递给GTK+程序。</p>\n<p>当部件收到一个事件，它们将会频繁的发出一个或者更多的信号，这些信号将会调用与之相绑定的函数。这样的函数通常被称作回调函数。当回调函数被调用时，你就可以进行一些操作了。比如说，你可能要弹出一个文件选择对话框当一个“打开”按钮被点击的之后。当回调函数执行完毕之后，GTK+将会返回到主循环然后等待用户再一次输入。</p>\n<p>一个典型的例子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">handler_id = widget.connect(<span class=\"string\">'event'</span>,callback,data)</div></pre></td></tr></table></figure></p>\n<p>首先，<code>widget</code>是一个之前以及创建好的widget实例。接着，我们来看看事件，每个部件都有它自己的事件。举个例子，如果你有一个按钮，那么你往往希望绑定它的点击事件。这样只要按钮被点击，你就能收到它所触发的信号。然后，参数<code>callback</code>代表者需要调用的回调函数的名字，它包含者将要运行的代码，当特定的信号产生之后。最后，<code>data</code>参数包含着任意你想要传递的数据，这个参数是一个可选参数，如果不需要可以省略。<br>该方法返回一个数值，标志着这个signal-callback对。当这个函数再也不会</p>\n","excerpt":"","more":"<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><p>这章将会介绍GTK+比较重要的几个方面</p>\n<h2 id=\"主循环和信号\"><a href=\"#主循环和信号\" class=\"headerlink\" title=\"主循环和信号\"></a>主循环和信号</h2><p>就像大部分GUI库一样，GTK+使用了一种事件驱动的编程模型。当用户什么都没做，GTK+让主循环处于就绪状态并等待用户的输入。如果用户做了一些动作，比如鼠标事件，主循环就会被唤醒，然后将这个事件传递给GTK+程序。</p>\n<p>当部件收到一个事件，它们将会频繁的发出一个或者更多的信号，这些信号将会调用与之相绑定的函数。这样的函数通常被称作回调函数。当回调函数被调用时，你就可以进行一些操作了。比如说，你可能要弹出一个文件选择对话框当一个“打开”按钮被点击的之后。当回调函数执行完毕之后，GTK+将会返回到主循环然后等待用户再一次输入。</p>\n<p>一个典型的例子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">handler_id = widget.connect(<span class=\"string\">'event'</span>,callback,data)</div></pre></td></tr></table></figure></p>\n<p>首先，<code>widget</code>是一个之前以及创建好的widget实例。接着，我们来看看事件，每个部件都有它自己的事件。举个例子，如果你有一个按钮，那么你往往希望绑定它的点击事件。这样只要按钮被点击，你就能收到它所触发的信号。然后，参数<code>callback</code>代表者需要调用的回调函数的名字，它包含者将要运行的代码，当特定的信号产生之后。最后，<code>data</code>参数包含着任意你想要传递的数据，这个参数是一个可选参数，如果不需要可以省略。<br>该方法返回一个数值，标志着这个signal-callback对。当这个函数再也不会</p>\n"},{"title":"Shadowsocks免费账号网址集","date":"2015-02-24T08:26:42.000Z","_content":"G+圈子很多这样的网站，大部分是由[ss-panel](https://github.com/orvice/ss-panel)这个开源项目建成。不知道他们是乐于分享还是另有目的。下面是列表：\n\n1. [Shadow X](https://cattt.com/)(ss-panel作者)\n1. [kuaishangSS](http://free.kuaishangss.tk/)\n2. [pepsishadowsocks](http://vpn.lintwo.com/)\n3. [ChangZ](http://tashi.xyz/)\n4. [ssserver](http://ss.ssserver.biz/)\n\n另外推荐Linux下ss GUI客户端：[shadowsocks-qt5](https://github.com/librehat/shadowsocks-qt5)","source":"_posts/shadowsocks-account.md","raw":"title: Shadowsocks免费账号网址集\ndate: 2015-02-24 16:26:42\ntags: [shadowsocks]\ncategories: GFW\n---\nG+圈子很多这样的网站，大部分是由[ss-panel](https://github.com/orvice/ss-panel)这个开源项目建成。不知道他们是乐于分享还是另有目的。下面是列表：\n\n1. [Shadow X](https://cattt.com/)(ss-panel作者)\n1. [kuaishangSS](http://free.kuaishangss.tk/)\n2. [pepsishadowsocks](http://vpn.lintwo.com/)\n3. [ChangZ](http://tashi.xyz/)\n4. [ssserver](http://ss.ssserver.biz/)\n\n另外推荐Linux下ss GUI客户端：[shadowsocks-qt5](https://github.com/librehat/shadowsocks-qt5)","slug":"shadowsocks-account","published":1,"updated":"2015-02-26T02:57:19.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8o5001ywppvq2qwxl8q","content":"<p>G+圈子很多这样的网站，大部分是由<a href=\"https://github.com/orvice/ss-panel\" target=\"_blank\" rel=\"external\">ss-panel</a>这个开源项目建成。不知道他们是乐于分享还是另有目的。下面是列表：</p>\n<ol>\n<li><a href=\"https://cattt.com/\" target=\"_blank\" rel=\"external\">Shadow X</a>(ss-panel作者)</li>\n<li><a href=\"http://free.kuaishangss.tk/\" target=\"_blank\" rel=\"external\">kuaishangSS</a></li>\n<li><a href=\"http://vpn.lintwo.com/\" target=\"_blank\" rel=\"external\">pepsishadowsocks</a></li>\n<li><a href=\"http://tashi.xyz/\" target=\"_blank\" rel=\"external\">ChangZ</a></li>\n<li><a href=\"http://ss.ssserver.biz/\" target=\"_blank\" rel=\"external\">ssserver</a></li>\n</ol>\n<p>另外推荐Linux下ss GUI客户端：<a href=\"https://github.com/librehat/shadowsocks-qt5\" target=\"_blank\" rel=\"external\">shadowsocks-qt5</a></p>\n","excerpt":"","more":"<p>G+圈子很多这样的网站，大部分是由<a href=\"https://github.com/orvice/ss-panel\">ss-panel</a>这个开源项目建成。不知道他们是乐于分享还是另有目的。下面是列表：</p>\n<ol>\n<li><a href=\"https://cattt.com/\">Shadow X</a>(ss-panel作者)</li>\n<li><a href=\"http://free.kuaishangss.tk/\">kuaishangSS</a></li>\n<li><a href=\"http://vpn.lintwo.com/\">pepsishadowsocks</a></li>\n<li><a href=\"http://tashi.xyz/\">ChangZ</a></li>\n<li><a href=\"http://ss.ssserver.biz/\">ssserver</a></li>\n</ol>\n<p>另外推荐Linux下ss GUI客户端：<a href=\"https://github.com/librehat/shadowsocks-qt5\">shadowsocks-qt5</a></p>\n"},{"title":"再来晒晒我的KDE","id":"187","date":"2015-02-14T04:37:03.000Z","_content":"\nRT，我就这点出息，不过Arch上KDE4正在慢慢过渡到KDE5，这个桌面用不了多久就out of date了。 so sad....\n\n[![logo20](http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo20-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo20.png)\n<!--more-->\n[![logo21](http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo21-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo21.png) [![logo19](http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo19-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo19.png) [![logo18](http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo18-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo18.png)","source":"_posts/show-kde4-again.md","raw":"title: 再来晒晒我的KDE\ncategories:\n  - KDE\nid: 187\ndate: 2015-02-14 12:37:03\ntags: [linux,DE/WM,美化]\n---\n\nRT，我就这点出息，不过Arch上KDE4正在慢慢过渡到KDE5，这个桌面用不了多久就out of date了。 so sad....\n\n[![logo20](http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo20-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo20.png)\n<!--more-->\n[![logo21](http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo21-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo21.png) [![logo19](http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo19-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo19.png) [![logo18](http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo18-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo18.png)","slug":"show-kde4-again","published":1,"updated":"2015-02-26T03:09:30.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8o70021wppv38l37c0c","content":"<p>RT，我就这点出息，不过Arch上KDE4正在慢慢过渡到KDE5，这个桌面用不了多久就out of date了。 so sad….</p>\n<p><a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo20.png\" target=\"_blank\" rel=\"external\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo20-1024x575.png\" alt=\"logo20\"></a><br><a id=\"more\"></a><br><a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo21.png\" target=\"_blank\" rel=\"external\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo21-1024x575.png\" alt=\"logo21\"></a> <a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo19.png\" target=\"_blank\" rel=\"external\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo19-1024x575.png\" alt=\"logo19\"></a> <a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo18.png\" target=\"_blank\" rel=\"external\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo18-1024x575.png\" alt=\"logo18\"></a></p>\n","excerpt":"<p>RT，我就这点出息，不过Arch上KDE4正在慢慢过渡到KDE5，这个桌面用不了多久就out of date了。 so sad….</p>\n<p><a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo20.png\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo20-1024x575.png\" alt=\"logo20\"></a><br>","more":"<br><a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo21.png\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo21-1024x575.png\" alt=\"logo21\"></a> <a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo19.png\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo19-1024x575.png\" alt=\"logo19\"></a> <a href=\"http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo18.png\"><img src=\"http://sforkw-wp.qiniudn.com/jae/uploads/2015/02/logo18-1024x575.png\" alt=\"logo18\"></a></p>"},{"title":"用Sublime Text 3 dev 做网页开发的配置","date":"2014-09-16T08:45:07.000Z","_content":"\n文件：[click here](http://pan.baidu.com/s/1pJ7FVuz)","source":"_posts/sublime-config-web.md","raw":"title: 用Sublime Text 3 dev 做网页开发的配置\ncategories:\n  - IDE/Editor\ndate: 2014-09-16 16:45:07\ntags: [sublime text,html]\n---\n\n文件：[click here](http://pan.baidu.com/s/1pJ7FVuz)","slug":"sublime-config-web","published":1,"updated":"2015-02-26T02:59:15.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8o80026wppv5m6cvf3s","content":"<p>文件：<a href=\"http://pan.baidu.com/s/1pJ7FVuz\" target=\"_blank\" rel=\"external\">click here</a></p>\n","excerpt":"","more":"<p>文件：<a href=\"http://pan.baidu.com/s/1pJ7FVuz\">click here</a></p>\n"},{"title":"测试asset","date":"2016-11-23T11:10:22.000Z","thumbnail":"/images/about.jpg","_content":"\n{% asset_img test.jpg this is a test %}","source":"_posts/test-asset.md","raw":"---\ntitle: 测试asset\ndate: 2016-11-23 19:10:22\nthumbnail: /images/about.jpg\n---\n\n{% asset_img test.jpg this is a test %}","slug":"test-asset","published":1,"updated":"2016-11-23T11:17:45.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8o90029wppvbofct0ii","content":"<img src=\"/2016/11/23/test-asset/test.jpg\" alt=\"this is a test\" title=\"this is a test\">","excerpt":"","more":"<img src=\"/2016/11/23/test-asset/test.jpg\" alt=\"this is a test\" title=\"this is a test\">"},{"title":"Timus 1996 Cipher Message 3 KMP+FFT求卷积","id":"130","date":"2014-11-05T14:13:15.000Z","_content":"\n题目链接：[click here](http://acm.timus.ru/problem.aspx?space=1&amp;num=1996)\n##description\nEmperor Palpatine has been ruling the Empire for 25 years and Darth Vader has been the head of the Empire Armed Forces. However, the Rebel movement is strong like it never used to be. One of the rebel leaders, Princess Leia from Alderaan, managed to get hold of secret blueprints of the Death Star, the imperial war station.\n\nThe Princess was going to deliver the station plan to the secret base for further analysis and searching for vulnerable spots. But her ship was attacked by the space destroyer \"Devastator\" headed by Darth Vader. At the last moment Princess Leia managed to send her findings to one of the closest planet called Tatooine with her droid R2-D2\\. Quite conveniently, an old friend of her father Obi-Wan Kenobi lives on that planet.\n\nR2-D2 realizes the importance of his mission. He is going to encrypt the information so that the wrong people won’t get it.\n<!--more-->\nThe memory of R2-D2 has many files with images. First he wanted to use a well-known encrypting algorithm. The point of the method is to replace the least significant bits of the image with the encrypted message bits. The difference is practically unnoticeable on the picture, so one won’t suspect that it contains a hidden message.\n\nBut then R2-D2 decided that this method is quite well-known and the information won’t be protected enough. He decided to change the least significant bits of the image so that the secret information was a continuous sequence of the bytes of the image file. Help the droid determine if it is possible. And if it is, find the minimum number of bits to alter.\n\n## Input\n\nThe first line of the input contains integers _n_ and _m_ (1 ≤ _n_, _m_ ≤ 250 000) — the sizes of the image file and of the file with the secret information in bytes. On the second line the content of the file with an image is given and the third line contains the secret information. The files are given as a sequence of space-separated bytes. Each byte is written as a sequence of eight bits in the order from the most to the least significant bit.\n\n## Output\n\nPrint \"No\", if it is impossible to encrypt information in this image. Otherwise, print in the first line \"Yes\", and in the second line — the number of bits to alter and the number of the byte in the file with the image, starting from which the secret information will be recorded. If there are multiple possible variants, print the one where the secret information is written closer to the beginning of the image file.\n\n## Samples\n| input | output |\n|--------|--------|\n|  3 2<br/> 11110001 11110001 11110000<br/>11110000 11110000     |   Yes<br/>1 2|\n\n| input | output |\n|--------|--------|\n|3 1<br/>11110000 11110001 11110000<br/>11110000      |   Yes<br/>0 1|\n\n\n**Problem Author: **Denis Dublennykh (prepared by Oleg Dolgorukov)\n\n题目老长难懂，其实就是给你一个n byte的01A串，m byte的01B串.其中A串中每一byte的最后一个bit是可以修改的，问至少修改多少次A串能使B使A的子串。输出修改次数与最小的起始匹配位置。\n\n首先将A串每byte取前7位（代码中的a数组）与B串每byte取前7位（代码中的b数组）用KMP匹配，因为前7位不能改，所以如果没有一处匹配就直接输出No了。\n\n然后将A串每byte取后1位（代码中的ax数组）与B串每byte取后一位（代码中的bx数组）求hamming距离。\n\n如何求ax与bx的hamming距离呢？\n\n可以巧妙的ax作为卷积中的f函数，bx的逆向数组bx\\`作为卷积中的g函数。两者求卷积。这样就成了：\n$$c[i + m - 1] = ax[i + 0] * bx\\`[m - 0 - 1] + ax[i + 1] * bx\\`[m - 1 - 1] + …… ax[i + j] * bx\\`[m - j - 1] + …… ax[i + m - 1] * bx\\`[m - (m - 1) - 1]$$\n\n可以看出，如果ax , bx中同为1,乘积为1,否则为0,这样就能统计出了有多少位同为1了。\n\n如果将ax,bx数组中的01取反，再进行上述操作，那么救能统计出有多少位同为0了。两者相加就是全部相同的有多少，用总字符数m减去它，就能求出hamming距离了！\n\n卷积复杂度为O(nlg(n))而暴力算法的复杂度为O(n×m)，真是太神奇了！\n```C++\nusing namespace std;\nconst int N = 250005;\nint n, m;\nconst double pi = acos(-1.0);\n// Complex  z = a + b * i\nstruct Complex {\n\tdouble x, y;\n\tComplex(double x = 0.0, double y = 0.0) :\n\t\t\tx(x), y(y) {\n\t}\n\tComplex operator +(const Complex &amp;c) const {\n\t\treturn Complex(x + c.x, y + c.y);\n\t}\n\tComplex operator -(const Complex &amp;c) const {\n\t\treturn Complex(x - c.x, y - c.y);\n\t}\n\tComplex operator *(const Complex &amp;c) const {\n\t\treturn Complex(x * c.x - y * c.y, x * c.y + y * c.x);\n\t}\n};\nint a[N], b[N], ax[N], bx[N];\nchar buf[8];\n/*\n * kmpNext[]的意思:next'[i]=next[next[...[next[i]]]] (直到next'[i]&lt;0或者\n x[next'[i]]!=x[i])\n * 这样的预处理可以快一些\n */\nvoid preKMP(int x[], int m, int kmpNext[]) {\n\tint i, j;\n\tj = kmpNext[0] = -1;\n\ti = 0;\n\twhile (i &lt; m) {\n\t\twhile (-1 != j &amp;&amp; x[i] != x[j])\n\t\t\tj = kmpNext[j];\n\t\tif (x[++i] == x[++j]) kmpNext[i] = kmpNext[j];\n\t\telse kmpNext[i] = j;\n\t}\n}\n/*\n * 返回x在y中出现的次数,可以重叠\n */\nint next[N];\nvector pos;\nvoid KMP_Count(int x[], int m, int y[], int n) { //x是模式串,y是主串\n\tint i, j;\n\tpos.clear();\n\tpreKMP(x, m, next);\n\ti = j = 0;\n\twhile (i &lt; n) {\n\t\twhile (-1 != j &amp;&amp; y[i] != x[j])\n\t\t\tj = next[j];\n\t\ti++;\n\t\tj++;\n\t\tif (j &gt;= m) {\n\t\t\tpos.push_back(i - m);\n\t\t\tj = next[j];\n\t\t}\n\t}\n}\n//len = 2 ^ k\ninline void change(Complex y[], int len) {\n\tfor (int i = 1, j = len / 2; i &lt; len - 1; i++) {\n\t\tif (i &lt; j) swap(y[i], y[j]);\n\t\tint k = len / 2;\n\t\twhile (j &gt;= k) {\n\t\t\tj -= k;\n\t\t\tk /= 2;\n\t\t}\n\t\tif (j &lt; k) j += k;\n\t}\n}\n// FFT\n// len = 2 ^ k\n// on = 1  DFT    on = -1 IDFT\ninline void FFT(Complex y[], int len, int on) {\n\tchange(y, len);\n\tfor (int h = 2; h &lt;= len; h &lt;&lt;= 1) {\n\t\tComplex wn(cos(-on * 2 * pi / h), sin(-on * 2 * pi / h));\n\t\tfor (int j = 0; j &lt; len; j += h) {\n\t\t\tComplex w(1, 0);\n\t\t\tfor (int k = j; k &lt; j + h / 2; k++) {\n\t\t\t\tComplex u = y[k];\n\t\t\t\tComplex t = w * y[k + h / 2];\n\t\t\t\ty[k] = u + t;\n\t\t\t\ty[k + h / 2] = u - t;\n\t\t\t\tw = w * wn;\n\t\t\t}\n\t\t}\n\t}\n\tif (on == -1) {\n\t\tfor (int i = 0; i &lt; len; i++) {\n\t\t\ty[i].x /= len;\n\t\t}\n\t}\n}\n//FFT求卷积,a数组长度n，b数组长度m\nint res[N];\nComplex x1[N &lt;&lt; 2], x2[N &lt;&lt; 2]; //FFT开4倍\nvoid Convolution(int a[], int b[]) {\n\tint len = max(n, m);\n\tint l = 1;\n\twhile (l &lt; len * 2)\n\t\tl &lt;&lt;= 1;\n\tfor (int i = 0; i &lt; l; i++)\n\t\tx1[i] = Complex(i &lt; n ? a[i] : 0, 0);\n\tfor (int i = 0; i &lt; l; i++)\n\t\tx2[i] = Complex(i &lt; m ? b[i] : 0, 0);\n\t//DFT\n\tFFT(x1, l, 1);\n\tFFT(x2, l, 1);\n\tfor (int i = 0; i &lt; l; i++)\n\t\tx1[i] = x1[i] * x2[i];\n\t//IDFT\n\tFFT(x1, l, -1);\n\t//based on m\n\tint base = m ;\n\tfor (int i = 0; i &lt;= n - base; i++) {\n\t\tres[i] += (int) (x1[i + base - 1].x + 0.5);\n\t}\n}\nint main() {\n\twhile (~scanf(\"%d%d\", &amp;n, &amp;m)) {\n\t\tfor (int i = 0; i &lt; n; i++) {\n\t\t\ta[i] = 0;\n\t\t\tscanf(\"%s\", buf);\n\t\t\tfor (int j = 0; j &lt; 7; j++) {\n\t\t\t\ta[i] = a[i] &lt;&lt; 1 | (buf[j] - '0');\n\t\t\t}\n\t\t\tax[i] = buf[7] - '0';\n\t\t}\n\t\tfor (int i = 0; i &lt; m; i++) {\n\t\t\tb[i] = 0;\n\t\t\tscanf(\"%s\", buf);\n\t\t\tfor (int j = 0; j &lt; 7; j++) {\n\t\t\t\tb[i] = b[i] &lt;&lt; 1 | (buf[j] - '0');\n\t\t\t}\n\t\t\tbx[i] = buf[7] - '0';\n\t\t}\n\t\tKMP_Count(b, m, a, n);\n\t\tif (pos.size() == 0) puts(\"No\");\n\t\telse {\n\t\t\treverse(bx, bx + m);\n\t\t\tmemset(res, 0, sizeof(res));\n\t\t\tputs(\"Yes\");\n\t\t\tConvolution(ax, bx);\n\t\t\tfor (int i = 0; i &lt; n; i++)\n\t\t\t\tax[i] ^= 1;\n\t\t\tfor (int i = 0; i &lt; m; i++)\n\t\t\t\tbx[i] ^= 1;\n\t\t\tConvolution(ax, bx);\n\t\t\tint ans = m, idx = 0;\n\t\t\tfor (int i = 0; i &lt; (int) pos.size(); i++) {\n\t\t\t\tif (m - res[pos[i]] &lt; ans) {\n\t\t\t\t\tans = m - res[pos[i]];\n\t\t\t\t\tidx = pos[i] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"%d %d\\n\", ans, idx);\n\t\t}\n\t}\n}\n```\n","source":"_posts/timus-1996-cipher-message-3-kmpfft.md","raw":"title: Timus 1996 Cipher Message 3 KMP+FFT求卷积\ncategories:\n  - ACM\nid: 130\ndate: 2014-11-05 22:13:15\ntags: 数论\n---\n\n题目链接：[click here](http://acm.timus.ru/problem.aspx?space=1&amp;num=1996)\n##description\nEmperor Palpatine has been ruling the Empire for 25 years and Darth Vader has been the head of the Empire Armed Forces. However, the Rebel movement is strong like it never used to be. One of the rebel leaders, Princess Leia from Alderaan, managed to get hold of secret blueprints of the Death Star, the imperial war station.\n\nThe Princess was going to deliver the station plan to the secret base for further analysis and searching for vulnerable spots. But her ship was attacked by the space destroyer \"Devastator\" headed by Darth Vader. At the last moment Princess Leia managed to send her findings to one of the closest planet called Tatooine with her droid R2-D2\\. Quite conveniently, an old friend of her father Obi-Wan Kenobi lives on that planet.\n\nR2-D2 realizes the importance of his mission. He is going to encrypt the information so that the wrong people won’t get it.\n<!--more-->\nThe memory of R2-D2 has many files with images. First he wanted to use a well-known encrypting algorithm. The point of the method is to replace the least significant bits of the image with the encrypted message bits. The difference is practically unnoticeable on the picture, so one won’t suspect that it contains a hidden message.\n\nBut then R2-D2 decided that this method is quite well-known and the information won’t be protected enough. He decided to change the least significant bits of the image so that the secret information was a continuous sequence of the bytes of the image file. Help the droid determine if it is possible. And if it is, find the minimum number of bits to alter.\n\n## Input\n\nThe first line of the input contains integers _n_ and _m_ (1 ≤ _n_, _m_ ≤ 250 000) — the sizes of the image file and of the file with the secret information in bytes. On the second line the content of the file with an image is given and the third line contains the secret information. The files are given as a sequence of space-separated bytes. Each byte is written as a sequence of eight bits in the order from the most to the least significant bit.\n\n## Output\n\nPrint \"No\", if it is impossible to encrypt information in this image. Otherwise, print in the first line \"Yes\", and in the second line — the number of bits to alter and the number of the byte in the file with the image, starting from which the secret information will be recorded. If there are multiple possible variants, print the one where the secret information is written closer to the beginning of the image file.\n\n## Samples\n| input | output |\n|--------|--------|\n|  3 2<br/> 11110001 11110001 11110000<br/>11110000 11110000     |   Yes<br/>1 2|\n\n| input | output |\n|--------|--------|\n|3 1<br/>11110000 11110001 11110000<br/>11110000      |   Yes<br/>0 1|\n\n\n**Problem Author: **Denis Dublennykh (prepared by Oleg Dolgorukov)\n\n题目老长难懂，其实就是给你一个n byte的01A串，m byte的01B串.其中A串中每一byte的最后一个bit是可以修改的，问至少修改多少次A串能使B使A的子串。输出修改次数与最小的起始匹配位置。\n\n首先将A串每byte取前7位（代码中的a数组）与B串每byte取前7位（代码中的b数组）用KMP匹配，因为前7位不能改，所以如果没有一处匹配就直接输出No了。\n\n然后将A串每byte取后1位（代码中的ax数组）与B串每byte取后一位（代码中的bx数组）求hamming距离。\n\n如何求ax与bx的hamming距离呢？\n\n可以巧妙的ax作为卷积中的f函数，bx的逆向数组bx\\`作为卷积中的g函数。两者求卷积。这样就成了：\n$$c[i + m - 1] = ax[i + 0] * bx\\`[m - 0 - 1] + ax[i + 1] * bx\\`[m - 1 - 1] + …… ax[i + j] * bx\\`[m - j - 1] + …… ax[i + m - 1] * bx\\`[m - (m - 1) - 1]$$\n\n可以看出，如果ax , bx中同为1,乘积为1,否则为0,这样就能统计出了有多少位同为1了。\n\n如果将ax,bx数组中的01取反，再进行上述操作，那么救能统计出有多少位同为0了。两者相加就是全部相同的有多少，用总字符数m减去它，就能求出hamming距离了！\n\n卷积复杂度为O(nlg(n))而暴力算法的复杂度为O(n×m)，真是太神奇了！\n```C++\nusing namespace std;\nconst int N = 250005;\nint n, m;\nconst double pi = acos(-1.0);\n// Complex  z = a + b * i\nstruct Complex {\n\tdouble x, y;\n\tComplex(double x = 0.0, double y = 0.0) :\n\t\t\tx(x), y(y) {\n\t}\n\tComplex operator +(const Complex &amp;c) const {\n\t\treturn Complex(x + c.x, y + c.y);\n\t}\n\tComplex operator -(const Complex &amp;c) const {\n\t\treturn Complex(x - c.x, y - c.y);\n\t}\n\tComplex operator *(const Complex &amp;c) const {\n\t\treturn Complex(x * c.x - y * c.y, x * c.y + y * c.x);\n\t}\n};\nint a[N], b[N], ax[N], bx[N];\nchar buf[8];\n/*\n * kmpNext[]的意思:next'[i]=next[next[...[next[i]]]] (直到next'[i]&lt;0或者\n x[next'[i]]!=x[i])\n * 这样的预处理可以快一些\n */\nvoid preKMP(int x[], int m, int kmpNext[]) {\n\tint i, j;\n\tj = kmpNext[0] = -1;\n\ti = 0;\n\twhile (i &lt; m) {\n\t\twhile (-1 != j &amp;&amp; x[i] != x[j])\n\t\t\tj = kmpNext[j];\n\t\tif (x[++i] == x[++j]) kmpNext[i] = kmpNext[j];\n\t\telse kmpNext[i] = j;\n\t}\n}\n/*\n * 返回x在y中出现的次数,可以重叠\n */\nint next[N];\nvector pos;\nvoid KMP_Count(int x[], int m, int y[], int n) { //x是模式串,y是主串\n\tint i, j;\n\tpos.clear();\n\tpreKMP(x, m, next);\n\ti = j = 0;\n\twhile (i &lt; n) {\n\t\twhile (-1 != j &amp;&amp; y[i] != x[j])\n\t\t\tj = next[j];\n\t\ti++;\n\t\tj++;\n\t\tif (j &gt;= m) {\n\t\t\tpos.push_back(i - m);\n\t\t\tj = next[j];\n\t\t}\n\t}\n}\n//len = 2 ^ k\ninline void change(Complex y[], int len) {\n\tfor (int i = 1, j = len / 2; i &lt; len - 1; i++) {\n\t\tif (i &lt; j) swap(y[i], y[j]);\n\t\tint k = len / 2;\n\t\twhile (j &gt;= k) {\n\t\t\tj -= k;\n\t\t\tk /= 2;\n\t\t}\n\t\tif (j &lt; k) j += k;\n\t}\n}\n// FFT\n// len = 2 ^ k\n// on = 1  DFT    on = -1 IDFT\ninline void FFT(Complex y[], int len, int on) {\n\tchange(y, len);\n\tfor (int h = 2; h &lt;= len; h &lt;&lt;= 1) {\n\t\tComplex wn(cos(-on * 2 * pi / h), sin(-on * 2 * pi / h));\n\t\tfor (int j = 0; j &lt; len; j += h) {\n\t\t\tComplex w(1, 0);\n\t\t\tfor (int k = j; k &lt; j + h / 2; k++) {\n\t\t\t\tComplex u = y[k];\n\t\t\t\tComplex t = w * y[k + h / 2];\n\t\t\t\ty[k] = u + t;\n\t\t\t\ty[k + h / 2] = u - t;\n\t\t\t\tw = w * wn;\n\t\t\t}\n\t\t}\n\t}\n\tif (on == -1) {\n\t\tfor (int i = 0; i &lt; len; i++) {\n\t\t\ty[i].x /= len;\n\t\t}\n\t}\n}\n//FFT求卷积,a数组长度n，b数组长度m\nint res[N];\nComplex x1[N &lt;&lt; 2], x2[N &lt;&lt; 2]; //FFT开4倍\nvoid Convolution(int a[], int b[]) {\n\tint len = max(n, m);\n\tint l = 1;\n\twhile (l &lt; len * 2)\n\t\tl &lt;&lt;= 1;\n\tfor (int i = 0; i &lt; l; i++)\n\t\tx1[i] = Complex(i &lt; n ? a[i] : 0, 0);\n\tfor (int i = 0; i &lt; l; i++)\n\t\tx2[i] = Complex(i &lt; m ? b[i] : 0, 0);\n\t//DFT\n\tFFT(x1, l, 1);\n\tFFT(x2, l, 1);\n\tfor (int i = 0; i &lt; l; i++)\n\t\tx1[i] = x1[i] * x2[i];\n\t//IDFT\n\tFFT(x1, l, -1);\n\t//based on m\n\tint base = m ;\n\tfor (int i = 0; i &lt;= n - base; i++) {\n\t\tres[i] += (int) (x1[i + base - 1].x + 0.5);\n\t}\n}\nint main() {\n\twhile (~scanf(\"%d%d\", &amp;n, &amp;m)) {\n\t\tfor (int i = 0; i &lt; n; i++) {\n\t\t\ta[i] = 0;\n\t\t\tscanf(\"%s\", buf);\n\t\t\tfor (int j = 0; j &lt; 7; j++) {\n\t\t\t\ta[i] = a[i] &lt;&lt; 1 | (buf[j] - '0');\n\t\t\t}\n\t\t\tax[i] = buf[7] - '0';\n\t\t}\n\t\tfor (int i = 0; i &lt; m; i++) {\n\t\t\tb[i] = 0;\n\t\t\tscanf(\"%s\", buf);\n\t\t\tfor (int j = 0; j &lt; 7; j++) {\n\t\t\t\tb[i] = b[i] &lt;&lt; 1 | (buf[j] - '0');\n\t\t\t}\n\t\t\tbx[i] = buf[7] - '0';\n\t\t}\n\t\tKMP_Count(b, m, a, n);\n\t\tif (pos.size() == 0) puts(\"No\");\n\t\telse {\n\t\t\treverse(bx, bx + m);\n\t\t\tmemset(res, 0, sizeof(res));\n\t\t\tputs(\"Yes\");\n\t\t\tConvolution(ax, bx);\n\t\t\tfor (int i = 0; i &lt; n; i++)\n\t\t\t\tax[i] ^= 1;\n\t\t\tfor (int i = 0; i &lt; m; i++)\n\t\t\t\tbx[i] ^= 1;\n\t\t\tConvolution(ax, bx);\n\t\t\tint ans = m, idx = 0;\n\t\t\tfor (int i = 0; i &lt; (int) pos.size(); i++) {\n\t\t\t\tif (m - res[pos[i]] &lt; ans) {\n\t\t\t\t\tans = m - res[pos[i]];\n\t\t\t\t\tidx = pos[i] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"%d %d\\n\", ans, idx);\n\t\t}\n\t}\n}\n```\n","slug":"timus-1996-cipher-message-3-kmpfft","published":1,"updated":"2015-02-26T02:59:31.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8ob002ewppvba1jybn2","content":"<p>题目链接：<a href=\"http://acm.timus.ru/problem.aspx?space=1&amp;num=1996\" target=\"_blank\" rel=\"external\">click here</a></p>\n<p>##description<br>Emperor Palpatine has been ruling the Empire for 25 years and Darth Vader has been the head of the Empire Armed Forces. However, the Rebel movement is strong like it never used to be. One of the rebel leaders, Princess Leia from Alderaan, managed to get hold of secret blueprints of the Death Star, the imperial war station.</p>\n<p>The Princess was going to deliver the station plan to the secret base for further analysis and searching for vulnerable spots. But her ship was attacked by the space destroyer “Devastator” headed by Darth Vader. At the last moment Princess Leia managed to send her findings to one of the closest planet called Tatooine with her droid R2-D2. Quite conveniently, an old friend of her father Obi-Wan Kenobi lives on that planet.</p>\n<p>R2-D2 realizes the importance of his mission. He is going to encrypt the information so that the wrong people won’t get it.<br><a id=\"more\"></a><br>The memory of R2-D2 has many files with images. First he wanted to use a well-known encrypting algorithm. The point of the method is to replace the least significant bits of the image with the encrypted message bits. The difference is practically unnoticeable on the picture, so one won’t suspect that it contains a hidden message.</p>\n<p>But then R2-D2 decided that this method is quite well-known and the information won’t be protected enough. He decided to change the least significant bits of the image so that the secret information was a continuous sequence of the bytes of the image file. Help the droid determine if it is possible. And if it is, find the minimum number of bits to alter.</p>\n<h2 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h2><p>The first line of the input contains integers <em>n</em> and <em>m</em> (1 ≤ <em>n</em>, <em>m</em> ≤ 250 000) — the sizes of the image file and of the file with the secret information in bytes. On the second line the content of the file with an image is given and the third line contains the secret information. The files are given as a sequence of space-separated bytes. Each byte is written as a sequence of eight bits in the order from the most to the least significant bit.</p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>Print “No”, if it is impossible to encrypt information in this image. Otherwise, print in the first line “Yes”, and in the second line — the number of bits to alter and the number of the byte in the file with the image, starting from which the secret information will be recorded. If there are multiple possible variants, print the one where the secret information is written closer to the beginning of the image file.</p>\n<h2 id=\"Samples\"><a href=\"#Samples\" class=\"headerlink\" title=\"Samples\"></a>Samples</h2><table>\n<thead>\n<tr>\n<th>input</th>\n<th>output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3 2<br> 11110001 11110001 11110000<br>11110000 11110000</td>\n<td>Yes<br>1 2</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>input</th>\n<th>output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3 1<br>11110000 11110001 11110000<br>11110000</td>\n<td>Yes<br>0 1</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Problem Author: </strong>Denis Dublennykh (prepared by Oleg Dolgorukov)</p>\n<p>题目老长难懂，其实就是给你一个n byte的01A串，m byte的01B串.其中A串中每一byte的最后一个bit是可以修改的，问至少修改多少次A串能使B使A的子串。输出修改次数与最小的起始匹配位置。</p>\n<p>首先将A串每byte取前7位（代码中的a数组）与B串每byte取前7位（代码中的b数组）用KMP匹配，因为前7位不能改，所以如果没有一处匹配就直接输出No了。</p>\n<p>然后将A串每byte取后1位（代码中的ax数组）与B串每byte取后一位（代码中的bx数组）求hamming距离。</p>\n<p>如何求ax与bx的hamming距离呢？</p>\n<p>可以巧妙的ax作为卷积中的f函数，bx的逆向数组bx`作为卷积中的g函数。两者求卷积。这样就成了：<br>$$c[i + m - 1] = ax[i + 0] <em> bx`[m - 0 - 1] + ax[i + 1] </em> bx`[m - 1 - 1] + …… ax[i + j] <em> bx`[m - j - 1] + …… ax[i + m - 1] </em> bx`[m - (m - 1) - 1]$$</p>\n<p>可以看出，如果ax , bx中同为1,乘积为1,否则为0,这样就能统计出了有多少位同为1了。</p>\n<p>如果将ax,bx数组中的01取反，再进行上述操作，那么救能统计出有多少位同为0了。两者相加就是全部相同的有多少，用总字符数m减去它，就能求出hamming距离了！</p>\n<p>卷积复杂度为O(nlg(n))而暴力算法的复杂度为O(n×m)，真是太神奇了！<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\">const int N = 250005;</div><div class=\"line\">int n, m;</div><div class=\"line\">const double pi = acos(-1.0);</div><div class=\"line\">// Complex  z = a + b * i</div><div class=\"line\">struct Complex &#123;</div><div class=\"line\">\tdouble x, y;</div><div class=\"line\">\tComplex(double x = 0.0, double y = 0.0) :</div><div class=\"line\">\t\t\tx(x), y(y) &#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tComplex operator +(const Complex &amp;amp;c) const &#123;</div><div class=\"line\">\t\treturn Complex(x + c.x, y + c.y);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tComplex operator -(const Complex &amp;amp;c) const &#123;</div><div class=\"line\">\t\treturn Complex(x - c.x, y - c.y);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tComplex operator *(const Complex &amp;amp;c) const &#123;</div><div class=\"line\">\t\treturn Complex(x * c.x - y * c.y, x * c.y + y * c.x);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">int a[N], b[N], ax[N], bx[N];</div><div class=\"line\">char buf[8];</div><div class=\"line\">/*</div><div class=\"line\"> * kmpNext[]的意思:next'[i]=next[next[...[next[i]]]] (直到next'[i]&amp;lt;0或者</div><div class=\"line\"> x[next'[i]]!=x[i])</div><div class=\"line\"> * 这样的预处理可以快一些</div><div class=\"line\"> */</div><div class=\"line\">void preKMP(int x[], int m, int kmpNext[]) &#123;</div><div class=\"line\">\tint i, j;</div><div class=\"line\">\tj = kmpNext[0] = -1;</div><div class=\"line\">\ti = 0;</div><div class=\"line\">\twhile (i &amp;lt; m) &#123;</div><div class=\"line\">\t\twhile (-1 != j &amp;amp;&amp;amp; x[i] != x[j])</div><div class=\"line\">\t\t\tj = kmpNext[j];</div><div class=\"line\">\t\tif (x[++i] == x[++j]) kmpNext[i] = kmpNext[j];</div><div class=\"line\">\t\telse kmpNext[i] = j;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/*</div><div class=\"line\"> * 返回x在y中出现的次数,可以重叠</div><div class=\"line\"> */</div><div class=\"line\">int next[N];</div><div class=\"line\">vector pos;</div><div class=\"line\">void KMP_Count(int x[], int m, int y[], int n) &#123; //x是模式串,y是主串</div><div class=\"line\">\tint i, j;</div><div class=\"line\">\tpos.clear();</div><div class=\"line\">\tpreKMP(x, m, next);</div><div class=\"line\">\ti = j = 0;</div><div class=\"line\">\twhile (i &amp;lt; n) &#123;</div><div class=\"line\">\t\twhile (-1 != j &amp;amp;&amp;amp; y[i] != x[j])</div><div class=\"line\">\t\t\tj = next[j];</div><div class=\"line\">\t\ti++;</div><div class=\"line\">\t\tj++;</div><div class=\"line\">\t\tif (j &amp;gt;= m) &#123;</div><div class=\"line\">\t\t\tpos.push_back(i - m);</div><div class=\"line\">\t\t\tj = next[j];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//len = 2 ^ k</div><div class=\"line\">inline void change(Complex y[], int len) &#123;</div><div class=\"line\">\tfor (int i = 1, j = len / 2; i &amp;lt; len - 1; i++) &#123;</div><div class=\"line\">\t\tif (i &amp;lt; j) swap(y[i], y[j]);</div><div class=\"line\">\t\tint k = len / 2;</div><div class=\"line\">\t\twhile (j &amp;gt;= k) &#123;</div><div class=\"line\">\t\t\tj -= k;</div><div class=\"line\">\t\t\tk /= 2;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tif (j &amp;lt; k) j += k;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// FFT</div><div class=\"line\">// len = 2 ^ k</div><div class=\"line\">// on = 1  DFT    on = -1 IDFT</div><div class=\"line\">inline void FFT(Complex y[], int len, int on) &#123;</div><div class=\"line\">\tchange(y, len);</div><div class=\"line\">\tfor (int h = 2; h &amp;lt;= len; h &amp;lt;&amp;lt;= 1) &#123;</div><div class=\"line\">\t\tComplex wn(cos(-on * 2 * pi / h), sin(-on * 2 * pi / h));</div><div class=\"line\">\t\tfor (int j = 0; j &amp;lt; len; j += h) &#123;</div><div class=\"line\">\t\t\tComplex w(1, 0);</div><div class=\"line\">\t\t\tfor (int k = j; k &amp;lt; j + h / 2; k++) &#123;</div><div class=\"line\">\t\t\t\tComplex u = y[k];</div><div class=\"line\">\t\t\t\tComplex t = w * y[k + h / 2];</div><div class=\"line\">\t\t\t\ty[k] = u + t;</div><div class=\"line\">\t\t\t\ty[k + h / 2] = u - t;</div><div class=\"line\">\t\t\t\tw = w * wn;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tif (on == -1) &#123;</div><div class=\"line\">\t\tfor (int i = 0; i &amp;lt; len; i++) &#123;</div><div class=\"line\">\t\t\ty[i].x /= len;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//FFT求卷积,a数组长度n，b数组长度m</div><div class=\"line\">int res[N];</div><div class=\"line\">Complex x1[N &amp;lt;&amp;lt; 2], x2[N &amp;lt;&amp;lt; 2]; //FFT开4倍</div><div class=\"line\">void Convolution(int a[], int b[]) &#123;</div><div class=\"line\">\tint len = max(n, m);</div><div class=\"line\">\tint l = 1;</div><div class=\"line\">\twhile (l &amp;lt; len * 2)</div><div class=\"line\">\t\tl &amp;lt;&amp;lt;= 1;</div><div class=\"line\">\tfor (int i = 0; i &amp;lt; l; i++)</div><div class=\"line\">\t\tx1[i] = Complex(i &amp;lt; n ? a[i] : 0, 0);</div><div class=\"line\">\tfor (int i = 0; i &amp;lt; l; i++)</div><div class=\"line\">\t\tx2[i] = Complex(i &amp;lt; m ? b[i] : 0, 0);</div><div class=\"line\">\t//DFT</div><div class=\"line\">\tFFT(x1, l, 1);</div><div class=\"line\">\tFFT(x2, l, 1);</div><div class=\"line\">\tfor (int i = 0; i &amp;lt; l; i++)</div><div class=\"line\">\t\tx1[i] = x1[i] * x2[i];</div><div class=\"line\">\t//IDFT</div><div class=\"line\">\tFFT(x1, l, -1);</div><div class=\"line\">\t//based on m</div><div class=\"line\">\tint base = m ;</div><div class=\"line\">\tfor (int i = 0; i &amp;lt;= n - base; i++) &#123;</div><div class=\"line\">\t\tres[i] += (int) (x1[i + base - 1].x + 0.5);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">int main() &#123;</div><div class=\"line\">\twhile (~scanf(\"%d%d\", &amp;amp;n, &amp;amp;m)) &#123;</div><div class=\"line\">\t\tfor (int i = 0; i &amp;lt; n; i++) &#123;</div><div class=\"line\">\t\t\ta[i] = 0;</div><div class=\"line\">\t\t\tscanf(\"%s\", buf);</div><div class=\"line\">\t\t\tfor (int j = 0; j &amp;lt; 7; j++) &#123;</div><div class=\"line\">\t\t\t\ta[i] = a[i] &amp;lt;&amp;lt; 1 | (buf[j] - '0');</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tax[i] = buf[7] - '0';</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tfor (int i = 0; i &amp;lt; m; i++) &#123;</div><div class=\"line\">\t\t\tb[i] = 0;</div><div class=\"line\">\t\t\tscanf(\"%s\", buf);</div><div class=\"line\">\t\t\tfor (int j = 0; j &amp;lt; 7; j++) &#123;</div><div class=\"line\">\t\t\t\tb[i] = b[i] &amp;lt;&amp;lt; 1 | (buf[j] - '0');</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tbx[i] = buf[7] - '0';</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tKMP_Count(b, m, a, n);</div><div class=\"line\">\t\tif (pos.size() == 0) puts(\"No\");</div><div class=\"line\">\t\telse &#123;</div><div class=\"line\">\t\t\treverse(bx, bx + m);</div><div class=\"line\">\t\t\tmemset(res, 0, sizeof(res));</div><div class=\"line\">\t\t\tputs(\"Yes\");</div><div class=\"line\">\t\t\tConvolution(ax, bx);</div><div class=\"line\">\t\t\tfor (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">\t\t\t\tax[i] ^= 1;</div><div class=\"line\">\t\t\tfor (int i = 0; i &amp;lt; m; i++)</div><div class=\"line\">\t\t\t\tbx[i] ^= 1;</div><div class=\"line\">\t\t\tConvolution(ax, bx);</div><div class=\"line\">\t\t\tint ans = m, idx = 0;</div><div class=\"line\">\t\t\tfor (int i = 0; i &amp;lt; (int) pos.size(); i++) &#123;</div><div class=\"line\">\t\t\t\tif (m - res[pos[i]] &amp;lt; ans) &#123;</div><div class=\"line\">\t\t\t\t\tans = m - res[pos[i]];</div><div class=\"line\">\t\t\t\t\tidx = pos[i] + 1;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tprintf(\"%d %d\\n\", ans, idx);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>题目链接：<a href=\"http://acm.timus.ru/problem.aspx?space=1&amp;num=1996\">click here</a></p>\n<p>##description<br>Emperor Palpatine has been ruling the Empire for 25 years and Darth Vader has been the head of the Empire Armed Forces. However, the Rebel movement is strong like it never used to be. One of the rebel leaders, Princess Leia from Alderaan, managed to get hold of secret blueprints of the Death Star, the imperial war station.</p>\n<p>The Princess was going to deliver the station plan to the secret base for further analysis and searching for vulnerable spots. But her ship was attacked by the space destroyer “Devastator” headed by Darth Vader. At the last moment Princess Leia managed to send her findings to one of the closest planet called Tatooine with her droid R2-D2. Quite conveniently, an old friend of her father Obi-Wan Kenobi lives on that planet.</p>\n<p>R2-D2 realizes the importance of his mission. He is going to encrypt the information so that the wrong people won’t get it.<br>","more":"<br>The memory of R2-D2 has many files with images. First he wanted to use a well-known encrypting algorithm. The point of the method is to replace the least significant bits of the image with the encrypted message bits. The difference is practically unnoticeable on the picture, so one won’t suspect that it contains a hidden message.</p>\n<p>But then R2-D2 decided that this method is quite well-known and the information won’t be protected enough. He decided to change the least significant bits of the image so that the secret information was a continuous sequence of the bytes of the image file. Help the droid determine if it is possible. And if it is, find the minimum number of bits to alter.</p>\n<h2 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h2><p>The first line of the input contains integers <em>n</em> and <em>m</em> (1 ≤ <em>n</em>, <em>m</em> ≤ 250 000) — the sizes of the image file and of the file with the secret information in bytes. On the second line the content of the file with an image is given and the third line contains the secret information. The files are given as a sequence of space-separated bytes. Each byte is written as a sequence of eight bits in the order from the most to the least significant bit.</p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>Print “No”, if it is impossible to encrypt information in this image. Otherwise, print in the first line “Yes”, and in the second line — the number of bits to alter and the number of the byte in the file with the image, starting from which the secret information will be recorded. If there are multiple possible variants, print the one where the secret information is written closer to the beginning of the image file.</p>\n<h2 id=\"Samples\"><a href=\"#Samples\" class=\"headerlink\" title=\"Samples\"></a>Samples</h2><table>\n<thead>\n<tr>\n<th>input</th>\n<th>output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3 2<br/> 11110001 11110001 11110000<br/>11110000 11110000</td>\n<td>Yes<br/>1 2</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>input</th>\n<th>output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3 1<br/>11110000 11110001 11110000<br/>11110000</td>\n<td>Yes<br/>0 1</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Problem Author: </strong>Denis Dublennykh (prepared by Oleg Dolgorukov)</p>\n<p>题目老长难懂，其实就是给你一个n byte的01A串，m byte的01B串.其中A串中每一byte的最后一个bit是可以修改的，问至少修改多少次A串能使B使A的子串。输出修改次数与最小的起始匹配位置。</p>\n<p>首先将A串每byte取前7位（代码中的a数组）与B串每byte取前7位（代码中的b数组）用KMP匹配，因为前7位不能改，所以如果没有一处匹配就直接输出No了。</p>\n<p>然后将A串每byte取后1位（代码中的ax数组）与B串每byte取后一位（代码中的bx数组）求hamming距离。</p>\n<p>如何求ax与bx的hamming距离呢？</p>\n<p>可以巧妙的ax作为卷积中的f函数，bx的逆向数组bx`作为卷积中的g函数。两者求卷积。这样就成了：<br>$$c[i + m - 1] = ax[i + 0] <em> bx`[m - 0 - 1] + ax[i + 1] </em> bx`[m - 1 - 1] + …… ax[i + j] <em> bx`[m - j - 1] + …… ax[i + m - 1] </em> bx`[m - (m - 1) - 1]$$</p>\n<p>可以看出，如果ax , bx中同为1,乘积为1,否则为0,这样就能统计出了有多少位同为1了。</p>\n<p>如果将ax,bx数组中的01取反，再进行上述操作，那么救能统计出有多少位同为0了。两者相加就是全部相同的有多少，用总字符数m减去它，就能求出hamming距离了！</p>\n<p>卷积复杂度为O(nlg(n))而暴力算法的复杂度为O(n×m)，真是太神奇了！<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\">const int N = 250005;</div><div class=\"line\">int n, m;</div><div class=\"line\">const double pi = acos(-1.0);</div><div class=\"line\">// Complex  z = a + b * i</div><div class=\"line\">struct Complex &#123;</div><div class=\"line\">\tdouble x, y;</div><div class=\"line\">\tComplex(double x = 0.0, double y = 0.0) :</div><div class=\"line\">\t\t\tx(x), y(y) &#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tComplex operator +(const Complex &amp;amp;c) const &#123;</div><div class=\"line\">\t\treturn Complex(x + c.x, y + c.y);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tComplex operator -(const Complex &amp;amp;c) const &#123;</div><div class=\"line\">\t\treturn Complex(x - c.x, y - c.y);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tComplex operator *(const Complex &amp;amp;c) const &#123;</div><div class=\"line\">\t\treturn Complex(x * c.x - y * c.y, x * c.y + y * c.x);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">int a[N], b[N], ax[N], bx[N];</div><div class=\"line\">char buf[8];</div><div class=\"line\">/*</div><div class=\"line\"> * kmpNext[]的意思:next'[i]=next[next[...[next[i]]]] (直到next'[i]&amp;lt;0或者</div><div class=\"line\"> x[next'[i]]!=x[i])</div><div class=\"line\"> * 这样的预处理可以快一些</div><div class=\"line\"> */</div><div class=\"line\">void preKMP(int x[], int m, int kmpNext[]) &#123;</div><div class=\"line\">\tint i, j;</div><div class=\"line\">\tj = kmpNext[0] = -1;</div><div class=\"line\">\ti = 0;</div><div class=\"line\">\twhile (i &amp;lt; m) &#123;</div><div class=\"line\">\t\twhile (-1 != j &amp;amp;&amp;amp; x[i] != x[j])</div><div class=\"line\">\t\t\tj = kmpNext[j];</div><div class=\"line\">\t\tif (x[++i] == x[++j]) kmpNext[i] = kmpNext[j];</div><div class=\"line\">\t\telse kmpNext[i] = j;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/*</div><div class=\"line\"> * 返回x在y中出现的次数,可以重叠</div><div class=\"line\"> */</div><div class=\"line\">int next[N];</div><div class=\"line\">vector pos;</div><div class=\"line\">void KMP_Count(int x[], int m, int y[], int n) &#123; //x是模式串,y是主串</div><div class=\"line\">\tint i, j;</div><div class=\"line\">\tpos.clear();</div><div class=\"line\">\tpreKMP(x, m, next);</div><div class=\"line\">\ti = j = 0;</div><div class=\"line\">\twhile (i &amp;lt; n) &#123;</div><div class=\"line\">\t\twhile (-1 != j &amp;amp;&amp;amp; y[i] != x[j])</div><div class=\"line\">\t\t\tj = next[j];</div><div class=\"line\">\t\ti++;</div><div class=\"line\">\t\tj++;</div><div class=\"line\">\t\tif (j &amp;gt;= m) &#123;</div><div class=\"line\">\t\t\tpos.push_back(i - m);</div><div class=\"line\">\t\t\tj = next[j];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//len = 2 ^ k</div><div class=\"line\">inline void change(Complex y[], int len) &#123;</div><div class=\"line\">\tfor (int i = 1, j = len / 2; i &amp;lt; len - 1; i++) &#123;</div><div class=\"line\">\t\tif (i &amp;lt; j) swap(y[i], y[j]);</div><div class=\"line\">\t\tint k = len / 2;</div><div class=\"line\">\t\twhile (j &amp;gt;= k) &#123;</div><div class=\"line\">\t\t\tj -= k;</div><div class=\"line\">\t\t\tk /= 2;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tif (j &amp;lt; k) j += k;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// FFT</div><div class=\"line\">// len = 2 ^ k</div><div class=\"line\">// on = 1  DFT    on = -1 IDFT</div><div class=\"line\">inline void FFT(Complex y[], int len, int on) &#123;</div><div class=\"line\">\tchange(y, len);</div><div class=\"line\">\tfor (int h = 2; h &amp;lt;= len; h &amp;lt;&amp;lt;= 1) &#123;</div><div class=\"line\">\t\tComplex wn(cos(-on * 2 * pi / h), sin(-on * 2 * pi / h));</div><div class=\"line\">\t\tfor (int j = 0; j &amp;lt; len; j += h) &#123;</div><div class=\"line\">\t\t\tComplex w(1, 0);</div><div class=\"line\">\t\t\tfor (int k = j; k &amp;lt; j + h / 2; k++) &#123;</div><div class=\"line\">\t\t\t\tComplex u = y[k];</div><div class=\"line\">\t\t\t\tComplex t = w * y[k + h / 2];</div><div class=\"line\">\t\t\t\ty[k] = u + t;</div><div class=\"line\">\t\t\t\ty[k + h / 2] = u - t;</div><div class=\"line\">\t\t\t\tw = w * wn;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tif (on == -1) &#123;</div><div class=\"line\">\t\tfor (int i = 0; i &amp;lt; len; i++) &#123;</div><div class=\"line\">\t\t\ty[i].x /= len;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//FFT求卷积,a数组长度n，b数组长度m</div><div class=\"line\">int res[N];</div><div class=\"line\">Complex x1[N &amp;lt;&amp;lt; 2], x2[N &amp;lt;&amp;lt; 2]; //FFT开4倍</div><div class=\"line\">void Convolution(int a[], int b[]) &#123;</div><div class=\"line\">\tint len = max(n, m);</div><div class=\"line\">\tint l = 1;</div><div class=\"line\">\twhile (l &amp;lt; len * 2)</div><div class=\"line\">\t\tl &amp;lt;&amp;lt;= 1;</div><div class=\"line\">\tfor (int i = 0; i &amp;lt; l; i++)</div><div class=\"line\">\t\tx1[i] = Complex(i &amp;lt; n ? a[i] : 0, 0);</div><div class=\"line\">\tfor (int i = 0; i &amp;lt; l; i++)</div><div class=\"line\">\t\tx2[i] = Complex(i &amp;lt; m ? b[i] : 0, 0);</div><div class=\"line\">\t//DFT</div><div class=\"line\">\tFFT(x1, l, 1);</div><div class=\"line\">\tFFT(x2, l, 1);</div><div class=\"line\">\tfor (int i = 0; i &amp;lt; l; i++)</div><div class=\"line\">\t\tx1[i] = x1[i] * x2[i];</div><div class=\"line\">\t//IDFT</div><div class=\"line\">\tFFT(x1, l, -1);</div><div class=\"line\">\t//based on m</div><div class=\"line\">\tint base = m ;</div><div class=\"line\">\tfor (int i = 0; i &amp;lt;= n - base; i++) &#123;</div><div class=\"line\">\t\tres[i] += (int) (x1[i + base - 1].x + 0.5);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">int main() &#123;</div><div class=\"line\">\twhile (~scanf(\"%d%d\", &amp;amp;n, &amp;amp;m)) &#123;</div><div class=\"line\">\t\tfor (int i = 0; i &amp;lt; n; i++) &#123;</div><div class=\"line\">\t\t\ta[i] = 0;</div><div class=\"line\">\t\t\tscanf(\"%s\", buf);</div><div class=\"line\">\t\t\tfor (int j = 0; j &amp;lt; 7; j++) &#123;</div><div class=\"line\">\t\t\t\ta[i] = a[i] &amp;lt;&amp;lt; 1 | (buf[j] - '0');</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tax[i] = buf[7] - '0';</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tfor (int i = 0; i &amp;lt; m; i++) &#123;</div><div class=\"line\">\t\t\tb[i] = 0;</div><div class=\"line\">\t\t\tscanf(\"%s\", buf);</div><div class=\"line\">\t\t\tfor (int j = 0; j &amp;lt; 7; j++) &#123;</div><div class=\"line\">\t\t\t\tb[i] = b[i] &amp;lt;&amp;lt; 1 | (buf[j] - '0');</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tbx[i] = buf[7] - '0';</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tKMP_Count(b, m, a, n);</div><div class=\"line\">\t\tif (pos.size() == 0) puts(\"No\");</div><div class=\"line\">\t\telse &#123;</div><div class=\"line\">\t\t\treverse(bx, bx + m);</div><div class=\"line\">\t\t\tmemset(res, 0, sizeof(res));</div><div class=\"line\">\t\t\tputs(\"Yes\");</div><div class=\"line\">\t\t\tConvolution(ax, bx);</div><div class=\"line\">\t\t\tfor (int i = 0; i &amp;lt; n; i++)</div><div class=\"line\">\t\t\t\tax[i] ^= 1;</div><div class=\"line\">\t\t\tfor (int i = 0; i &amp;lt; m; i++)</div><div class=\"line\">\t\t\t\tbx[i] ^= 1;</div><div class=\"line\">\t\t\tConvolution(ax, bx);</div><div class=\"line\">\t\t\tint ans = m, idx = 0;</div><div class=\"line\">\t\t\tfor (int i = 0; i &amp;lt; (int) pos.size(); i++) &#123;</div><div class=\"line\">\t\t\t\tif (m - res[pos[i]] &amp;lt; ans) &#123;</div><div class=\"line\">\t\t\t\t\tans = m - res[pos[i]];</div><div class=\"line\">\t\t\t\t\tidx = pos[i] + 1;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tprintf(\"%d %d\\n\", ans, idx);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"优化Wine程序的字体显示","date":"2014-10-13T04:42:42.000Z","_content":"\n默认Wine的字体太难看，而且有时候还会显示不出来。开启Wine字体的反锯齿及平滑功能以及将字体映射成文泉驿微米黑的方法是：\n\n1.新建文本文件a.reg，放入如下内容：\n<!--more-->\n```language\nREGEDIT4\n\n[HKEY_CURRENT_USER\\Software\\Wine\\X11 Driver]\n\"ClientSideAntiAliasWithCore\"=\"Y\"\n\"ClientSideAntiAliasWithRender\"=\"Y\"\n\"ClientSideWithRender\"=\"Y\"\n\n[HKEY_CURRENT_USER\\Control Panel\\Desktop]\n\"FontSmoothing\"=\"2\"\n\"FontSmoothingType\"=dword:00000002\n\"FontSmoothingGamma\"=dword:00000578\n\"FontSmoothingOrientation\"=dword:00000001\n\n[HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\FontSubstitutes]\n\"Arial Baltic,186\"=\"WenQuanYi Micro Hei\"\n\"Arial CE,238\"=\"WenQuanYi Micro Hei\"\n\"Arial CYR,204\"=\"WenQuanYi Micro Hei\"\n\"Arial Greek,161\"=\"WenQuanYi Micro Hei\"\n\"Arial TUR,162\"=\"WenQuanYi Micro Hei\"\n\"Courier New Baltic,186\"=\"WenQuanYi Micro Hei\"\n\"Courier New CE,238\"=\"WenQuanYi Micro Hei\"\n\"Courier New CYR,204\"=\"WenQuanYi Micro Hei\"\n\"Courier New Greek,161\"=\"WenQuanYi Micro Hei\"\n\"Courier New TUR,162\"=\"WenQuanYi Micro Hei\"\n\"Helv\"=\"WenQuanYi Micro Hei\"\n\"Helvetica\"=\"WenQuanYi Micro Hei\"\n\"MS Shell Dlg\"=\"WenQuanYi Micro Hei\"\n\"MS Shell Dlg 2\"=\"WenQuanYi Micro Hei\"\n\"Tahoma\"=\"WenQuanYi Micro Hei\"\n\"Times\"=\"WenQuanYi Micro Hei\"\n\"Times New Roman Baltic,186\"=\"WenQuanYi Micro Hei\"\n\"Times New Roman CE,238\"=\"WenQuanYi Micro Hei\"\n\"Times New Roman CYR,204\"=\"WenQuanYi Micro Hei\"\n\"Times New Roman Greek,161\"=\"WenQuanYi Micro Hei\"\n\"Times New Roman TUR,162\"=\"WenQuanYi Micro Hei\"\n\"Tms Rmn\"=\"WenQuanYi Micro Hei\"\n\"Simsun\"=\"WenQuanYi Micro Hei\"\n```\n\n2.如果是普通的wine直接终端输入wine regedit打开注册表编辑器。然后点击“注册表—&gt;导入注册表文件\"导入该文件。\n\n3.如果是longene等封装好的wine（比如tm2013）可以使用tm2013 -reg命令打开注册表。\n\n","source":"_posts/wine-font-config.md","raw":"title: 优化Wine程序的字体显示\ncategories:\n  - Wine\ndate: 2014-10-13 12:42:42\ntags: [linux]\n---\n\n默认Wine的字体太难看，而且有时候还会显示不出来。开启Wine字体的反锯齿及平滑功能以及将字体映射成文泉驿微米黑的方法是：\n\n1.新建文本文件a.reg，放入如下内容：\n<!--more-->\n```language\nREGEDIT4\n\n[HKEY_CURRENT_USER\\Software\\Wine\\X11 Driver]\n\"ClientSideAntiAliasWithCore\"=\"Y\"\n\"ClientSideAntiAliasWithRender\"=\"Y\"\n\"ClientSideWithRender\"=\"Y\"\n\n[HKEY_CURRENT_USER\\Control Panel\\Desktop]\n\"FontSmoothing\"=\"2\"\n\"FontSmoothingType\"=dword:00000002\n\"FontSmoothingGamma\"=dword:00000578\n\"FontSmoothingOrientation\"=dword:00000001\n\n[HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\FontSubstitutes]\n\"Arial Baltic,186\"=\"WenQuanYi Micro Hei\"\n\"Arial CE,238\"=\"WenQuanYi Micro Hei\"\n\"Arial CYR,204\"=\"WenQuanYi Micro Hei\"\n\"Arial Greek,161\"=\"WenQuanYi Micro Hei\"\n\"Arial TUR,162\"=\"WenQuanYi Micro Hei\"\n\"Courier New Baltic,186\"=\"WenQuanYi Micro Hei\"\n\"Courier New CE,238\"=\"WenQuanYi Micro Hei\"\n\"Courier New CYR,204\"=\"WenQuanYi Micro Hei\"\n\"Courier New Greek,161\"=\"WenQuanYi Micro Hei\"\n\"Courier New TUR,162\"=\"WenQuanYi Micro Hei\"\n\"Helv\"=\"WenQuanYi Micro Hei\"\n\"Helvetica\"=\"WenQuanYi Micro Hei\"\n\"MS Shell Dlg\"=\"WenQuanYi Micro Hei\"\n\"MS Shell Dlg 2\"=\"WenQuanYi Micro Hei\"\n\"Tahoma\"=\"WenQuanYi Micro Hei\"\n\"Times\"=\"WenQuanYi Micro Hei\"\n\"Times New Roman Baltic,186\"=\"WenQuanYi Micro Hei\"\n\"Times New Roman CE,238\"=\"WenQuanYi Micro Hei\"\n\"Times New Roman CYR,204\"=\"WenQuanYi Micro Hei\"\n\"Times New Roman Greek,161\"=\"WenQuanYi Micro Hei\"\n\"Times New Roman TUR,162\"=\"WenQuanYi Micro Hei\"\n\"Tms Rmn\"=\"WenQuanYi Micro Hei\"\n\"Simsun\"=\"WenQuanYi Micro Hei\"\n```\n\n2.如果是普通的wine直接终端输入wine regedit打开注册表编辑器。然后点击“注册表—&gt;导入注册表文件\"导入该文件。\n\n3.如果是longene等封装好的wine（比如tm2013）可以使用tm2013 -reg命令打开注册表。\n\n","slug":"wine-font-config","published":1,"updated":"2015-02-26T03:00:00.850Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8oc002hwppv5eueuuzk","content":"<p>默认Wine的字体太难看，而且有时候还会显示不出来。开启Wine字体的反锯齿及平滑功能以及将字体映射成文泉驿微米黑的方法是：</p>\n<p>1.新建文本文件a.reg，放入如下内容：<br><a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">REGEDIT4</div><div class=\"line\"></div><div class=\"line\">[HKEY_CURRENT_USER\\Software\\Wine\\X11 Driver]</div><div class=\"line\">&quot;ClientSideAntiAliasWithCore&quot;=&quot;Y&quot;</div><div class=\"line\">&quot;ClientSideAntiAliasWithRender&quot;=&quot;Y&quot;</div><div class=\"line\">&quot;ClientSideWithRender&quot;=&quot;Y&quot;</div><div class=\"line\"></div><div class=\"line\">[HKEY_CURRENT_USER\\Control Panel\\Desktop]</div><div class=\"line\">&quot;FontSmoothing&quot;=&quot;2&quot;</div><div class=\"line\">&quot;FontSmoothingType&quot;=dword:00000002</div><div class=\"line\">&quot;FontSmoothingGamma&quot;=dword:00000578</div><div class=\"line\">&quot;FontSmoothingOrientation&quot;=dword:00000001</div><div class=\"line\"></div><div class=\"line\">[HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\FontSubstitutes]</div><div class=\"line\">&quot;Arial Baltic,186&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Arial CE,238&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Arial CYR,204&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Arial Greek,161&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Arial TUR,162&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Courier New Baltic,186&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Courier New CE,238&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Courier New CYR,204&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Courier New Greek,161&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Courier New TUR,162&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Helv&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Helvetica&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;MS Shell Dlg&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;MS Shell Dlg 2&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Tahoma&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Times&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Times New Roman Baltic,186&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Times New Roman CE,238&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Times New Roman CYR,204&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Times New Roman Greek,161&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Times New Roman TUR,162&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Tms Rmn&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Simsun&quot;=&quot;WenQuanYi Micro Hei&quot;</div></pre></td></tr></table></figure></p>\n<p>2.如果是普通的wine直接终端输入wine regedit打开注册表编辑器。然后点击“注册表—&gt;导入注册表文件”导入该文件。</p>\n<p>3.如果是longene等封装好的wine（比如tm2013）可以使用tm2013 -reg命令打开注册表。</p>\n","excerpt":"<p>默认Wine的字体太难看，而且有时候还会显示不出来。开启Wine字体的反锯齿及平滑功能以及将字体映射成文泉驿微米黑的方法是：</p>\n<p>1.新建文本文件a.reg，放入如下内容：<br>","more":"<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">REGEDIT4</div><div class=\"line\"></div><div class=\"line\">[HKEY_CURRENT_USER\\Software\\Wine\\X11 Driver]</div><div class=\"line\">&quot;ClientSideAntiAliasWithCore&quot;=&quot;Y&quot;</div><div class=\"line\">&quot;ClientSideAntiAliasWithRender&quot;=&quot;Y&quot;</div><div class=\"line\">&quot;ClientSideWithRender&quot;=&quot;Y&quot;</div><div class=\"line\"></div><div class=\"line\">[HKEY_CURRENT_USER\\Control Panel\\Desktop]</div><div class=\"line\">&quot;FontSmoothing&quot;=&quot;2&quot;</div><div class=\"line\">&quot;FontSmoothingType&quot;=dword:00000002</div><div class=\"line\">&quot;FontSmoothingGamma&quot;=dword:00000578</div><div class=\"line\">&quot;FontSmoothingOrientation&quot;=dword:00000001</div><div class=\"line\"></div><div class=\"line\">[HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\FontSubstitutes]</div><div class=\"line\">&quot;Arial Baltic,186&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Arial CE,238&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Arial CYR,204&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Arial Greek,161&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Arial TUR,162&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Courier New Baltic,186&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Courier New CE,238&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Courier New CYR,204&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Courier New Greek,161&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Courier New TUR,162&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Helv&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Helvetica&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;MS Shell Dlg&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;MS Shell Dlg 2&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Tahoma&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Times&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Times New Roman Baltic,186&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Times New Roman CE,238&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Times New Roman CYR,204&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Times New Roman Greek,161&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Times New Roman TUR,162&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Tms Rmn&quot;=&quot;WenQuanYi Micro Hei&quot;</div><div class=\"line\">&quot;Simsun&quot;=&quot;WenQuanYi Micro Hei&quot;</div></pre></td></tr></table></figure></p>\n<p>2.如果是普通的wine直接终端输入wine regedit打开注册表编辑器。然后点击“注册表—&gt;导入注册表文件”导入该文件。</p>\n<p>3.如果是longene等封装好的wine（比如tm2013）可以使用tm2013 -reg命令打开注册表。</p>"},{"title":"我的xfce4配置","date":"2014-09-16T08:39:20.000Z","_content":"\n1.字体：infinally 渲染\n\n2.英文字体：courier prime\n\n3.窗口最大化隐藏标题栏：xfwm4-titleless-dev\n\n4.窗口最大化标题栏隐藏后，在任务栏上显示控制按钮的插件：xfce4-windowck-plugin","source":"_posts/xfce4-config.md","raw":"title: 我的xfce4配置\ncategories:\n  - Xfce\ndate: 2014-09-16 16:39:20\ntags:\n  - linux\n  - DE/WM\n\n---\n\n1.字体：infinally 渲染\n\n2.英文字体：courier prime\n\n3.窗口最大化隐藏标题栏：xfwm4-titleless-dev\n\n4.窗口最大化标题栏隐藏后，在任务栏上显示控制按钮的插件：xfce4-windowck-plugin","slug":"xfce4-config","published":1,"updated":"2015-02-26T03:08:54.374Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8of002lwppv0mw05om6","content":"<p>1.字体：infinally 渲染</p>\n<p>2.英文字体：courier prime</p>\n<p>3.窗口最大化隐藏标题栏：xfwm4-titleless-dev</p>\n<p>4.窗口最大化标题栏隐藏后，在任务栏上显示控制按钮的插件：xfce4-windowck-plugin</p>\n","excerpt":"","more":"<p>1.字体：infinally 渲染</p>\n<p>2.英文字体：courier prime</p>\n<p>3.窗口最大化隐藏标题栏：xfwm4-titleless-dev</p>\n<p>4.窗口最大化标题栏隐藏后，在任务栏上显示控制按钮的插件：xfce4-windowck-plugin</p>\n"},{"title":"内网2073 城主GeassCode","date":"2014-08-01T12:18:37.000Z","_content":"##Description\n\nGeassCode凭借自己在topcoder上的超凡表现，赢得了国王的喜爱，国王赏赐他一座城池。这座城池里有n个 村子，m条路连接这些村子。坐上城主的GeassCode决定要修路，他打算用最少的代价把所以的村子连在一起。据探子回报，有些村子之间虽然原来没有路 径，但是可以强行的去建一条路。GeassCode想知道，如果强行在某两个村子之间建一条路，最后的总花费是多少？\n\n<!--more-->\n\n##Input\n\n输入一行三个整数n，m，表示有n个村子，m条可建路径。\n\n2..m+1行，每行3个整数a,b,c（a≠b），表示可以在a和b村庄建一条花费为c的路径。\n\n第m+2行一个整数q，表示有多少个询问。\n\n接下来q个询问，每行3个整数a,b,c（a≠b），表示如果可以另外在a和b村庄建一条花费为c的路径，最终需要多少花费？\n\n##Output\n\n对于每个询问输出，输出最少的花费。\n\n\n##Sample Input\n4 5 1 2 4 2 3 3 1 4 6 2 4 3 1 3 2 3 3 4 3 1 3 1 1 4 2\n\n##Sample Output\n8 7 7\n\n##Hint\nn的范围[2,50000],m的范围[2,100000],q的范围[1,50000]。\n\n输入的m条边保证可以把所有村庄连在一起。输入的边权范围[1,10<sup>6</sup>]\n\n##Source\n\n张超\n<br/>\n\n- - -\n\n\n解法是如果可以在(u,v)上再加条边，则将最小生成树上的(u,v)节点最短路径中的最大边权与要加上这条边的替换。如果新的花费比旧的花费少，则取新的花费。否则什么也不换，取旧的花费。\n\n如何求树上两点之间的最短路径中的最大边权呢？\n\n可以按照这篇文章所述建一个类似于哈夫曼树，将点作为叶子，边的权值作为祖先构造一个N+N的树：[click here](http://blog.sina.com.cn/s/blog_51cea4040100ss3n.html)\n\n这样写的很容易错，尤其要区分两颗树的规模，我在这上面错了很久。\n\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define MP make_pair\n#define SI(x) set&lt;x&gt;::iterator\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set&lt;x&gt;::reverse_iterator\n#define VRI(x) vector&lt;x&gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define clrQ(x) while(!x.empty)x.pop();\n#define clrA(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n#define N 50005\n#define M 100005\nint n, m ;\nstruct Graph {\n    int u, v, w;\n    bool mark;\n    bool operator&lt;(Graph othr) const {\n        return w &lt; othr.w;\n    }\n} g[M];\n//UnionSet\nint p[N + N];\nvoid initUset(int n) {\n    for (int i = 0; i &lt;= n; i++)\n        p[i] = i;\n}\nint uFind(int x) {\n    return x == p[x] ? p[x] : p[x] = uFind(p[x]);\n}\nvoid uMerge(int x, int y) { //y合并到x\n    int fx = uFind(x);\n    int fy = uFind(y);\n    if (fx != fy) p[fy] = fx;\n}\n//Edge Graph\nint head[N + N], pos;\nstruct Edge {\n    int v, nxt;\n} e[N + N];\nvoid initEdge() {\n    memset(head, -1, sizeof(head));\n    pos = 0;\n}\nvoid add(int u, int v) {\n    e[pos].v = v;\n    e[pos].nxt = head[u];\n    head[u] = pos++;\n}\nint size;\nvector&lt;pr&lt;int, int&gt; &gt; query[N];\nint qw[N];\nbool vis[N];\nint lca[N];\nint val[N + N];\nint dfs(int u) {\n    int solved = 0;\n    for (int i = head[u]; ~i; i = e[i].nxt) {\n        int v = e[i].v;\n        solved += dfs(v);\n        if (size == solved) return solved;\n        uMerge(u, v);\n    }\n    if(~val[u])return solved;\n    vis[u] = 1;\n    for (int i = 0; i &lt; (int) query[u].size(); i++) {\n        int v = query[u][i].F;\n        if (vis[v]) {\n            solved++;\n            lca[query[u][i].S] = uFind(v);\n        }\n    }\n    return solved;\n}\nvoid tarjan() {\n    initUset(n);\n    clrA(vis, 0);\n    dfs(n);\n}\nvoid rebuild() {\n    clrA(val, -1);\n    initUset(n + n);\n    initEdge();\n    for (int i = 1; i &lt;= m; i++) {\n        if (g[i].mark == false) continue;\n        val[++n] = g[i].w;\n        int fu = uFind(g[i].u);\n        int fv = uFind(g[i].v);\n        p[fu] = n;\n        p[fv] = n;\n        add(n, fu);\n        add(n, fv);\n    }\n}\nint main() {\n    while (~scanf(\"%d%d\", &amp;n, &amp;m)) {\n        for (int i = 1; i &lt;= m; i++) {\n            scanf(\"%d%d%d\", &amp;g[i].u, &amp;g[i].v, &amp;g[i].w);\n            g[i].mark = false;\n        }\n        sort(g + 1, g + 1 + m);\n        initUset(n);\n        LL sum = 0;\n        for (int i = 1; i &lt;= m; i++) {\n            int fx = uFind(g[i].u);\n            int fy = uFind(g[i].v);\n            if (fx != fy) {\n                sum += g[i].w;\n                g[i].mark = true;\n                p[fy] = fx;\n            }\n        }\n        for (int i = 1; i &lt;= n; i++)\n            query[i].clear();\n        scanf(\"%d\", &amp;size);\n        int u, v, w;\n        for (int i = 1; i &lt;= size; i++) {\n            scanf(\"%d%d%d\", &amp;u, &amp;v, &amp;w);\n            qw[i] = w;\n            query[u].push_back(MP(v, i));\n            query[v].push_back(MP(u, i));\n        }\n        rebuild();\n        tarjan();\n        for (int i = 1; i &lt;= size; i++) {\n            LL ans = sum - val[lca[i]] + qw[i];\n            printf(LLS\"\\n\", min(ans, sum));\n        }\n    }\n}\n```\n其实，可以直接在dfs的回溯过程中将子节点的max求出来。这样简单多了。感叹一句：并查集真神奇！\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair&lt;int,int&gt;\n#define MP make_pair\n#define SI(x) set&lt;x &gt;::iterator\n#define VI(x) vector&lt;x &gt;::iterator\n#define MI(x,y) map&lt;x,y &gt;::iterator\n#define SRI(x) set&lt;x &gt;::reverse_iterator\n#define VRI(x) vector&lt;x &gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y &gt;::reverse_iterator\n#define F first\n#define S second\n#define clrQ(x) while(!x.empty())x.pop();\n#define clrA(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n#define N 50005\n#define M 100005\nint n, m;\nstruct Graph {\n    int u, v, w;\n    bool operator&lt;(Graph othr) const {\n        return w &lt; othr.w;\n    }\n} g[M];\nstruct Pair {\n    int x, y;\n    Pair(int x, int y) :\n            x(x), y(y) {\n    }\n    ;\n};\n//Edge Graph\nint head[N], pos;\nstruct Edge {\n    int v, w, nxt;\n} e[N &lt;&lt; 1];\nvoid initEdge() {\n    memset(head, -1, sizeof(head));\n    pos = 0;\n}\nvoid add(int u, int v, int w) {\n    e[pos].v = v;\n    e[pos].w = w;\n    e[pos].nxt = head[u];\n    head[u] = pos++;\n}\n//UnionSet\nint p[N];\nint pmax[N];\nvoid initUset() {\n    for (int i = 0; i &lt;= n; i++)\n        p[i] = i;\n}\nint uFind(int x) {\n    if (x != p[x]) {\n        int t = p[x];\n        p[x] = uFind(p[x]);\n        pmax[x] = max(pmax[x], pmax[t]);\n        return p[x];\n    }\n    return x;\n}\nvoid uMerge(int x, int y) { //y合并到x\n    int fx = uFind(x);\n    int fy = uFind(y);\n    if (fx != fy) {\n        p[fy] = fx;\n        pmax[fy] = max(pmax[fy], pmax[fx]);\n    }\n}\nint size;\nvector&lt;Pair&gt; query[N];\nvector&lt;Pair&gt; mark[N];\nint qw[N];\nbool vis[N];\nint lca[N];\nvoid dfs(int u, int fa) {\n    if (size == 0) return;\n    for (int i = head[u]; ~i; i = e[i].nxt) {\n        int v = e[i].v;\n        if (v == fa) continue;\n        dfs(v, u);\n        pmax[v] = max(pmax[v], e[i].w);\n        uMerge(u, v);\n    }\n    vis[u] = 1;\n    for (int i = 0; i &lt; (int) query[u].size(); i++) {\n        int v = query[u][i].x;\n        if (vis[v]) {\n            mark[uFind(v)].push_back(Pair(u, i));\n        }\n    }\n    if (!mark[u].empty()) {\n        for (VI(Pair)it=mark[u].begin();it!=mark[u].end();++it) {\n            int uu = it-&gt;x;\n            int vv = query[it-&gt;x][it-&gt;y].x;\n            int ss = query[it-&gt;x][it-&gt;y].y;\n            uFind(uu);\n            uFind(vv);\n            lca[ss] = max(pmax[uu], pmax[vv]);\n            size--;\n        }\n        mark[u].clear();\n    }\n}\nint findRoot() {\n    for (int i = 1; i &lt;= n; i++) {\n        if (!vis[i]) return i;\n    }\n    return assert(false), -1;\n}\nvoid tarjan() {\n    initUset();\n    clrA(vis, 0);\n    clrA(pmax, 0);\n    size = m;\n    dfs(findRoot(), -1);\n}\nint main() {\n    while (~scanf(\"%d%d\", &amp;n, &amp;m)) {\n        for (int i = 1; i &lt;= m; i++) {\n            scanf(\"%d%d%d\", &amp;g[i].u, &amp;g[i].v, &amp;g[i].w);\n        }\n        sort(g + 1, g + 1 + m);\n        initUset();\n        initEdge();\n        LL sum = 0;\n        for (int i = 1; i &lt;= m; i++) {\n            int fx = uFind(g[i].u);\n            int fy = uFind(g[i].v);\n            if (fx != fy) {\n                sum += g[i].w;\n                add(g[i].u, g[i].v, g[i].w);\n                add(g[i].v, g[i].u, g[i].w);\n                p[fy] = fx;\n            }\n        }\n        for (int i = 1; i &lt;= n; i++) {\n            query[i].clear();\n            mark[i].clear();\n        }\n        scanf(\"%d\", &amp;m);\n        int u, v, w;\n        for (int i = 1; i &lt;= m; i++) {\n            scanf(\"%d%d%d\", &amp;u, &amp;v, &amp;w);\n            qw[i] = w;\n            query[u].push_back(Pair(v, i));\n            query[v].push_back(Pair(u, i));\n        }\n        tarjan();\n        for (int i = 1; i &lt;= m; i++) {\n            LL tmp = sum - lca[i] + qw[i];\n            printf(LLS\"\\n\", min(tmp, sum));\n        }\n    }\n}\n```","source":"_posts/zjnu2073-geasscode.md","raw":"title: 内网2073 城主GeassCode\ntags:\n  - LCA\n  - 图论\n  - tarjan\ncategories:\n  - ACM\ndate: 2014-08-01 20:18:37\n---\n##Description\n\nGeassCode凭借自己在topcoder上的超凡表现，赢得了国王的喜爱，国王赏赐他一座城池。这座城池里有n个 村子，m条路连接这些村子。坐上城主的GeassCode决定要修路，他打算用最少的代价把所以的村子连在一起。据探子回报，有些村子之间虽然原来没有路 径，但是可以强行的去建一条路。GeassCode想知道，如果强行在某两个村子之间建一条路，最后的总花费是多少？\n\n<!--more-->\n\n##Input\n\n输入一行三个整数n，m，表示有n个村子，m条可建路径。\n\n2..m+1行，每行3个整数a,b,c（a≠b），表示可以在a和b村庄建一条花费为c的路径。\n\n第m+2行一个整数q，表示有多少个询问。\n\n接下来q个询问，每行3个整数a,b,c（a≠b），表示如果可以另外在a和b村庄建一条花费为c的路径，最终需要多少花费？\n\n##Output\n\n对于每个询问输出，输出最少的花费。\n\n\n##Sample Input\n4 5 1 2 4 2 3 3 1 4 6 2 4 3 1 3 2 3 3 4 3 1 3 1 1 4 2\n\n##Sample Output\n8 7 7\n\n##Hint\nn的范围[2,50000],m的范围[2,100000],q的范围[1,50000]。\n\n输入的m条边保证可以把所有村庄连在一起。输入的边权范围[1,10<sup>6</sup>]\n\n##Source\n\n张超\n<br/>\n\n- - -\n\n\n解法是如果可以在(u,v)上再加条边，则将最小生成树上的(u,v)节点最短路径中的最大边权与要加上这条边的替换。如果新的花费比旧的花费少，则取新的花费。否则什么也不换，取旧的花费。\n\n如何求树上两点之间的最短路径中的最大边权呢？\n\n可以按照这篇文章所述建一个类似于哈夫曼树，将点作为叶子，边的权值作为祖先构造一个N+N的树：[click here](http://blog.sina.com.cn/s/blog_51cea4040100ss3n.html)\n\n这样写的很容易错，尤其要区分两颗树的规模，我在这上面错了很久。\n\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define MP make_pair\n#define SI(x) set&lt;x&gt;::iterator\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set&lt;x&gt;::reverse_iterator\n#define VRI(x) vector&lt;x&gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define clrQ(x) while(!x.empty)x.pop();\n#define clrA(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n#define N 50005\n#define M 100005\nint n, m ;\nstruct Graph {\n    int u, v, w;\n    bool mark;\n    bool operator&lt;(Graph othr) const {\n        return w &lt; othr.w;\n    }\n} g[M];\n//UnionSet\nint p[N + N];\nvoid initUset(int n) {\n    for (int i = 0; i &lt;= n; i++)\n        p[i] = i;\n}\nint uFind(int x) {\n    return x == p[x] ? p[x] : p[x] = uFind(p[x]);\n}\nvoid uMerge(int x, int y) { //y合并到x\n    int fx = uFind(x);\n    int fy = uFind(y);\n    if (fx != fy) p[fy] = fx;\n}\n//Edge Graph\nint head[N + N], pos;\nstruct Edge {\n    int v, nxt;\n} e[N + N];\nvoid initEdge() {\n    memset(head, -1, sizeof(head));\n    pos = 0;\n}\nvoid add(int u, int v) {\n    e[pos].v = v;\n    e[pos].nxt = head[u];\n    head[u] = pos++;\n}\nint size;\nvector&lt;pr&lt;int, int&gt; &gt; query[N];\nint qw[N];\nbool vis[N];\nint lca[N];\nint val[N + N];\nint dfs(int u) {\n    int solved = 0;\n    for (int i = head[u]; ~i; i = e[i].nxt) {\n        int v = e[i].v;\n        solved += dfs(v);\n        if (size == solved) return solved;\n        uMerge(u, v);\n    }\n    if(~val[u])return solved;\n    vis[u] = 1;\n    for (int i = 0; i &lt; (int) query[u].size(); i++) {\n        int v = query[u][i].F;\n        if (vis[v]) {\n            solved++;\n            lca[query[u][i].S] = uFind(v);\n        }\n    }\n    return solved;\n}\nvoid tarjan() {\n    initUset(n);\n    clrA(vis, 0);\n    dfs(n);\n}\nvoid rebuild() {\n    clrA(val, -1);\n    initUset(n + n);\n    initEdge();\n    for (int i = 1; i &lt;= m; i++) {\n        if (g[i].mark == false) continue;\n        val[++n] = g[i].w;\n        int fu = uFind(g[i].u);\n        int fv = uFind(g[i].v);\n        p[fu] = n;\n        p[fv] = n;\n        add(n, fu);\n        add(n, fv);\n    }\n}\nint main() {\n    while (~scanf(\"%d%d\", &amp;n, &amp;m)) {\n        for (int i = 1; i &lt;= m; i++) {\n            scanf(\"%d%d%d\", &amp;g[i].u, &amp;g[i].v, &amp;g[i].w);\n            g[i].mark = false;\n        }\n        sort(g + 1, g + 1 + m);\n        initUset(n);\n        LL sum = 0;\n        for (int i = 1; i &lt;= m; i++) {\n            int fx = uFind(g[i].u);\n            int fy = uFind(g[i].v);\n            if (fx != fy) {\n                sum += g[i].w;\n                g[i].mark = true;\n                p[fy] = fx;\n            }\n        }\n        for (int i = 1; i &lt;= n; i++)\n            query[i].clear();\n        scanf(\"%d\", &amp;size);\n        int u, v, w;\n        for (int i = 1; i &lt;= size; i++) {\n            scanf(\"%d%d%d\", &amp;u, &amp;v, &amp;w);\n            qw[i] = w;\n            query[u].push_back(MP(v, i));\n            query[v].push_back(MP(u, i));\n        }\n        rebuild();\n        tarjan();\n        for (int i = 1; i &lt;= size; i++) {\n            LL ans = sum - val[lca[i]] + qw[i];\n            printf(LLS\"\\n\", min(ans, sum));\n        }\n    }\n}\n```\n其实，可以直接在dfs的回溯过程中将子节点的max求出来。这样简单多了。感叹一句：并查集真神奇！\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair&lt;int,int&gt;\n#define MP make_pair\n#define SI(x) set&lt;x &gt;::iterator\n#define VI(x) vector&lt;x &gt;::iterator\n#define MI(x,y) map&lt;x,y &gt;::iterator\n#define SRI(x) set&lt;x &gt;::reverse_iterator\n#define VRI(x) vector&lt;x &gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y &gt;::reverse_iterator\n#define F first\n#define S second\n#define clrQ(x) while(!x.empty())x.pop();\n#define clrA(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n#define N 50005\n#define M 100005\nint n, m;\nstruct Graph {\n    int u, v, w;\n    bool operator&lt;(Graph othr) const {\n        return w &lt; othr.w;\n    }\n} g[M];\nstruct Pair {\n    int x, y;\n    Pair(int x, int y) :\n            x(x), y(y) {\n    }\n    ;\n};\n//Edge Graph\nint head[N], pos;\nstruct Edge {\n    int v, w, nxt;\n} e[N &lt;&lt; 1];\nvoid initEdge() {\n    memset(head, -1, sizeof(head));\n    pos = 0;\n}\nvoid add(int u, int v, int w) {\n    e[pos].v = v;\n    e[pos].w = w;\n    e[pos].nxt = head[u];\n    head[u] = pos++;\n}\n//UnionSet\nint p[N];\nint pmax[N];\nvoid initUset() {\n    for (int i = 0; i &lt;= n; i++)\n        p[i] = i;\n}\nint uFind(int x) {\n    if (x != p[x]) {\n        int t = p[x];\n        p[x] = uFind(p[x]);\n        pmax[x] = max(pmax[x], pmax[t]);\n        return p[x];\n    }\n    return x;\n}\nvoid uMerge(int x, int y) { //y合并到x\n    int fx = uFind(x);\n    int fy = uFind(y);\n    if (fx != fy) {\n        p[fy] = fx;\n        pmax[fy] = max(pmax[fy], pmax[fx]);\n    }\n}\nint size;\nvector&lt;Pair&gt; query[N];\nvector&lt;Pair&gt; mark[N];\nint qw[N];\nbool vis[N];\nint lca[N];\nvoid dfs(int u, int fa) {\n    if (size == 0) return;\n    for (int i = head[u]; ~i; i = e[i].nxt) {\n        int v = e[i].v;\n        if (v == fa) continue;\n        dfs(v, u);\n        pmax[v] = max(pmax[v], e[i].w);\n        uMerge(u, v);\n    }\n    vis[u] = 1;\n    for (int i = 0; i &lt; (int) query[u].size(); i++) {\n        int v = query[u][i].x;\n        if (vis[v]) {\n            mark[uFind(v)].push_back(Pair(u, i));\n        }\n    }\n    if (!mark[u].empty()) {\n        for (VI(Pair)it=mark[u].begin();it!=mark[u].end();++it) {\n            int uu = it-&gt;x;\n            int vv = query[it-&gt;x][it-&gt;y].x;\n            int ss = query[it-&gt;x][it-&gt;y].y;\n            uFind(uu);\n            uFind(vv);\n            lca[ss] = max(pmax[uu], pmax[vv]);\n            size--;\n        }\n        mark[u].clear();\n    }\n}\nint findRoot() {\n    for (int i = 1; i &lt;= n; i++) {\n        if (!vis[i]) return i;\n    }\n    return assert(false), -1;\n}\nvoid tarjan() {\n    initUset();\n    clrA(vis, 0);\n    clrA(pmax, 0);\n    size = m;\n    dfs(findRoot(), -1);\n}\nint main() {\n    while (~scanf(\"%d%d\", &amp;n, &amp;m)) {\n        for (int i = 1; i &lt;= m; i++) {\n            scanf(\"%d%d%d\", &amp;g[i].u, &amp;g[i].v, &amp;g[i].w);\n        }\n        sort(g + 1, g + 1 + m);\n        initUset();\n        initEdge();\n        LL sum = 0;\n        for (int i = 1; i &lt;= m; i++) {\n            int fx = uFind(g[i].u);\n            int fy = uFind(g[i].v);\n            if (fx != fy) {\n                sum += g[i].w;\n                add(g[i].u, g[i].v, g[i].w);\n                add(g[i].v, g[i].u, g[i].w);\n                p[fy] = fx;\n            }\n        }\n        for (int i = 1; i &lt;= n; i++) {\n            query[i].clear();\n            mark[i].clear();\n        }\n        scanf(\"%d\", &amp;m);\n        int u, v, w;\n        for (int i = 1; i &lt;= m; i++) {\n            scanf(\"%d%d%d\", &amp;u, &amp;v, &amp;w);\n            qw[i] = w;\n            query[u].push_back(Pair(v, i));\n            query[v].push_back(Pair(u, i));\n        }\n        tarjan();\n        for (int i = 1; i &lt;= m; i++) {\n            LL tmp = sum - lca[i] + qw[i];\n            printf(LLS\"\\n\", min(tmp, sum));\n        }\n    }\n}\n```","slug":"zjnu2073-geasscode","published":1,"updated":"2015-02-26T03:04:41.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8oh002pwppvu6kolb3s","content":"<p>##Description</p>\n<p>GeassCode凭借自己在topcoder上的超凡表现，赢得了国王的喜爱，国王赏赐他一座城池。这座城池里有n个 村子，m条路连接这些村子。坐上城主的GeassCode决定要修路，他打算用最少的代价把所以的村子连在一起。据探子回报，有些村子之间虽然原来没有路 径，但是可以强行的去建一条路。GeassCode想知道，如果强行在某两个村子之间建一条路，最后的总花费是多少？</p>\n<a id=\"more\"></a>\n<p>##Input</p>\n<p>输入一行三个整数n，m，表示有n个村子，m条可建路径。</p>\n<p>2..m+1行，每行3个整数a,b,c（a≠b），表示可以在a和b村庄建一条花费为c的路径。</p>\n<p>第m+2行一个整数q，表示有多少个询问。</p>\n<p>接下来q个询问，每行3个整数a,b,c（a≠b），表示如果可以另外在a和b村庄建一条花费为c的路径，最终需要多少花费？</p>\n<p>##Output</p>\n<p>对于每个询问输出，输出最少的花费。</p>\n<p>##Sample Input<br>4 5 1 2 4 2 3 3 1 4 6 2 4 3 1 3 2 3 3 4 3 1 3 1 1 4 2</p>\n<p>##Sample Output<br>8 7 7</p>\n<p>##Hint<br>n的范围[2,50000],m的范围[2,100000],q的范围[1,50000]。</p>\n<p>输入的m条边保证可以把所有村庄连在一起。输入的边权范围[1,10<sup>6</sup>]</p>\n<p>##Source</p>\n<p>张超<br><br></p>\n<hr>\n<p>解法是如果可以在(u,v)上再加条边，则将最小生成树上的(u,v)节点最短路径中的最大边权与要加上这条边的替换。如果新的花费比旧的花费少，则取新的花费。否则什么也不换，取旧的花费。</p>\n<p>如何求树上两点之间的最短路径中的最大边权呢？</p>\n<p>可以按照这篇文章所述建一个类似于哈夫曼树，将点作为叶子，边的权值作为祖先构造一个N+N的树：<a href=\"http://blog.sina.com.cn/s/blog_51cea4040100ss3n.html\" target=\"_blank\" rel=\"external\">click here</a></p>\n<p>这样写的很容易错，尤其要区分两颗树的规模，我在这上面错了很久。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;map&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;set&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;stack&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;queue&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;string&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstdio&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;vector&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cctype&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cassert&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;utility&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;numeric&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstring&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;iostream&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;algorithm&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pr pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MP make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrQ(x) while(!x.empty)x.pop();</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrA(x,y) memset(x,y,sizeof(x));</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = ~<span class=\"number\">0u</span> &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL lnf = ~<span class=\"number\">0u</span>ll &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 50005</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 100005</span></div><div class=\"line\"><span class=\"keyword\">int</span> n, m ;</div><div class=\"line\"><span class=\"keyword\">struct</span> Graph &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> u, v, w;</div><div class=\"line\">    <span class=\"keyword\">bool</span> mark;</div><div class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&amp;lt;(Graph othr) <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> w &amp;lt; othr.w;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; g[M];</div><div class=\"line\"><span class=\"comment\">//UnionSet</span></div><div class=\"line\"><span class=\"keyword\">int</span> p[N + N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initUset</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt;= n; i++)</div><div class=\"line\">        p[i] = i;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">uFind</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x == p[x] ? p[x] : p[x] = uFind(p[x]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">uMerge</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123; <span class=\"comment\">//y合并到x</span></div><div class=\"line\">    <span class=\"keyword\">int</span> fx = uFind(x);</div><div class=\"line\">    <span class=\"keyword\">int</span> fy = uFind(y);</div><div class=\"line\">    <span class=\"keyword\">if</span> (fx != fy) p[fy] = fx;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Edge Graph</span></div><div class=\"line\"><span class=\"keyword\">int</span> head[N + N], pos;</div><div class=\"line\"><span class=\"keyword\">struct</span> Edge &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> v, nxt;</div><div class=\"line\">&#125; e[N + N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initEdge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</div><div class=\"line\">    pos = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</div><div class=\"line\">    e[pos].v = v;</div><div class=\"line\">    e[pos].nxt = head[u];</div><div class=\"line\">    head[u] = pos++;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> size;</div><div class=\"line\"><span class=\"built_in\">vector</span>&amp;lt;pr&amp;lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&amp;gt; &amp;gt; query[N];</div><div class=\"line\"><span class=\"keyword\">int</span> qw[N];</div><div class=\"line\"><span class=\"keyword\">bool</span> vis[N];</div><div class=\"line\"><span class=\"keyword\">int</span> lca[N];</div><div class=\"line\"><span class=\"keyword\">int</span> val[N + N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> solved = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = e[i].v;</div><div class=\"line\">        solved += dfs(v);</div><div class=\"line\">        <span class=\"keyword\">if</span> (size == solved) <span class=\"keyword\">return</span> solved;</div><div class=\"line\">        uMerge(u, v);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(~val[u])<span class=\"keyword\">return</span> solved;</div><div class=\"line\">    vis[u] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; (<span class=\"keyword\">int</span>) query[u].size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = query[u][i].F;</div><div class=\"line\">        <span class=\"keyword\">if</span> (vis[v]) &#123;</div><div class=\"line\">            solved++;</div><div class=\"line\">            lca[query[u][i].S] = uFind(v);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> solved;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    initUset(n);</div><div class=\"line\">    clrA(vis, <span class=\"number\">0</span>);</div><div class=\"line\">    dfs(n);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rebuild</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    clrA(val, <span class=\"number\">-1</span>);</div><div class=\"line\">    initUset(n + n);</div><div class=\"line\">    initEdge();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (g[i].mark == <span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        val[++n] = g[i].w;</div><div class=\"line\">        <span class=\"keyword\">int</span> fu = uFind(g[i].u);</div><div class=\"line\">        <span class=\"keyword\">int</span> fv = uFind(g[i].v);</div><div class=\"line\">        p[fu] = n;</div><div class=\"line\">        p[fv] = n;</div><div class=\"line\">        add(n, fu);</div><div class=\"line\">        add(n, fv);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;amp;n, &amp;amp;m)) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;amp;g[i].u, &amp;amp;g[i].v, &amp;amp;g[i].w);</div><div class=\"line\">            g[i].mark = <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        sort(g + <span class=\"number\">1</span>, g + <span class=\"number\">1</span> + m);</div><div class=\"line\">        initUset(n);</div><div class=\"line\">        LL sum = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> fx = uFind(g[i].u);</div><div class=\"line\">            <span class=\"keyword\">int</span> fy = uFind(g[i].v);</div><div class=\"line\">            <span class=\"keyword\">if</span> (fx != fy) &#123;</div><div class=\"line\">                sum += g[i].w;</div><div class=\"line\">                g[i].mark = <span class=\"literal\">true</span>;</div><div class=\"line\">                p[fy] = fx;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= n; i++)</div><div class=\"line\">            query[i].clear();</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;amp;size);</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v, w;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= size; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;amp;u, &amp;amp;v, &amp;amp;w);</div><div class=\"line\">            qw[i] = w;</div><div class=\"line\">            query[u].push_back(MP(v, i));</div><div class=\"line\">            query[v].push_back(MP(u, i));</div><div class=\"line\">        &#125;</div><div class=\"line\">        rebuild();</div><div class=\"line\">        tarjan();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= size; i++) &#123;</div><div class=\"line\">            LL ans = sum - val[lca[i]] + qw[i];</div><div class=\"line\">            <span class=\"built_in\">printf</span>(LLS<span class=\"string\">\"\\n\"</span>, min(ans, sum));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其实，可以直接在dfs的回溯过程中将子节点的max求出来。这样简单多了。感叹一句：并查集真神奇！<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;map&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;set&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;stack&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;queue&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;string&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstdio&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;vector&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cctype&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cassert&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;utility&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;numeric&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstring&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;iostream&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;algorithm&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pr pair&amp;lt;int,int&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MP make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SI(x) set&amp;lt;x &amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VI(x) vector&amp;lt;x &amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MI(x,y) map&amp;lt;x,y &amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SRI(x) set&amp;lt;x &amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VRI(x) vector&amp;lt;x &amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MRI(x,y) map&amp;lt;x,y &amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrQ(x) while(!x.empty())x.pop();</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrA(x,y) memset(x,y,sizeof(x));</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = ~<span class=\"number\">0u</span> &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL lnf = ~<span class=\"number\">0u</span>ll &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 50005</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 100005</span></div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"keyword\">struct</span> Graph &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> u, v, w;</div><div class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&amp;lt;(Graph othr) <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> w &amp;lt; othr.w;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; g[M];</div><div class=\"line\"><span class=\"keyword\">struct</span> Pair &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> x, y;</div><div class=\"line\">    Pair(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y) :</div><div class=\"line\">            x(x), y(y) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//Edge Graph</span></div><div class=\"line\"><span class=\"keyword\">int</span> head[N], pos;</div><div class=\"line\"><span class=\"keyword\">struct</span> Edge &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> v, w, nxt;</div><div class=\"line\">&#125; e[N &amp;lt;&amp;lt; <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initEdge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</div><div class=\"line\">    pos = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span> </span>&#123;</div><div class=\"line\">    e[pos].v = v;</div><div class=\"line\">    e[pos].w = w;</div><div class=\"line\">    e[pos].nxt = head[u];</div><div class=\"line\">    head[u] = pos++;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//UnionSet</span></div><div class=\"line\"><span class=\"keyword\">int</span> p[N];</div><div class=\"line\"><span class=\"keyword\">int</span> pmax[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initUset</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt;= n; i++)</div><div class=\"line\">        p[i] = i;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">uFind</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x != p[x]) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> t = p[x];</div><div class=\"line\">        p[x] = uFind(p[x]);</div><div class=\"line\">        pmax[x] = max(pmax[x], pmax[t]);</div><div class=\"line\">        <span class=\"keyword\">return</span> p[x];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">uMerge</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123; <span class=\"comment\">//y合并到x</span></div><div class=\"line\">    <span class=\"keyword\">int</span> fx = uFind(x);</div><div class=\"line\">    <span class=\"keyword\">int</span> fy = uFind(y);</div><div class=\"line\">    <span class=\"keyword\">if</span> (fx != fy) &#123;</div><div class=\"line\">        p[fy] = fx;</div><div class=\"line\">        pmax[fy] = max(pmax[fy], pmax[fx]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> size;</div><div class=\"line\"><span class=\"built_in\">vector</span>&amp;lt;Pair&amp;gt; query[N];</div><div class=\"line\"><span class=\"built_in\">vector</span>&amp;lt;Pair&amp;gt; mark[N];</div><div class=\"line\"><span class=\"keyword\">int</span> qw[N];</div><div class=\"line\"><span class=\"keyword\">bool</span> vis[N];</div><div class=\"line\"><span class=\"keyword\">int</span> lca[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = e[i].v;</div><div class=\"line\">        <span class=\"keyword\">if</span> (v == fa) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        dfs(v, u);</div><div class=\"line\">        pmax[v] = max(pmax[v], e[i].w);</div><div class=\"line\">        uMerge(u, v);</div><div class=\"line\">    &#125;</div><div class=\"line\">    vis[u] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; (<span class=\"keyword\">int</span>) query[u].size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = query[u][i].x;</div><div class=\"line\">        <span class=\"keyword\">if</span> (vis[v]) &#123;</div><div class=\"line\">            mark[uFind(v)].push_back(Pair(u, i));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!mark[u].empty()) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (VI(Pair)it=mark[u].begin();it!=mark[u].end();++it) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> uu = it-&amp;gt;x;</div><div class=\"line\">            <span class=\"keyword\">int</span> vv = query[it-&amp;gt;x][it-&amp;gt;y].x;</div><div class=\"line\">            <span class=\"keyword\">int</span> ss = query[it-&amp;gt;x][it-&amp;gt;y].y;</div><div class=\"line\">            uFind(uu);</div><div class=\"line\">            uFind(vv);</div><div class=\"line\">            lca[ss] = max(pmax[uu], pmax[vv]);</div><div class=\"line\">            size--;</div><div class=\"line\">        &#125;</div><div class=\"line\">        mark[u].clear();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findRoot</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!vis[i]) <span class=\"keyword\">return</span> i;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> assert(<span class=\"literal\">false</span>), <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    initUset();</div><div class=\"line\">    clrA(vis, <span class=\"number\">0</span>);</div><div class=\"line\">    clrA(pmax, <span class=\"number\">0</span>);</div><div class=\"line\">    size = m;</div><div class=\"line\">    dfs(findRoot(), <span class=\"number\">-1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;amp;n, &amp;amp;m)) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;amp;g[i].u, &amp;amp;g[i].v, &amp;amp;g[i].w);</div><div class=\"line\">        &#125;</div><div class=\"line\">        sort(g + <span class=\"number\">1</span>, g + <span class=\"number\">1</span> + m);</div><div class=\"line\">        initUset();</div><div class=\"line\">        initEdge();</div><div class=\"line\">        LL sum = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> fx = uFind(g[i].u);</div><div class=\"line\">            <span class=\"keyword\">int</span> fy = uFind(g[i].v);</div><div class=\"line\">            <span class=\"keyword\">if</span> (fx != fy) &#123;</div><div class=\"line\">                sum += g[i].w;</div><div class=\"line\">                add(g[i].u, g[i].v, g[i].w);</div><div class=\"line\">                add(g[i].v, g[i].u, g[i].w);</div><div class=\"line\">                p[fy] = fx;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= n; i++) &#123;</div><div class=\"line\">            query[i].clear();</div><div class=\"line\">            mark[i].clear();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;amp;m);</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v, w;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;amp;u, &amp;amp;v, &amp;amp;w);</div><div class=\"line\">            qw[i] = w;</div><div class=\"line\">            query[u].push_back(Pair(v, i));</div><div class=\"line\">            query[v].push_back(Pair(u, i));</div><div class=\"line\">        &#125;</div><div class=\"line\">        tarjan();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">            LL tmp = sum - lca[i] + qw[i];</div><div class=\"line\">            <span class=\"built_in\">printf</span>(LLS<span class=\"string\">\"\\n\"</span>, min(tmp, sum));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>##Description</p>\n<p>GeassCode凭借自己在topcoder上的超凡表现，赢得了国王的喜爱，国王赏赐他一座城池。这座城池里有n个 村子，m条路连接这些村子。坐上城主的GeassCode决定要修路，他打算用最少的代价把所以的村子连在一起。据探子回报，有些村子之间虽然原来没有路 径，但是可以强行的去建一条路。GeassCode想知道，如果强行在某两个村子之间建一条路，最后的总花费是多少？</p>","more":"<p>##Input</p>\n<p>输入一行三个整数n，m，表示有n个村子，m条可建路径。</p>\n<p>2..m+1行，每行3个整数a,b,c（a≠b），表示可以在a和b村庄建一条花费为c的路径。</p>\n<p>第m+2行一个整数q，表示有多少个询问。</p>\n<p>接下来q个询问，每行3个整数a,b,c（a≠b），表示如果可以另外在a和b村庄建一条花费为c的路径，最终需要多少花费？</p>\n<p>##Output</p>\n<p>对于每个询问输出，输出最少的花费。</p>\n<p>##Sample Input<br>4 5 1 2 4 2 3 3 1 4 6 2 4 3 1 3 2 3 3 4 3 1 3 1 1 4 2</p>\n<p>##Sample Output<br>8 7 7</p>\n<p>##Hint<br>n的范围[2,50000],m的范围[2,100000],q的范围[1,50000]。</p>\n<p>输入的m条边保证可以把所有村庄连在一起。输入的边权范围[1,10<sup>6</sup>]</p>\n<p>##Source</p>\n<p>张超<br><br/></p>\n<hr>\n<p>解法是如果可以在(u,v)上再加条边，则将最小生成树上的(u,v)节点最短路径中的最大边权与要加上这条边的替换。如果新的花费比旧的花费少，则取新的花费。否则什么也不换，取旧的花费。</p>\n<p>如何求树上两点之间的最短路径中的最大边权呢？</p>\n<p>可以按照这篇文章所述建一个类似于哈夫曼树，将点作为叶子，边的权值作为祖先构造一个N+N的树：<a href=\"http://blog.sina.com.cn/s/blog_51cea4040100ss3n.html\">click here</a></p>\n<p>这样写的很容易错，尤其要区分两颗树的规模，我在这上面错了很久。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;map&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;set&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;stack&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;queue&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;string&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstdio&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;vector&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cctype&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cassert&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;utility&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;numeric&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstring&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;iostream&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;algorithm&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pr pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MP make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrQ(x) while(!x.empty)x.pop();</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrA(x,y) memset(x,y,sizeof(x));</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = ~<span class=\"number\">0u</span> &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL lnf = ~<span class=\"number\">0u</span>ll &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 50005</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 100005</span></div><div class=\"line\"><span class=\"keyword\">int</span> n, m ;</div><div class=\"line\"><span class=\"keyword\">struct</span> Graph &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> u, v, w;</div><div class=\"line\">    <span class=\"keyword\">bool</span> mark;</div><div class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&amp;lt;(Graph othr) <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> w &amp;lt; othr.w;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; g[M];</div><div class=\"line\"><span class=\"comment\">//UnionSet</span></div><div class=\"line\"><span class=\"keyword\">int</span> p[N + N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initUset</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt;= n; i++)</div><div class=\"line\">        p[i] = i;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">uFind</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x == p[x] ? p[x] : p[x] = uFind(p[x]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">uMerge</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123; <span class=\"comment\">//y合并到x</span></div><div class=\"line\">    <span class=\"keyword\">int</span> fx = uFind(x);</div><div class=\"line\">    <span class=\"keyword\">int</span> fy = uFind(y);</div><div class=\"line\">    <span class=\"keyword\">if</span> (fx != fy) p[fy] = fx;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Edge Graph</span></div><div class=\"line\"><span class=\"keyword\">int</span> head[N + N], pos;</div><div class=\"line\"><span class=\"keyword\">struct</span> Edge &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> v, nxt;</div><div class=\"line\">&#125; e[N + N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initEdge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</div><div class=\"line\">    pos = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</div><div class=\"line\">    e[pos].v = v;</div><div class=\"line\">    e[pos].nxt = head[u];</div><div class=\"line\">    head[u] = pos++;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> size;</div><div class=\"line\"><span class=\"built_in\">vector</span>&amp;lt;pr&amp;lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&amp;gt; &amp;gt; query[N];</div><div class=\"line\"><span class=\"keyword\">int</span> qw[N];</div><div class=\"line\"><span class=\"keyword\">bool</span> vis[N];</div><div class=\"line\"><span class=\"keyword\">int</span> lca[N];</div><div class=\"line\"><span class=\"keyword\">int</span> val[N + N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> solved = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = e[i].v;</div><div class=\"line\">        solved += dfs(v);</div><div class=\"line\">        <span class=\"keyword\">if</span> (size == solved) <span class=\"keyword\">return</span> solved;</div><div class=\"line\">        uMerge(u, v);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(~val[u])<span class=\"keyword\">return</span> solved;</div><div class=\"line\">    vis[u] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; (<span class=\"keyword\">int</span>) query[u].size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = query[u][i].F;</div><div class=\"line\">        <span class=\"keyword\">if</span> (vis[v]) &#123;</div><div class=\"line\">            solved++;</div><div class=\"line\">            lca[query[u][i].S] = uFind(v);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> solved;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    initUset(n);</div><div class=\"line\">    clrA(vis, <span class=\"number\">0</span>);</div><div class=\"line\">    dfs(n);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rebuild</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    clrA(val, <span class=\"number\">-1</span>);</div><div class=\"line\">    initUset(n + n);</div><div class=\"line\">    initEdge();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (g[i].mark == <span class=\"literal\">false</span>) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        val[++n] = g[i].w;</div><div class=\"line\">        <span class=\"keyword\">int</span> fu = uFind(g[i].u);</div><div class=\"line\">        <span class=\"keyword\">int</span> fv = uFind(g[i].v);</div><div class=\"line\">        p[fu] = n;</div><div class=\"line\">        p[fv] = n;</div><div class=\"line\">        add(n, fu);</div><div class=\"line\">        add(n, fv);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;amp;n, &amp;amp;m)) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;amp;g[i].u, &amp;amp;g[i].v, &amp;amp;g[i].w);</div><div class=\"line\">            g[i].mark = <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        sort(g + <span class=\"number\">1</span>, g + <span class=\"number\">1</span> + m);</div><div class=\"line\">        initUset(n);</div><div class=\"line\">        LL sum = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> fx = uFind(g[i].u);</div><div class=\"line\">            <span class=\"keyword\">int</span> fy = uFind(g[i].v);</div><div class=\"line\">            <span class=\"keyword\">if</span> (fx != fy) &#123;</div><div class=\"line\">                sum += g[i].w;</div><div class=\"line\">                g[i].mark = <span class=\"literal\">true</span>;</div><div class=\"line\">                p[fy] = fx;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= n; i++)</div><div class=\"line\">            query[i].clear();</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;amp;size);</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v, w;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= size; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;amp;u, &amp;amp;v, &amp;amp;w);</div><div class=\"line\">            qw[i] = w;</div><div class=\"line\">            query[u].push_back(MP(v, i));</div><div class=\"line\">            query[v].push_back(MP(u, i));</div><div class=\"line\">        &#125;</div><div class=\"line\">        rebuild();</div><div class=\"line\">        tarjan();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= size; i++) &#123;</div><div class=\"line\">            LL ans = sum - val[lca[i]] + qw[i];</div><div class=\"line\">            <span class=\"built_in\">printf</span>(LLS<span class=\"string\">\"\\n\"</span>, min(ans, sum));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其实，可以直接在dfs的回溯过程中将子节点的max求出来。这样简单多了。感叹一句：并查集真神奇！<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;map&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;set&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;stack&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;queue&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;string&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstdio&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;vector&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cctype&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cassert&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;utility&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;numeric&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstring&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;iostream&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;algorithm&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pr pair&amp;lt;int,int&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MP make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SI(x) set&amp;lt;x &amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VI(x) vector&amp;lt;x &amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MI(x,y) map&amp;lt;x,y &amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SRI(x) set&amp;lt;x &amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VRI(x) vector&amp;lt;x &amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MRI(x,y) map&amp;lt;x,y &amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrQ(x) while(!x.empty())x.pop();</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrA(x,y) memset(x,y,sizeof(x));</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = ~<span class=\"number\">0u</span> &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL lnf = ~<span class=\"number\">0u</span>ll &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 50005</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 100005</span></div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"keyword\">struct</span> Graph &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> u, v, w;</div><div class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&amp;lt;(Graph othr) <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> w &amp;lt; othr.w;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; g[M];</div><div class=\"line\"><span class=\"keyword\">struct</span> Pair &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> x, y;</div><div class=\"line\">    Pair(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y) :</div><div class=\"line\">            x(x), y(y) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//Edge Graph</span></div><div class=\"line\"><span class=\"keyword\">int</span> head[N], pos;</div><div class=\"line\"><span class=\"keyword\">struct</span> Edge &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> v, w, nxt;</div><div class=\"line\">&#125; e[N &amp;lt;&amp;lt; <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initEdge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(head));</div><div class=\"line\">    pos = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span> </span>&#123;</div><div class=\"line\">    e[pos].v = v;</div><div class=\"line\">    e[pos].w = w;</div><div class=\"line\">    e[pos].nxt = head[u];</div><div class=\"line\">    head[u] = pos++;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//UnionSet</span></div><div class=\"line\"><span class=\"keyword\">int</span> p[N];</div><div class=\"line\"><span class=\"keyword\">int</span> pmax[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initUset</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt;= n; i++)</div><div class=\"line\">        p[i] = i;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">uFind</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x != p[x]) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> t = p[x];</div><div class=\"line\">        p[x] = uFind(p[x]);</div><div class=\"line\">        pmax[x] = max(pmax[x], pmax[t]);</div><div class=\"line\">        <span class=\"keyword\">return</span> p[x];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">uMerge</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123; <span class=\"comment\">//y合并到x</span></div><div class=\"line\">    <span class=\"keyword\">int</span> fx = uFind(x);</div><div class=\"line\">    <span class=\"keyword\">int</span> fy = uFind(y);</div><div class=\"line\">    <span class=\"keyword\">if</span> (fx != fy) &#123;</div><div class=\"line\">        p[fy] = fx;</div><div class=\"line\">        pmax[fy] = max(pmax[fy], pmax[fx]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> size;</div><div class=\"line\"><span class=\"built_in\">vector</span>&amp;lt;Pair&amp;gt; query[N];</div><div class=\"line\"><span class=\"built_in\">vector</span>&amp;lt;Pair&amp;gt; mark[N];</div><div class=\"line\"><span class=\"keyword\">int</span> qw[N];</div><div class=\"line\"><span class=\"keyword\">bool</span> vis[N];</div><div class=\"line\"><span class=\"keyword\">int</span> lca[N];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = e[i].v;</div><div class=\"line\">        <span class=\"keyword\">if</span> (v == fa) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        dfs(v, u);</div><div class=\"line\">        pmax[v] = max(pmax[v], e[i].w);</div><div class=\"line\">        uMerge(u, v);</div><div class=\"line\">    &#125;</div><div class=\"line\">    vis[u] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; (<span class=\"keyword\">int</span>) query[u].size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = query[u][i].x;</div><div class=\"line\">        <span class=\"keyword\">if</span> (vis[v]) &#123;</div><div class=\"line\">            mark[uFind(v)].push_back(Pair(u, i));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!mark[u].empty()) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (VI(Pair)it=mark[u].begin();it!=mark[u].end();++it) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> uu = it-&amp;gt;x;</div><div class=\"line\">            <span class=\"keyword\">int</span> vv = query[it-&amp;gt;x][it-&amp;gt;y].x;</div><div class=\"line\">            <span class=\"keyword\">int</span> ss = query[it-&amp;gt;x][it-&amp;gt;y].y;</div><div class=\"line\">            uFind(uu);</div><div class=\"line\">            uFind(vv);</div><div class=\"line\">            lca[ss] = max(pmax[uu], pmax[vv]);</div><div class=\"line\">            size--;</div><div class=\"line\">        &#125;</div><div class=\"line\">        mark[u].clear();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findRoot</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!vis[i]) <span class=\"keyword\">return</span> i;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> assert(<span class=\"literal\">false</span>), <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    initUset();</div><div class=\"line\">    clrA(vis, <span class=\"number\">0</span>);</div><div class=\"line\">    clrA(pmax, <span class=\"number\">0</span>);</div><div class=\"line\">    size = m;</div><div class=\"line\">    dfs(findRoot(), <span class=\"number\">-1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;amp;n, &amp;amp;m)) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;amp;g[i].u, &amp;amp;g[i].v, &amp;amp;g[i].w);</div><div class=\"line\">        &#125;</div><div class=\"line\">        sort(g + <span class=\"number\">1</span>, g + <span class=\"number\">1</span> + m);</div><div class=\"line\">        initUset();</div><div class=\"line\">        initEdge();</div><div class=\"line\">        LL sum = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> fx = uFind(g[i].u);</div><div class=\"line\">            <span class=\"keyword\">int</span> fy = uFind(g[i].v);</div><div class=\"line\">            <span class=\"keyword\">if</span> (fx != fy) &#123;</div><div class=\"line\">                sum += g[i].w;</div><div class=\"line\">                add(g[i].u, g[i].v, g[i].w);</div><div class=\"line\">                add(g[i].v, g[i].u, g[i].w);</div><div class=\"line\">                p[fy] = fx;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= n; i++) &#123;</div><div class=\"line\">            query[i].clear();</div><div class=\"line\">            mark[i].clear();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;amp;m);</div><div class=\"line\">        <span class=\"keyword\">int</span> u, v, w;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;amp;u, &amp;amp;v, &amp;amp;w);</div><div class=\"line\">            qw[i] = w;</div><div class=\"line\">            query[u].push_back(Pair(v, i));</div><div class=\"line\">            query[v].push_back(Pair(u, i));</div><div class=\"line\">        &#125;</div><div class=\"line\">        tarjan();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= m; i++) &#123;</div><div class=\"line\">            LL tmp = sum - lca[i] + qw[i];</div><div class=\"line\">            <span class=\"built_in\">printf</span>(LLS<span class=\"string\">\"\\n\"</span>, min(tmp, sum));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"内网2082 字母","id":"69","date":"2014-08-12T14:10:46.000Z","_content":"##Description\n\n乐乐开始学习英文字母了，小C为他准备了很多字母牌，每张牌有一个英文字母。有天乐乐把所有的牌排成一行，这些字母竟然形成了一个回文串。小C想知道，乐乐在排字母的时候，有多少种情况，最后的字母形成回文串。\n\n##Input\n\n输入一行，表示乐乐有哪些字母，均大写。\n\n##Output\n\n输出有多少种情况，排列的字母是一个回文串。\n<!--more-->\n##Sample Input\nAAAAB AABB CD\n\n##Sample Output\n\n1 2 0\n\n##Hint\n100%的数据，字母的个数不超过1000。\n<br/>\n---\n\nA(m,m)/(A(cnt1,cnt1)*A(cnt2,cnt2).......)\n\n主要是排列组合数的计算技巧。将n!分解质因数，然后上面的因子减去下面相同的因子，这样就不会因为计算阶乘而爆数组了。n!中质因数m的个数：n/m+n/m^2+n/m^3+n/m^4.........\n```C++\n#include \"iostream\"\n#include \"cstdio\"\n#include \"cstring\"\n#include \"string\"\n#include \"vector\"\nusing namespace std;\n#define sz(x) (int)x.size()\n#define DSIZE 10000\n#define clr(x,y) memset(x,y,sizeof(x));\nclass BigInteger {\nprivate:\n    int a[1001];\n    bool sign; //true-p , false-n\n    int len;\n\npublic:\n    BigInteger() {\n        len = 1;\n        sign = true;\n        clr(a, 0);\n        a[0] = 1;\n    }\n    void operator *=(int);\n    friend ostream &amp;operator&lt;&lt;(ostream &amp;, const BigInteger &amp;);\n};\n\nvoid BigInteger::operator*=(int x) {\n    if (x &lt; 0) x = -x, sign ^= 1;\n    for (int i = 0; i &lt; len; i++) {\n        a[i] *= x;\n    }\n    for (int i = 0; i &lt; len; i++) {\n        if (a[i] &gt;= DSIZE) {\n            a[i + 1] += a[i] / DSIZE;\n            a[i] %= DSIZE;\n        }\n    }\n    if (a[len]) len++;\n}\n\nostream &amp;operator&lt;&lt;(ostream &amp;out, const BigInteger &amp;x) {\n    if (!x.sign &amp;&amp; x.len) putchar('-');\n    printf(\"%d\", x.a[x.len - 1]);\n    for (int i = x.len - 2; i &gt;= 0; i--) {\n        printf(\"%04d\", x.a[i]);\n    }\n    return out;\n}\n\nint n, m;\nint cnt[30];\nint prime[1001], tot;\nbool ok[1001];\nint faclist[1001];\nvoid getprime(int n) {\n    clr(ok, 0);\n    tot = 0;\n    for (int i = 2; i &lt;= n; i++) {\n        if (!ok[i]) prime[tot++] = i;\n        for (int j = 0; j &lt; tot; j++) {\n            int now = i * prime[j];\n            if (now &gt; n) break;\n            ok[now] = 1;\n            if (i % prime[j] == 0) break;\n        }\n    }\n}\nvoid getfact(int x) {\n    int s = x &lt; 0 ? -x : x;\n    for (int i = 0; prime[i] &lt;= s; i++) {\n        for (int j = prime[i]; j &lt;= s; j *= prime[i]) {\n            faclist[i] += x / j;\n        }\n    }\n}\nchar str[1001];\nint main() {\n    getprime(1000);\n    while (~scanf(\"%s\",str)) {\n        n = strlen(str);\n        clr(cnt, 0);\n        for (int i = 0; i &lt; n; i++) {\n            cnt[str[i] - 'A']++;\n        }\n        int f = 0;\n        m = 0;\n        for (int i = 0; i &lt; 26 &amp;&amp; f &lt; 2; i++) {\n            if (cnt[i] &amp; 1) f++;\n            m += cnt[i] &gt;&gt;= 1;\n        }\n        if (f &gt; 1) {\n            printf(\"0\\n\");\n            continue;\n        }\n        clr(faclist, 0);\n        getfact(m);\n        for (int i = 0; i &lt; 26; i++)\n            getfact(-cnt[i]);\n        BigInteger res;\n        for (int i = 0; prime[i] &lt;= m; i++) {\n            for (int j = 0; j &lt; faclist[i]; j++) {\n                res *= prime[i];\n            }\n        }\n        cout &lt;&lt; res &lt;&lt; endl;\n    }\n}\n```language\n```\n\n</pre>","source":"_posts/zjnu2082.md","raw":"title: 内网2082 字母\ncategories:\n  - ACM\nid: 69\ndate: 2014-08-12 22:10:46\ntags: 组合\n---\n##Description\n\n乐乐开始学习英文字母了，小C为他准备了很多字母牌，每张牌有一个英文字母。有天乐乐把所有的牌排成一行，这些字母竟然形成了一个回文串。小C想知道，乐乐在排字母的时候，有多少种情况，最后的字母形成回文串。\n\n##Input\n\n输入一行，表示乐乐有哪些字母，均大写。\n\n##Output\n\n输出有多少种情况，排列的字母是一个回文串。\n<!--more-->\n##Sample Input\nAAAAB AABB CD\n\n##Sample Output\n\n1 2 0\n\n##Hint\n100%的数据，字母的个数不超过1000。\n<br/>\n---\n\nA(m,m)/(A(cnt1,cnt1)*A(cnt2,cnt2).......)\n\n主要是排列组合数的计算技巧。将n!分解质因数，然后上面的因子减去下面相同的因子，这样就不会因为计算阶乘而爆数组了。n!中质因数m的个数：n/m+n/m^2+n/m^3+n/m^4.........\n```C++\n#include \"iostream\"\n#include \"cstdio\"\n#include \"cstring\"\n#include \"string\"\n#include \"vector\"\nusing namespace std;\n#define sz(x) (int)x.size()\n#define DSIZE 10000\n#define clr(x,y) memset(x,y,sizeof(x));\nclass BigInteger {\nprivate:\n    int a[1001];\n    bool sign; //true-p , false-n\n    int len;\n\npublic:\n    BigInteger() {\n        len = 1;\n        sign = true;\n        clr(a, 0);\n        a[0] = 1;\n    }\n    void operator *=(int);\n    friend ostream &amp;operator&lt;&lt;(ostream &amp;, const BigInteger &amp;);\n};\n\nvoid BigInteger::operator*=(int x) {\n    if (x &lt; 0) x = -x, sign ^= 1;\n    for (int i = 0; i &lt; len; i++) {\n        a[i] *= x;\n    }\n    for (int i = 0; i &lt; len; i++) {\n        if (a[i] &gt;= DSIZE) {\n            a[i + 1] += a[i] / DSIZE;\n            a[i] %= DSIZE;\n        }\n    }\n    if (a[len]) len++;\n}\n\nostream &amp;operator&lt;&lt;(ostream &amp;out, const BigInteger &amp;x) {\n    if (!x.sign &amp;&amp; x.len) putchar('-');\n    printf(\"%d\", x.a[x.len - 1]);\n    for (int i = x.len - 2; i &gt;= 0; i--) {\n        printf(\"%04d\", x.a[i]);\n    }\n    return out;\n}\n\nint n, m;\nint cnt[30];\nint prime[1001], tot;\nbool ok[1001];\nint faclist[1001];\nvoid getprime(int n) {\n    clr(ok, 0);\n    tot = 0;\n    for (int i = 2; i &lt;= n; i++) {\n        if (!ok[i]) prime[tot++] = i;\n        for (int j = 0; j &lt; tot; j++) {\n            int now = i * prime[j];\n            if (now &gt; n) break;\n            ok[now] = 1;\n            if (i % prime[j] == 0) break;\n        }\n    }\n}\nvoid getfact(int x) {\n    int s = x &lt; 0 ? -x : x;\n    for (int i = 0; prime[i] &lt;= s; i++) {\n        for (int j = prime[i]; j &lt;= s; j *= prime[i]) {\n            faclist[i] += x / j;\n        }\n    }\n}\nchar str[1001];\nint main() {\n    getprime(1000);\n    while (~scanf(\"%s\",str)) {\n        n = strlen(str);\n        clr(cnt, 0);\n        for (int i = 0; i &lt; n; i++) {\n            cnt[str[i] - 'A']++;\n        }\n        int f = 0;\n        m = 0;\n        for (int i = 0; i &lt; 26 &amp;&amp; f &lt; 2; i++) {\n            if (cnt[i] &amp; 1) f++;\n            m += cnt[i] &gt;&gt;= 1;\n        }\n        if (f &gt; 1) {\n            printf(\"0\\n\");\n            continue;\n        }\n        clr(faclist, 0);\n        getfact(m);\n        for (int i = 0; i &lt; 26; i++)\n            getfact(-cnt[i]);\n        BigInteger res;\n        for (int i = 0; prime[i] &lt;= m; i++) {\n            for (int j = 0; j &lt; faclist[i]; j++) {\n                res *= prime[i];\n            }\n        }\n        cout &lt;&lt; res &lt;&lt; endl;\n    }\n}\n```language\n```\n\n</pre>","slug":"zjnu2082","published":1,"updated":"2015-02-26T03:05:06.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8oi002twppv9f7ffnl8","content":"<p>##Description</p>\n<p>乐乐开始学习英文字母了，小C为他准备了很多字母牌，每张牌有一个英文字母。有天乐乐把所有的牌排成一行，这些字母竟然形成了一个回文串。小C想知道，乐乐在排字母的时候，有多少种情况，最后的字母形成回文串。</p>\n<p>##Input</p>\n<p>输入一行，表示乐乐有哪些字母，均大写。</p>\n<p>##Output</p>\n<p>输出有多少种情况，排列的字母是一个回文串。<br><a id=\"more\"></a></p>\n<p>##Sample Input<br>AAAAB AABB CD</p>\n<p>##Sample Output</p>\n<p>1 2 0</p>\n<p>##Hint<br>100%的数据，字母的个数不超过1000。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><br></h2><p>A(m,m)/(A(cnt1,cnt1)*A(cnt2,cnt2)…….)</p>\n<p>主要是排列组合数的计算技巧。将n!分解质因数，然后上面的因子减去下面相同的因子，这样就不会因为计算阶乘而爆数组了。n!中质因数m的个数：n/m+n/m^2+n/m^3+n/m^4………<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"cstdio\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"cstring\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"string\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"vector\"</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sz(x) (int)x.size()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DSIZE 10000</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clr(x,y) memset(x,y,sizeof(x));</span></div><div class=\"line\"><span class=\"keyword\">class</span> BigInteger &#123;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">1001</span>];</div><div class=\"line\">    <span class=\"keyword\">bool</span> sign; <span class=\"comment\">//true-p , false-n</span></div><div class=\"line\">    <span class=\"keyword\">int</span> len;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    BigInteger() &#123;</div><div class=\"line\">        len = <span class=\"number\">1</span>;</div><div class=\"line\">        sign = <span class=\"literal\">true</span>;</div><div class=\"line\">        clr(a, <span class=\"number\">0</span>);</div><div class=\"line\">        a[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">void</span> <span class=\"keyword\">operator</span> *=(<span class=\"keyword\">int</span>);</div><div class=\"line\">    <span class=\"keyword\">friend</span> ostream &amp;amp;<span class=\"keyword\">operator</span>&amp;lt;&amp;lt;(ostream &amp;amp;, <span class=\"keyword\">const</span> BigInteger &amp;amp;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> BigInteger::<span class=\"keyword\">operator</span>*=(<span class=\"keyword\">int</span> x) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &amp;lt; <span class=\"number\">0</span>) x = -x, sign ^= <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; len; i++) &#123;</div><div class=\"line\">        a[i] *= x;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; len; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a[i] &amp;gt;= DSIZE) &#123;</div><div class=\"line\">            a[i + <span class=\"number\">1</span>] += a[i] / DSIZE;</div><div class=\"line\">            a[i] %= DSIZE;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (a[len]) len++;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ostream &amp;amp;<span class=\"keyword\">operator</span>&amp;lt;&amp;lt;(ostream &amp;amp;out, <span class=\"keyword\">const</span> BigInteger &amp;amp;x) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!x.sign &amp;amp;&amp;amp; x.len) <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, x.a[x.len - <span class=\"number\">1</span>]);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x.len - <span class=\"number\">2</span>; i &amp;gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%04d\"</span>, x.a[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> out;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"keyword\">int</span> cnt[<span class=\"number\">30</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> prime[<span class=\"number\">1001</span>], tot;</div><div class=\"line\"><span class=\"keyword\">bool</span> ok[<span class=\"number\">1001</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> faclist[<span class=\"number\">1001</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getprime</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    clr(ok, <span class=\"number\">0</span>);</div><div class=\"line\">    tot = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &amp;lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!ok[i]) prime[tot++] = i;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &amp;lt; tot; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> now = i * prime[j];</div><div class=\"line\">            <span class=\"keyword\">if</span> (now &amp;gt; n) <span class=\"keyword\">break</span>;</div><div class=\"line\">            ok[now] = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i % prime[j] == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getfact</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> s = x &amp;lt; <span class=\"number\">0</span> ? -x : x;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; prime[i] &amp;lt;= s; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = prime[i]; j &amp;lt;= s; j *= prime[i]) &#123;</div><div class=\"line\">            faclist[i] += x / j;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">1001</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    getprime(<span class=\"number\">1000</span>);</div><div class=\"line\">    <span class=\"keyword\">while</span> (~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,str)) &#123;</div><div class=\"line\">        n = <span class=\"built_in\">strlen</span>(str);</div><div class=\"line\">        clr(cnt, <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            cnt[str[i] - <span class=\"string\">'A'</span>]++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> f = <span class=\"number\">0</span>;</div><div class=\"line\">        m = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; <span class=\"number\">26</span> &amp;amp;&amp;amp; f &amp;lt; <span class=\"number\">2</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (cnt[i] &amp;amp; <span class=\"number\">1</span>) f++;</div><div class=\"line\">            m += cnt[i] &amp;gt;&amp;gt;= <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (f &amp;gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"0\\n\"</span>);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        clr(faclist, <span class=\"number\">0</span>);</div><div class=\"line\">        getfact(m);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; <span class=\"number\">26</span>; i++)</div><div class=\"line\">            getfact(-cnt[i]);</div><div class=\"line\">        BigInteger res;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; prime[i] &amp;lt;= m; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &amp;lt; faclist[i]; j++) &#123;</div><div class=\"line\">                res *= prime[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &amp;lt;&amp;lt; res &amp;lt;&amp;lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">```language</div></pre></td></tr></table></figure></p>\n<p></p>\n","excerpt":"<p>##Description</p>\n<p>乐乐开始学习英文字母了，小C为他准备了很多字母牌，每张牌有一个英文字母。有天乐乐把所有的牌排成一行，这些字母竟然形成了一个回文串。小C想知道，乐乐在排字母的时候，有多少种情况，最后的字母形成回文串。</p>\n<p>##Input</p>\n<p>输入一行，表示乐乐有哪些字母，均大写。</p>\n<p>##Output</p>\n<p>输出有多少种情况，排列的字母是一个回文串。<br>","more":"</p>\n<p>##Sample Input<br>AAAAB AABB CD</p>\n<p>##Sample Output</p>\n<p>1 2 0</p>\n<p>##Hint<br>100%的数据，字母的个数不超过1000。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><br/></h2><p>A(m,m)/(A(cnt1,cnt1)*A(cnt2,cnt2)…….)</p>\n<p>主要是排列组合数的计算技巧。将n!分解质因数，然后上面的因子减去下面相同的因子，这样就不会因为计算阶乘而爆数组了。n!中质因数m的个数：n/m+n/m^2+n/m^3+n/m^4………<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"cstdio\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"cstring\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"string\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"vector\"</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sz(x) (int)x.size()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DSIZE 10000</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clr(x,y) memset(x,y,sizeof(x));</span></div><div class=\"line\"><span class=\"keyword\">class</span> BigInteger &#123;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">1001</span>];</div><div class=\"line\">    <span class=\"keyword\">bool</span> sign; <span class=\"comment\">//true-p , false-n</span></div><div class=\"line\">    <span class=\"keyword\">int</span> len;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    BigInteger() &#123;</div><div class=\"line\">        len = <span class=\"number\">1</span>;</div><div class=\"line\">        sign = <span class=\"literal\">true</span>;</div><div class=\"line\">        clr(a, <span class=\"number\">0</span>);</div><div class=\"line\">        a[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">void</span> <span class=\"keyword\">operator</span> *=(<span class=\"keyword\">int</span>);</div><div class=\"line\">    <span class=\"keyword\">friend</span> ostream &amp;amp;<span class=\"keyword\">operator</span>&amp;lt;&amp;lt;(ostream &amp;amp;, <span class=\"keyword\">const</span> BigInteger &amp;amp;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> BigInteger::<span class=\"keyword\">operator</span>*=(<span class=\"keyword\">int</span> x) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &amp;lt; <span class=\"number\">0</span>) x = -x, sign ^= <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; len; i++) &#123;</div><div class=\"line\">        a[i] *= x;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; len; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a[i] &amp;gt;= DSIZE) &#123;</div><div class=\"line\">            a[i + <span class=\"number\">1</span>] += a[i] / DSIZE;</div><div class=\"line\">            a[i] %= DSIZE;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (a[len]) len++;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ostream &amp;amp;<span class=\"keyword\">operator</span>&amp;lt;&amp;lt;(ostream &amp;amp;out, <span class=\"keyword\">const</span> BigInteger &amp;amp;x) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!x.sign &amp;amp;&amp;amp; x.len) <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, x.a[x.len - <span class=\"number\">1</span>]);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x.len - <span class=\"number\">2</span>; i &amp;gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%04d\"</span>, x.a[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> out;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, m;</div><div class=\"line\"><span class=\"keyword\">int</span> cnt[<span class=\"number\">30</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> prime[<span class=\"number\">1001</span>], tot;</div><div class=\"line\"><span class=\"keyword\">bool</span> ok[<span class=\"number\">1001</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> faclist[<span class=\"number\">1001</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getprime</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    clr(ok, <span class=\"number\">0</span>);</div><div class=\"line\">    tot = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &amp;lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!ok[i]) prime[tot++] = i;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &amp;lt; tot; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> now = i * prime[j];</div><div class=\"line\">            <span class=\"keyword\">if</span> (now &amp;gt; n) <span class=\"keyword\">break</span>;</div><div class=\"line\">            ok[now] = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i % prime[j] == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getfact</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> s = x &amp;lt; <span class=\"number\">0</span> ? -x : x;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; prime[i] &amp;lt;= s; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = prime[i]; j &amp;lt;= s; j *= prime[i]) &#123;</div><div class=\"line\">            faclist[i] += x / j;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">1001</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    getprime(<span class=\"number\">1000</span>);</div><div class=\"line\">    <span class=\"keyword\">while</span> (~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,str)) &#123;</div><div class=\"line\">        n = <span class=\"built_in\">strlen</span>(str);</div><div class=\"line\">        clr(cnt, <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; n; i++) &#123;</div><div class=\"line\">            cnt[str[i] - <span class=\"string\">'A'</span>]++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> f = <span class=\"number\">0</span>;</div><div class=\"line\">        m = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; <span class=\"number\">26</span> &amp;amp;&amp;amp; f &amp;lt; <span class=\"number\">2</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (cnt[i] &amp;amp; <span class=\"number\">1</span>) f++;</div><div class=\"line\">            m += cnt[i] &amp;gt;&amp;gt;= <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (f &amp;gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"0\\n\"</span>);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        clr(faclist, <span class=\"number\">0</span>);</div><div class=\"line\">        getfact(m);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; <span class=\"number\">26</span>; i++)</div><div class=\"line\">            getfact(-cnt[i]);</div><div class=\"line\">        BigInteger res;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; prime[i] &amp;lt;= m; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &amp;lt; faclist[i]; j++) &#123;</div><div class=\"line\">                res *= prime[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &amp;lt;&amp;lt; res &amp;lt;&amp;lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">```language</div></pre></td></tr></table></figure></p>\n<p></pre></p>"},{"title":"内网 2085马农","date":"2014-08-13T13:09:40.000Z","_content":"##Description\n 在观看完战马检阅之后，来自大草原的两兄弟决心成为超级“马农”，专门饲养战马。\n\n兄弟两回到草原，将可以养马的区域，分为N*N的单位面积的正方形，并实地进行考察，归纳出了每个单位面积可以养马所获得的收益。接下来就要开始规划他们各自的马场了。\n\n首先，两人的马场都必须是矩形区域。同时，为了方便两人互相照应，也为了防止马匹互相走散，规定两个马场的矩形区域相邻，且只有一个交点。最后，互不认输的两人希望两个马场的收益相当，这样才不会影响他们兄弟的感情。\n\n现在，兄弟两找到你这位设计师，希望你给他们设计马场，问共有多少种设计方案。\n<!--more-->\n##Input\n\n第一行一个整数N，表示整个草原的大小为N*N。\n\n接下来N行，每行N个整数A(i,j)，表示第i行第j列的单位草地的收成。（注意：收益可能是负数，养马也不是包赚的，马匹也可能出现生病死亡等意外。）\n\n1&lt;=N&lt;=50  \n-1000&lt;A(i,j)&lt;1000\n\n##Output\n\n\n 输出符合两人要求的草原分配方案数。\n\n\n##Sample Input\n\n3 1 2 3 4 5 6 7 8 9\n\n##Sample Output\n\n2\n\n##Hint\n\n![](http://acm.zjnu.edu.cn/JudgeOnline/userfiles/images/2085.jpg)\n\n##Source\n\n\n2014宁波初中 T2\n\n<br/>\n- - -\n\n\n\n宁波镇海中学的罗方炜给我们组的一场比赛。\n\n此题主要靠技巧。枚举中心点，然后用数组hash。注意数组清空复杂度很大，每次清空必定超时。应该用一个栈来记录更改的地方，直接赋0.\n\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;cmath&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define PR pair&lt;int,int&gt;\n#define MP make_pair\n#define SI(x) set&lt;x&gt;::iterator\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set&lt;x&gt;::reverse_iterator\n#define VRI(x) vector&lt;x&gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define Sz(x) (int)x.size()\n#define clrQ(x) while(!x.empty)x.pop();\n#define clr(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n/*start*/\n#define N 55\n#define M 2500000\nint f[N][N],a[N][N];\nint h[M&lt;&lt;1|1];\nint st[N*N],top;\nint n,m;\nint main(int argc, char **argv) {\n    while(~scanf(\"%d\",&amp;n)){\n        for (int i = 1; i &lt;= n; ++i) {\n            for (int j = 1; j &lt;= n; ++j) {\n                scanf(\"%d\",&amp;a[i][j]);\n                f[i][j]=f[i-1][j]+f[i][j-1]-f[i-1][j-1]+a[i][j];\n            }\n        }\n        int res=top=0;\n        for (int x = 1; x &lt;= n; ++x) {\n            for (int y = 1; y &lt;= n; ++y) {\n                for (int i = 1; i &lt;= x; ++i) {\n                    for (int j = 1; j &lt;= y; ++j) {\n                        st[top++]=f[x][y]-f[x][j-1]-f[i-1][y]+f[i-1][j-1]+M;\n                        h[st[top-1]]++;\n                    }\n                }\n                for (int i = x+1; i &lt;= n; ++i) {\n                    for (int j = y+1; j &lt;= n; ++j) {\n                        res+=h[f[i][j]-f[i][y]-f[x][j]+f[x][y]+M];\n                    }\n                }\n\n                while(top){\n                    h[st[--top]]=0;\n                }\n                for (int i = x; i &lt;= n; ++i) {\n                    for (int j = 1; j &lt;= y; ++j) {\n                        st[top++]=f[i][y]-f[x-1][y]-f[i][j-1]+f[x-1][j-1]+M;\n                        h[st[top-1]]++;\n                    }\n                }\n                for (int i = 1; i &lt; x; ++i) {\n                    for (int j = y+1; j &lt;= n; ++j) {\n                        res+=h[f[x-1][j]-f[x-1][y]-f[i-1][j]+f[i-1][y]+M];\n                    }\n                }\n                while(top){\n                    h[st[--top]]=0;\n                }\n            }\n        }\n        printf(\"%d\\n\",res);\n    }\n}\n\n```","source":"_posts/zjnu2085.md","raw":"title: 内网 2085马农\ntags:\n  - 暴力\ncategories:\n  - ACM\ndate: 2014-08-13 21:09:40\n---\n##Description\n 在观看完战马检阅之后，来自大草原的两兄弟决心成为超级“马农”，专门饲养战马。\n\n兄弟两回到草原，将可以养马的区域，分为N*N的单位面积的正方形，并实地进行考察，归纳出了每个单位面积可以养马所获得的收益。接下来就要开始规划他们各自的马场了。\n\n首先，两人的马场都必须是矩形区域。同时，为了方便两人互相照应，也为了防止马匹互相走散，规定两个马场的矩形区域相邻，且只有一个交点。最后，互不认输的两人希望两个马场的收益相当，这样才不会影响他们兄弟的感情。\n\n现在，兄弟两找到你这位设计师，希望你给他们设计马场，问共有多少种设计方案。\n<!--more-->\n##Input\n\n第一行一个整数N，表示整个草原的大小为N*N。\n\n接下来N行，每行N个整数A(i,j)，表示第i行第j列的单位草地的收成。（注意：收益可能是负数，养马也不是包赚的，马匹也可能出现生病死亡等意外。）\n\n1&lt;=N&lt;=50  \n-1000&lt;A(i,j)&lt;1000\n\n##Output\n\n\n 输出符合两人要求的草原分配方案数。\n\n\n##Sample Input\n\n3 1 2 3 4 5 6 7 8 9\n\n##Sample Output\n\n2\n\n##Hint\n\n![](http://acm.zjnu.edu.cn/JudgeOnline/userfiles/images/2085.jpg)\n\n##Source\n\n\n2014宁波初中 T2\n\n<br/>\n- - -\n\n\n\n宁波镇海中学的罗方炜给我们组的一场比赛。\n\n此题主要靠技巧。枚举中心点，然后用数组hash。注意数组清空复杂度很大，每次清空必定超时。应该用一个栈来记录更改的地方，直接赋0.\n\n```C++\n#include&lt;map&gt;\n#include&lt;set&gt;\n#include&lt;cmath&gt;\n#include&lt;stack&gt;\n#include&lt;queue&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cctype&gt;\n#include&lt;cassert&gt;\n#include&lt;utility&gt;\n#include&lt;numeric&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n#define pr pair\n#define PR pair&lt;int,int&gt;\n#define MP make_pair\n#define SI(x) set&lt;x&gt;::iterator\n#define VI(x) vector&lt;x&gt;::iterator\n#define MI(x,y) map&lt;x,y&gt;::iterator\n#define SRI(x) set&lt;x&gt;::reverse_iterator\n#define VRI(x) vector&lt;x&gt;::reverse_iterator\n#define MRI(x,y) map&lt;x,y&gt;::reverse_iterator\n#define F first\n#define S second\n#define Sz(x) (int)x.size()\n#define clrQ(x) while(!x.empty)x.pop();\n#define clr(x,y) memset(x,y,sizeof(x));\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\n/*start*/\n#define N 55\n#define M 2500000\nint f[N][N],a[N][N];\nint h[M&lt;&lt;1|1];\nint st[N*N],top;\nint n,m;\nint main(int argc, char **argv) {\n    while(~scanf(\"%d\",&amp;n)){\n        for (int i = 1; i &lt;= n; ++i) {\n            for (int j = 1; j &lt;= n; ++j) {\n                scanf(\"%d\",&amp;a[i][j]);\n                f[i][j]=f[i-1][j]+f[i][j-1]-f[i-1][j-1]+a[i][j];\n            }\n        }\n        int res=top=0;\n        for (int x = 1; x &lt;= n; ++x) {\n            for (int y = 1; y &lt;= n; ++y) {\n                for (int i = 1; i &lt;= x; ++i) {\n                    for (int j = 1; j &lt;= y; ++j) {\n                        st[top++]=f[x][y]-f[x][j-1]-f[i-1][y]+f[i-1][j-1]+M;\n                        h[st[top-1]]++;\n                    }\n                }\n                for (int i = x+1; i &lt;= n; ++i) {\n                    for (int j = y+1; j &lt;= n; ++j) {\n                        res+=h[f[i][j]-f[i][y]-f[x][j]+f[x][y]+M];\n                    }\n                }\n\n                while(top){\n                    h[st[--top]]=0;\n                }\n                for (int i = x; i &lt;= n; ++i) {\n                    for (int j = 1; j &lt;= y; ++j) {\n                        st[top++]=f[i][y]-f[x-1][y]-f[i][j-1]+f[x-1][j-1]+M;\n                        h[st[top-1]]++;\n                    }\n                }\n                for (int i = 1; i &lt; x; ++i) {\n                    for (int j = y+1; j &lt;= n; ++j) {\n                        res+=h[f[x-1][j]-f[x-1][y]-f[i-1][j]+f[i-1][y]+M];\n                    }\n                }\n                while(top){\n                    h[st[--top]]=0;\n                }\n            }\n        }\n        printf(\"%d\\n\",res);\n    }\n}\n\n```","slug":"zjnu2085","published":1,"updated":"2015-02-26T03:05:24.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8oj002wwppvll7hee27","content":"<p>##Description<br> 在观看完战马检阅之后，来自大草原的两兄弟决心成为超级“马农”，专门饲养战马。</p>\n<p>兄弟两回到草原，将可以养马的区域，分为N*N的单位面积的正方形，并实地进行考察，归纳出了每个单位面积可以养马所获得的收益。接下来就要开始规划他们各自的马场了。</p>\n<p>首先，两人的马场都必须是矩形区域。同时，为了方便两人互相照应，也为了防止马匹互相走散，规定两个马场的矩形区域相邻，且只有一个交点。最后，互不认输的两人希望两个马场的收益相当，这样才不会影响他们兄弟的感情。</p>\n<p>现在，兄弟两找到你这位设计师，希望你给他们设计马场，问共有多少种设计方案。<br><a id=\"more\"></a></p>\n<p>##Input</p>\n<p>第一行一个整数N，表示整个草原的大小为N*N。</p>\n<p>接下来N行，每行N个整数A(i,j)，表示第i行第j列的单位草地的收成。（注意：收益可能是负数，养马也不是包赚的，马匹也可能出现生病死亡等意外。）</p>\n<p>1&lt;=N&lt;=50<br>-1000&lt;A(i,j)&lt;1000</p>\n<p>##Output</p>\n<p> 输出符合两人要求的草原分配方案数。</p>\n<p>##Sample Input</p>\n<p>3 1 2 3 4 5 6 7 8 9</p>\n<p>##Sample Output</p>\n<p>2</p>\n<p>##Hint</p>\n<p><img src=\"http://acm.zjnu.edu.cn/JudgeOnline/userfiles/images/2085.jpg\" alt=\"\"></p>\n<p>##Source</p>\n<p>2014宁波初中 T2</p>\n<p><br></p>\n<hr>\n<p>宁波镇海中学的罗方炜给我们组的一场比赛。</p>\n<p>此题主要靠技巧。枚举中心点，然后用数组hash。注意数组清空复杂度很大，每次清空必定超时。应该用一个栈来记录更改的地方，直接赋0.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;map&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;set&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cmath&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;stack&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;queue&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;string&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstdio&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;vector&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cctype&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cassert&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;utility&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;numeric&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstring&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;iostream&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;algorithm&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pr pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PR pair&amp;lt;int,int&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MP make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Sz(x) (int)x.size()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrQ(x) while(!x.empty)x.pop();</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clr(x,y) memset(x,y,sizeof(x));</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = ~<span class=\"number\">0u</span> &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL lnf = ~<span class=\"number\">0u</span>ll &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"comment\">/*start*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 55</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 2500000</span></div><div class=\"line\"><span class=\"keyword\">int</span> f[N][N],a[N][N];</div><div class=\"line\"><span class=\"keyword\">int</span> h[M&amp;lt;&amp;lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> st[N*N],top;</div><div class=\"line\"><span class=\"keyword\">int</span> n,m;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;amp;n))&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= n; ++i) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &amp;lt;= n; ++j) &#123;</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;amp;a[i][j]);</div><div class=\"line\">                f[i][j]=f[i<span class=\"number\">-1</span>][j]+f[i][j<span class=\"number\">-1</span>]-f[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+a[i][j];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> res=top=<span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">1</span>; x &amp;lt;= n; ++x) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> y = <span class=\"number\">1</span>; y &amp;lt;= n; ++y) &#123;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= x; ++i) &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &amp;lt;= y; ++j) &#123;</div><div class=\"line\">                        st[top++]=f[x][y]-f[x][j<span class=\"number\">-1</span>]-f[i<span class=\"number\">-1</span>][y]+f[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+M;</div><div class=\"line\">                        h[st[top<span class=\"number\">-1</span>]]++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x+<span class=\"number\">1</span>; i &amp;lt;= n; ++i) &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = y+<span class=\"number\">1</span>; j &amp;lt;= n; ++j) &#123;</div><div class=\"line\">                        res+=h[f[i][j]-f[i][y]-f[x][j]+f[x][y]+M];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">while</span>(top)&#123;</div><div class=\"line\">                    h[st[--top]]=<span class=\"number\">0</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x; i &amp;lt;= n; ++i) &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &amp;lt;= y; ++j) &#123;</div><div class=\"line\">                        st[top++]=f[i][y]-f[x<span class=\"number\">-1</span>][y]-f[i][j<span class=\"number\">-1</span>]+f[x<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+M;</div><div class=\"line\">                        h[st[top<span class=\"number\">-1</span>]]++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt; x; ++i) &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = y+<span class=\"number\">1</span>; j &amp;lt;= n; ++j) &#123;</div><div class=\"line\">                        res+=h[f[x<span class=\"number\">-1</span>][j]-f[x<span class=\"number\">-1</span>][y]-f[i<span class=\"number\">-1</span>][j]+f[i<span class=\"number\">-1</span>][y]+M];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">while</span>(top)&#123;</div><div class=\"line\">                    h[st[--top]]=<span class=\"number\">0</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,res);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<p>##Description<br> 在观看完战马检阅之后，来自大草原的两兄弟决心成为超级“马农”，专门饲养战马。</p>\n<p>兄弟两回到草原，将可以养马的区域，分为N*N的单位面积的正方形，并实地进行考察，归纳出了每个单位面积可以养马所获得的收益。接下来就要开始规划他们各自的马场了。</p>\n<p>首先，两人的马场都必须是矩形区域。同时，为了方便两人互相照应，也为了防止马匹互相走散，规定两个马场的矩形区域相邻，且只有一个交点。最后，互不认输的两人希望两个马场的收益相当，这样才不会影响他们兄弟的感情。</p>\n<p>现在，兄弟两找到你这位设计师，希望你给他们设计马场，问共有多少种设计方案。<br>","more":"</p>\n<p>##Input</p>\n<p>第一行一个整数N，表示整个草原的大小为N*N。</p>\n<p>接下来N行，每行N个整数A(i,j)，表示第i行第j列的单位草地的收成。（注意：收益可能是负数，养马也不是包赚的，马匹也可能出现生病死亡等意外。）</p>\n<p>1&lt;=N&lt;=50<br>-1000&lt;A(i,j)&lt;1000</p>\n<p>##Output</p>\n<p> 输出符合两人要求的草原分配方案数。</p>\n<p>##Sample Input</p>\n<p>3 1 2 3 4 5 6 7 8 9</p>\n<p>##Sample Output</p>\n<p>2</p>\n<p>##Hint</p>\n<p><img src=\"http://acm.zjnu.edu.cn/JudgeOnline/userfiles/images/2085.jpg\" alt=\"\"></p>\n<p>##Source</p>\n<p>2014宁波初中 T2</p>\n<p><br/></p>\n<hr>\n<p>宁波镇海中学的罗方炜给我们组的一场比赛。</p>\n<p>此题主要靠技巧。枚举中心点，然后用数组hash。注意数组清空复杂度很大，每次清空必定超时。应该用一个栈来记录更改的地方，直接赋0.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;map&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;set&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cmath&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;stack&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;queue&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;string&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstdio&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;vector&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cctype&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cassert&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;utility&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;numeric&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;cstring&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;iostream&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&amp;lt;algorithm&amp;gt;</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pr pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PR pair&amp;lt;int,int&amp;gt;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MP make_pair</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Sz(x) (int)x.size()</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clrQ(x) while(!x.empty)x.pop();</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clr(x,y) memset(x,y,sizeof(x));</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"I\"</span> <span class=\"meta-string\">\"6\"</span> <span class=\"meta-string\">\"4\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLS <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"d\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LLU <span class=\"meta-string\">\"%\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"l\"</span> <span class=\"meta-string\">\"u\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL_MAX _I64_MAX</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = ~<span class=\"number\">0u</span> &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL lnf = ~<span class=\"number\">0u</span>ll &amp;gt;&amp;gt; <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"comment\">/*start*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 55</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 2500000</span></div><div class=\"line\"><span class=\"keyword\">int</span> f[N][N],a[N][N];</div><div class=\"line\"><span class=\"keyword\">int</span> h[M&amp;lt;&amp;lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> st[N*N],top;</div><div class=\"line\"><span class=\"keyword\">int</span> n,m;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;amp;n))&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= n; ++i) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &amp;lt;= n; ++j) &#123;</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;amp;a[i][j]);</div><div class=\"line\">                f[i][j]=f[i<span class=\"number\">-1</span>][j]+f[i][j<span class=\"number\">-1</span>]-f[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+a[i][j];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> res=top=<span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">1</span>; x &amp;lt;= n; ++x) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> y = <span class=\"number\">1</span>; y &amp;lt;= n; ++y) &#123;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt;= x; ++i) &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &amp;lt;= y; ++j) &#123;</div><div class=\"line\">                        st[top++]=f[x][y]-f[x][j<span class=\"number\">-1</span>]-f[i<span class=\"number\">-1</span>][y]+f[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+M;</div><div class=\"line\">                        h[st[top<span class=\"number\">-1</span>]]++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x+<span class=\"number\">1</span>; i &amp;lt;= n; ++i) &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = y+<span class=\"number\">1</span>; j &amp;lt;= n; ++j) &#123;</div><div class=\"line\">                        res+=h[f[i][j]-f[i][y]-f[x][j]+f[x][y]+M];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">while</span>(top)&#123;</div><div class=\"line\">                    h[st[--top]]=<span class=\"number\">0</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x; i &amp;lt;= n; ++i) &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &amp;lt;= y; ++j) &#123;</div><div class=\"line\">                        st[top++]=f[i][y]-f[x<span class=\"number\">-1</span>][y]-f[i][j<span class=\"number\">-1</span>]+f[x<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+M;</div><div class=\"line\">                        h[st[top<span class=\"number\">-1</span>]]++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &amp;lt; x; ++i) &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = y+<span class=\"number\">1</span>; j &amp;lt;= n; ++j) &#123;</div><div class=\"line\">                        res+=h[f[x<span class=\"number\">-1</span>][j]-f[x<span class=\"number\">-1</span>][y]-f[i<span class=\"number\">-1</span>][j]+f[i<span class=\"number\">-1</span>][y]+M];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">while</span>(top)&#123;</div><div class=\"line\">                    h[st[--top]]=<span class=\"number\">0</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,res);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"ZOJ month contest D.Determinant and Matrix","id":"153","date":"2014-11-07T10:32:21.000Z","_content":"\n* * *\n\n<center style=\"color: #000000;\"><span style=\"color: green;\">Time Limit: </span>2 Seconds      <span style=\"color: green;\">Memory Limit: </span>65536 KB</center>\n\n* * *\n##Description\nRecently, LBH is learning the curse linear algebra. Thus he is very interested in matrix and determinant now. In order to practice his ability of solving the problem of linear algebra, he just invent some problems by himself. Once the problems was create, he would solve it immediately. However, he meet a problem that was so hard that he couldn't work out even though racked his brains. The problem was described as follow:\n\nTo a integer martix M<sub>nn</sub>(a<sub>ij</sub>), we define two function add(M<sub>nn</sub>(a<sub>ij</sub>))=M<sub>nn</sub>(a<sub>ij</sub> + 1) and sub(M<sub>nn</sub>(a<sub>ij</sub>))=M<sub>nn</sub>(a<sub>ij</sub> - 1) which were exactly like this:\n<!--more-->\n<div style=\"color: #000000;\">![DeterminantAndMatrixFig1](http://acm.zju.edu.cn/onlinejudge/showImage.do?name=DeterminantAndMatrixFig1.png)</div>\n<div style=\"color: #000000;\">![DeterminantAndMatrixFig2](http://acm.zju.edu.cn/onlinejudge/showImage.do?name=DeterminantAndMatrixFig2.png)</div>\n\nAccording to the martix M<sub>nn</sub>(a<sub>ij</sub>), we can permutate it and get a full permutation set Perm(M<sub>nn</sub>(a<sub>ij</sub>)) = {M<sub>nn</sub>(a<sub>I<sub>i</sub>J<sub>j</sub></sub>)| I and J is a permutation of 1..n }, (Perm(M) is a set, each matrix in Perm(M) is unique). For example:\n\n<div style=\"color: #000000;\">![DeterminantAndMatrixFig3](http://acm.zju.edu.cn/onlinejudge/showImage.do?name=DeterminantAndMatrixFig3.png)</div>\n\nThe problem is to get the result of a fomula about an integer matrix M<sub>nn</sub>:\n\n<div style=\"color: #000000;\">![DeterminantAndMatrixFig4](http://acm.zju.edu.cn/onlinejudge/showImage.do?name=DeterminantAndMatrixFig4.png)</div>\n<span style=\"color: #000000;\">in which the det(M) meaned to cacluate the determinant of M.</span>\n\n## Input\n\nThere are several test cases.\n\nThe first line contains an integer <var>T</var>(<var>T</var> ≤ 100) . Then <var>T</var> test cases follow.\n\nIn each test case, the first line contains one integer <var>n</var>(0&lt; <var>n</var>≤ 10). The number means the giving matrix's size is <var>n×n</var>\n\nThen there are <var>n</var> lines followed, each line contains <var>n</var> integers <var>a<sub>ij</sub></var>(-10≤ <var>a<sub>ij</sub></var>≤ 10), in the position row <var>i</var>, colum <var>j</var>, it represents the number <var>a<sub>ij</sub>.</var>\n\n## Output\n\nFor each test case, since the result may be very large, output one line with the result modulo 2<sup>30</sup>.\n\n## Sample Input\n```\n1\n2\n1 1\n1 2\n```\n#### Sample Output\n\n```\n2\n```\n\n<span style=\"color: #000000;\">Author: </span>**LIN, Binghui**\n<span style=\"color: #000000;\">Source: </span>**ZOJ Monthly, August 2014**\n\n<br/>\n\n- - -\n\n\n这道题全场现场只A了一个人。今天我们比赛的时候我A了，挺爽的。\n```Java\nimport java.util.Scanner;\nimport java.math.*;\npublic class Main {\n\tstatic long fact[]=new long[15];\n\tstatic long kind;\n\tstatic int A[][]=new int[10][10];\n\tstatic final BigInteger MOD=BigInteger.valueOf(1&lt;&lt;30);\n\tstatic void getKind(int n){\n\t\tboolean mark[]=new boolean[10];\n\t\tfor(int i,j,k,r=0;r&lt;2;r++){\n\t\t\tfor (i = 0; i &lt; n; ++ i) mark[i] = false;\n\t\t\tfor (i = 0; i &lt; n; ++ i) {\n\t\t\t\tif (mark[i]) continue;\n\t\t\t\tint cnt = 0;\n\t\t\t\tfor (j = i; j &lt; n; ++ j) {\n\t\t\t\t\tfor (k = 0; k &lt; n; ++ k) {\n\t\t\t\t\t\tif (r==1&amp;&amp;A[k][i] != A[k][j])break;\n\t\t\t\t\t\tif(r==0&amp;&amp;A[i][k] != A[j][k])break;\n\t\t\t\t\t}\n\t\t\t\t\tif (k == n) {\n\t\t\t\t\t\t++ cnt;\n\t\t\t\t\t\tmark[j] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tkind /= fact[cnt];\n\t\t\t}\n\t\t}\n\t}\n\tpublic static void main(String[] args){\n\t\tScanner cin=new Scanner(System.in);\n\t\tint n,T=cin.nextInt();\n\t\tfact[0]=1;\n\t\tfor(int i=1;i&lt;=10;i++)fact[i]=fact[i-1]*i;\n\t\twhile(T--&gt;0){\n\t\t\tn=cin.nextInt();\n\t\t\tfor(int i=0;i&lt;n;i++){\n\t\t\t\tfor(int j=0;j&lt;n;j++){\n\t\t\t\t\tA[i][j]=cin.nextInt();\n\t\t\t\t}\n\t\t\t}\n\t\t\tlong res=0;\n\t\t\tMatrix matrix=new Matrix(n);\n\t\t\tkind=fact[n]*fact[n];\n\t\t\tgetKind(n);\n\t\t\tif(kind%2==1){\n\t\t\t\tmatrix.valueOf(A, 0);\n\t\t\t\tres=res ^(matrix.Det().mod(MOD).longValue());\n\t\t\t}\n\t\t\tmatrix.valueOf(A, 1);\n\t\t\tres=res^(matrix.Det().mod(MOD).longValue());\n\t\t\tmatrix.valueOf(A, -1);\n\t\t\tres=res^(matrix.Det().mod(MOD).longValue());\n\t\t\tSystem.out.println(res);\n\t\t}\n\t\tcin.close();\n\t}\n}\nclass Matrix{\n\tBigInteger M[][]=new BigInteger[10][10];\n\tBigInteger ZERO,ONE;\n\tint n;\n\tMatrix(int n){\n\t\tthis.n=n;\n\t\tZERO=BigInteger.ZERO;\n\t\tONE=BigInteger.ONE;\n\t}\n\tvoid valueOf(int A[][],int d){\n\t\tfor(int i=0;i&lt;n;i++){\n\t\t\tfor(int j=0;j&lt;n;j++){\n\t\t\t\tM[i][j]=BigInteger.valueOf(A[i][j]+d);\n\t\t\t}\n\t\t}\n\t}\n\tBigInteger Det(){\n\t\tBigInteger tmp, res = ONE, div = ONE;\n\t\tint i, j, k;\n\t\tfor (i = 0; i &lt; n; ++ i) {\n\t\t\tfor (j = i; j &lt; n; ++ j) {\n\t\t\t\tif (!M[j][i].equals(ZERO)) break;\n\t\t\t}\n\t\t\tif (j == n) return ZERO;\n\t\t\tif (j != i) {\n\t\t\t\t//res = res.negate();\n\t\t\t\tfor (k = 0; k &lt; n; ++ k) {\n\t\t\t\t    tmp = M[j][k];\n\t\t\t\t\tM[j][k] = M[i][k];\n\t\t\t\t\tM[i][k] = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t\tres = res.multiply(M[i][i]);\n\t\t\tfor (j = i + 1; j &lt; n; ++ j) {\n\t\t\t\tif (M[j][i].equals(ZERO)) continue;\n\t\t\t\tdiv = div.multiply(M[i][i]);\n\t\t\t\tfor (k = i + 1; k &lt; n; ++ k) {\n\t\t\t\t\tM[j][k] = M[j][k].multiply(M[i][i]).subtract(M[i][k].multiply(M[j][i]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tres = res.divide(div);\n\t\tif (res.compareTo(ZERO) &lt; 0) res = res.negate();\n\t\treturn res;\n\t}\n}\n```\n</pre>","source":"_posts/zoj-month-contest-d-determinant-and-matrix.md","raw":"title: ZOJ month contest D.Determinant and Matrix\ncategories:\n  - ACM\nid: 153\ndate: 2014-11-07 18:32:21\ntags: 数论\n---\n\n* * *\n\n<center style=\"color: #000000;\"><span style=\"color: green;\">Time Limit: </span>2 Seconds      <span style=\"color: green;\">Memory Limit: </span>65536 KB</center>\n\n* * *\n##Description\nRecently, LBH is learning the curse linear algebra. Thus he is very interested in matrix and determinant now. In order to practice his ability of solving the problem of linear algebra, he just invent some problems by himself. Once the problems was create, he would solve it immediately. However, he meet a problem that was so hard that he couldn't work out even though racked his brains. The problem was described as follow:\n\nTo a integer martix M<sub>nn</sub>(a<sub>ij</sub>), we define two function add(M<sub>nn</sub>(a<sub>ij</sub>))=M<sub>nn</sub>(a<sub>ij</sub> + 1) and sub(M<sub>nn</sub>(a<sub>ij</sub>))=M<sub>nn</sub>(a<sub>ij</sub> - 1) which were exactly like this:\n<!--more-->\n<div style=\"color: #000000;\">![DeterminantAndMatrixFig1](http://acm.zju.edu.cn/onlinejudge/showImage.do?name=DeterminantAndMatrixFig1.png)</div>\n<div style=\"color: #000000;\">![DeterminantAndMatrixFig2](http://acm.zju.edu.cn/onlinejudge/showImage.do?name=DeterminantAndMatrixFig2.png)</div>\n\nAccording to the martix M<sub>nn</sub>(a<sub>ij</sub>), we can permutate it and get a full permutation set Perm(M<sub>nn</sub>(a<sub>ij</sub>)) = {M<sub>nn</sub>(a<sub>I<sub>i</sub>J<sub>j</sub></sub>)| I and J is a permutation of 1..n }, (Perm(M) is a set, each matrix in Perm(M) is unique). For example:\n\n<div style=\"color: #000000;\">![DeterminantAndMatrixFig3](http://acm.zju.edu.cn/onlinejudge/showImage.do?name=DeterminantAndMatrixFig3.png)</div>\n\nThe problem is to get the result of a fomula about an integer matrix M<sub>nn</sub>:\n\n<div style=\"color: #000000;\">![DeterminantAndMatrixFig4](http://acm.zju.edu.cn/onlinejudge/showImage.do?name=DeterminantAndMatrixFig4.png)</div>\n<span style=\"color: #000000;\">in which the det(M) meaned to cacluate the determinant of M.</span>\n\n## Input\n\nThere are several test cases.\n\nThe first line contains an integer <var>T</var>(<var>T</var> ≤ 100) . Then <var>T</var> test cases follow.\n\nIn each test case, the first line contains one integer <var>n</var>(0&lt; <var>n</var>≤ 10). The number means the giving matrix's size is <var>n×n</var>\n\nThen there are <var>n</var> lines followed, each line contains <var>n</var> integers <var>a<sub>ij</sub></var>(-10≤ <var>a<sub>ij</sub></var>≤ 10), in the position row <var>i</var>, colum <var>j</var>, it represents the number <var>a<sub>ij</sub>.</var>\n\n## Output\n\nFor each test case, since the result may be very large, output one line with the result modulo 2<sup>30</sup>.\n\n## Sample Input\n```\n1\n2\n1 1\n1 2\n```\n#### Sample Output\n\n```\n2\n```\n\n<span style=\"color: #000000;\">Author: </span>**LIN, Binghui**\n<span style=\"color: #000000;\">Source: </span>**ZOJ Monthly, August 2014**\n\n<br/>\n\n- - -\n\n\n这道题全场现场只A了一个人。今天我们比赛的时候我A了，挺爽的。\n```Java\nimport java.util.Scanner;\nimport java.math.*;\npublic class Main {\n\tstatic long fact[]=new long[15];\n\tstatic long kind;\n\tstatic int A[][]=new int[10][10];\n\tstatic final BigInteger MOD=BigInteger.valueOf(1&lt;&lt;30);\n\tstatic void getKind(int n){\n\t\tboolean mark[]=new boolean[10];\n\t\tfor(int i,j,k,r=0;r&lt;2;r++){\n\t\t\tfor (i = 0; i &lt; n; ++ i) mark[i] = false;\n\t\t\tfor (i = 0; i &lt; n; ++ i) {\n\t\t\t\tif (mark[i]) continue;\n\t\t\t\tint cnt = 0;\n\t\t\t\tfor (j = i; j &lt; n; ++ j) {\n\t\t\t\t\tfor (k = 0; k &lt; n; ++ k) {\n\t\t\t\t\t\tif (r==1&amp;&amp;A[k][i] != A[k][j])break;\n\t\t\t\t\t\tif(r==0&amp;&amp;A[i][k] != A[j][k])break;\n\t\t\t\t\t}\n\t\t\t\t\tif (k == n) {\n\t\t\t\t\t\t++ cnt;\n\t\t\t\t\t\tmark[j] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tkind /= fact[cnt];\n\t\t\t}\n\t\t}\n\t}\n\tpublic static void main(String[] args){\n\t\tScanner cin=new Scanner(System.in);\n\t\tint n,T=cin.nextInt();\n\t\tfact[0]=1;\n\t\tfor(int i=1;i&lt;=10;i++)fact[i]=fact[i-1]*i;\n\t\twhile(T--&gt;0){\n\t\t\tn=cin.nextInt();\n\t\t\tfor(int i=0;i&lt;n;i++){\n\t\t\t\tfor(int j=0;j&lt;n;j++){\n\t\t\t\t\tA[i][j]=cin.nextInt();\n\t\t\t\t}\n\t\t\t}\n\t\t\tlong res=0;\n\t\t\tMatrix matrix=new Matrix(n);\n\t\t\tkind=fact[n]*fact[n];\n\t\t\tgetKind(n);\n\t\t\tif(kind%2==1){\n\t\t\t\tmatrix.valueOf(A, 0);\n\t\t\t\tres=res ^(matrix.Det().mod(MOD).longValue());\n\t\t\t}\n\t\t\tmatrix.valueOf(A, 1);\n\t\t\tres=res^(matrix.Det().mod(MOD).longValue());\n\t\t\tmatrix.valueOf(A, -1);\n\t\t\tres=res^(matrix.Det().mod(MOD).longValue());\n\t\t\tSystem.out.println(res);\n\t\t}\n\t\tcin.close();\n\t}\n}\nclass Matrix{\n\tBigInteger M[][]=new BigInteger[10][10];\n\tBigInteger ZERO,ONE;\n\tint n;\n\tMatrix(int n){\n\t\tthis.n=n;\n\t\tZERO=BigInteger.ZERO;\n\t\tONE=BigInteger.ONE;\n\t}\n\tvoid valueOf(int A[][],int d){\n\t\tfor(int i=0;i&lt;n;i++){\n\t\t\tfor(int j=0;j&lt;n;j++){\n\t\t\t\tM[i][j]=BigInteger.valueOf(A[i][j]+d);\n\t\t\t}\n\t\t}\n\t}\n\tBigInteger Det(){\n\t\tBigInteger tmp, res = ONE, div = ONE;\n\t\tint i, j, k;\n\t\tfor (i = 0; i &lt; n; ++ i) {\n\t\t\tfor (j = i; j &lt; n; ++ j) {\n\t\t\t\tif (!M[j][i].equals(ZERO)) break;\n\t\t\t}\n\t\t\tif (j == n) return ZERO;\n\t\t\tif (j != i) {\n\t\t\t\t//res = res.negate();\n\t\t\t\tfor (k = 0; k &lt; n; ++ k) {\n\t\t\t\t    tmp = M[j][k];\n\t\t\t\t\tM[j][k] = M[i][k];\n\t\t\t\t\tM[i][k] = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t\tres = res.multiply(M[i][i]);\n\t\t\tfor (j = i + 1; j &lt; n; ++ j) {\n\t\t\t\tif (M[j][i].equals(ZERO)) continue;\n\t\t\t\tdiv = div.multiply(M[i][i]);\n\t\t\t\tfor (k = i + 1; k &lt; n; ++ k) {\n\t\t\t\t\tM[j][k] = M[j][k].multiply(M[i][i]).subtract(M[i][k].multiply(M[j][i]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tres = res.divide(div);\n\t\tif (res.compareTo(ZERO) &lt; 0) res = res.negate();\n\t\treturn res;\n\t}\n}\n```\n</pre>","slug":"zoj-month-contest-d-determinant-and-matrix","published":1,"updated":"2015-02-26T03:05:38.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8ok002zwppvkxu9drb9","content":"<hr>\n<center style=\"color: #000000;\"><span style=\"color: green;\">Time Limit: </span>2 Seconds      <span style=\"color: green;\">Memory Limit: </span>65536 KB</center>\n\n<hr>\n<p>##Description<br>Recently, LBH is learning the curse linear algebra. Thus he is very interested in matrix and determinant now. In order to practice his ability of solving the problem of linear algebra, he just invent some problems by himself. Once the problems was create, he would solve it immediately. However, he meet a problem that was so hard that he couldn’t work out even though racked his brains. The problem was described as follow:</p>\n<p>To a integer martix M<sub>nn</sub>(a<sub>ij</sub>), we define two function add(M<sub>nn</sub>(a<sub>ij</sub>))=M<sub>nn</sub>(a<sub>ij</sub> + 1) and sub(M<sub>nn</sub>(a<sub>ij</sub>))=M<sub>nn</sub>(a<sub>ij</sub> - 1) which were exactly like this:<br><a id=\"more\"></a></p>\n<div style=\"color: #000000;\"><img src=\"http://acm.zju.edu.cn/onlinejudge/showImage.do?name=DeterminantAndMatrixFig1.png\" alt=\"DeterminantAndMatrixFig1\"></div><br><div style=\"color: #000000;\"><img src=\"http://acm.zju.edu.cn/onlinejudge/showImage.do?name=DeterminantAndMatrixFig2.png\" alt=\"DeterminantAndMatrixFig2\"></div>\n\n<p>According to the martix M<sub>nn</sub>(a<sub>ij</sub>), we can permutate it and get a full permutation set Perm(M<sub>nn</sub>(a<sub>ij</sub>)) = {M<sub>nn</sub>(a<sub>I<sub>i</sub>J<sub>j</sub></sub>)| I and J is a permutation of 1..n }, (Perm(M) is a set, each matrix in Perm(M) is unique). For example:</p>\n<div style=\"color: #000000;\"><img src=\"http://acm.zju.edu.cn/onlinejudge/showImage.do?name=DeterminantAndMatrixFig3.png\" alt=\"DeterminantAndMatrixFig3\"></div>\n\n<p>The problem is to get the result of a fomula about an integer matrix M<sub>nn</sub>:</p>\n<p><div style=\"color: #000000;\"><img src=\"http://acm.zju.edu.cn/onlinejudge/showImage.do?name=DeterminantAndMatrixFig4.png\" alt=\"DeterminantAndMatrixFig4\"></div><br><span style=\"color: #000000;\">in which the det(M) meaned to cacluate the determinant of M.</span></p>\n<h2 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h2><p>There are several test cases.</p>\n<p>The first line contains an integer <var>T</var>(<var>T</var> ≤ 100) . Then <var>T</var> test cases follow.</p>\n<p>In each test case, the first line contains one integer <var>n</var>(0&lt; <var>n</var>≤ 10). The number means the giving matrix’s size is <var>n×n</var></p>\n<p>Then there are <var>n</var> lines followed, each line contains <var>n</var> integers <var>a<sub>ij</sub></var>(-10≤ <var>a<sub>ij</sub></var>≤ 10), in the position row <var>i</var>, colum <var>j</var>, it represents the number <var>a<sub>ij</sub>.</var></p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>For each test case, since the result may be very large, output one line with the result modulo 2<sup>30</sup>.</p>\n<h2 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">1 1</div><div class=\"line\">1 2</div></pre></td></tr></table></figure>\n<h4 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">2</div></pre></td></tr></table></figure>\n<p><span style=\"color: #000000;\">Author: </span><strong>LIN, Binghui</strong><br><span style=\"color: #000000;\">Source: </span><strong>ZOJ Monthly, August 2014</strong></p>\n<p><br></p>\n<hr>\n<p>这道题全场现场只A了一个人。今天我们比赛的时候我A了，挺爽的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"><span class=\"keyword\">import</span> java.math.*;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">long</span> fact[]=<span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[<span class=\"number\">15</span>];</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">long</span> kind;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> A[][]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> BigInteger MOD=BigInteger.valueOf(<span class=\"number\">1</span>&amp;lt;&amp;lt;<span class=\"number\">30</span>);</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">getKind</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">boolean</span> mark[]=<span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">10</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i,j,k,r=<span class=\"number\">0</span>;r&amp;lt;<span class=\"number\">2</span>;r++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &amp;lt; n; ++ i) mark[i] = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &amp;lt; n; ++ i) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (mark[i]) <span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (j = i; j &amp;lt; n; ++ j) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &amp;lt; n; ++ k) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (r==<span class=\"number\">1</span>&amp;amp;&amp;amp;A[k][i] != A[k][j])<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>&amp;amp;&amp;amp;A[i][k] != A[j][k])<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (k == n) &#123;</div><div class=\"line\">\t\t\t\t\t\t++ cnt;</div><div class=\"line\">\t\t\t\t\t\tmark[j] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tkind /= fact[cnt];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">\t\tScanner cin=<span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n,T=cin.nextInt();</div><div class=\"line\">\t\tfact[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&amp;lt;=<span class=\"number\">10</span>;i++)fact[i]=fact[i-<span class=\"number\">1</span>]*i;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(T--&amp;gt;<span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\tn=cin.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&amp;lt;n;i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&amp;lt;n;j++)&#123;</div><div class=\"line\">\t\t\t\t\tA[i][j]=cin.nextInt();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> res=<span class=\"number\">0</span>;</div><div class=\"line\">\t\t\tMatrix matrix=<span class=\"keyword\">new</span> Matrix(n);</div><div class=\"line\">\t\t\tkind=fact[n]*fact[n];</div><div class=\"line\">\t\t\tgetKind(n);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(kind%<span class=\"number\">2</span>==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\t\tmatrix.valueOf(A, <span class=\"number\">0</span>);</div><div class=\"line\">\t\t\t\tres=res ^(matrix.Det().mod(MOD).longValue());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tmatrix.valueOf(A, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\tres=res^(matrix.Det().mod(MOD).longValue());</div><div class=\"line\">\t\t\tmatrix.valueOf(A, -<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\tres=res^(matrix.Det().mod(MOD).longValue());</div><div class=\"line\">\t\t\tSystem.out.println(res);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tcin.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Matrix</span></span>&#123;</div><div class=\"line\">\tBigInteger M[][]=<span class=\"keyword\">new</span> BigInteger[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</div><div class=\"line\">\tBigInteger ZERO,ONE;</div><div class=\"line\">\t<span class=\"keyword\">int</span> n;</div><div class=\"line\">\tMatrix(<span class=\"keyword\">int</span> n)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.n=n;</div><div class=\"line\">\t\tZERO=BigInteger.ZERO;</div><div class=\"line\">\t\tONE=BigInteger.ONE;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">int</span> A[][],<span class=\"keyword\">int</span> d)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&amp;lt;n;i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&amp;lt;n;j++)&#123;</div><div class=\"line\">\t\t\t\tM[i][j]=BigInteger.valueOf(A[i][j]+d);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\">BigInteger <span class=\"title\">Det</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tBigInteger tmp, res = ONE, div = ONE;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i, j, k;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &amp;lt; n; ++ i) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (j = i; j &amp;lt; n; ++ j) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!M[j][i].equals(ZERO)) <span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j == n) <span class=\"keyword\">return</span> ZERO;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j != i) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//res = res.negate();</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &amp;lt; n; ++ k) &#123;</div><div class=\"line\">\t\t\t\t    tmp = M[j][k];</div><div class=\"line\">\t\t\t\t\tM[j][k] = M[i][k];</div><div class=\"line\">\t\t\t\t\tM[i][k] = tmp;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tres = res.multiply(M[i][i]);</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (j = i + <span class=\"number\">1</span>; j &amp;lt; n; ++ j) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (M[j][i].equals(ZERO)) <span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t\tdiv = div.multiply(M[i][i]);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (k = i + <span class=\"number\">1</span>; k &amp;lt; n; ++ k) &#123;</div><div class=\"line\">\t\t\t\t\tM[j][k] = M[j][k].multiply(M[i][i]).subtract(M[i][k].multiply(M[j][i]));</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tres = res.divide(div);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (res.compareTo(ZERO) &amp;lt; <span class=\"number\">0</span>) res = res.negate();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> res;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p></p>\n","excerpt":"<hr>\n<center style=\"color: #000000;\"><span style=\"color: green;\">Time Limit: </span>2 Seconds      <span style=\"color: green;\">Memory Limit: </span>65536 KB</center>\n\n<hr>\n<p>##Description<br>Recently, LBH is learning the curse linear algebra. Thus he is very interested in matrix and determinant now. In order to practice his ability of solving the problem of linear algebra, he just invent some problems by himself. Once the problems was create, he would solve it immediately. However, he meet a problem that was so hard that he couldn’t work out even though racked his brains. The problem was described as follow:</p>\n<p>To a integer martix M<sub>nn</sub>(a<sub>ij</sub>), we define two function add(M<sub>nn</sub>(a<sub>ij</sub>))=M<sub>nn</sub>(a<sub>ij</sub> + 1) and sub(M<sub>nn</sub>(a<sub>ij</sub>))=M<sub>nn</sub>(a<sub>ij</sub> - 1) which were exactly like this:<br>","more":"</p>\n<div style=\"color: #000000;\"><img src=\"http://acm.zju.edu.cn/onlinejudge/showImage.do?name=DeterminantAndMatrixFig1.png\" alt=\"DeterminantAndMatrixFig1\"></div><br><div style=\"color: #000000;\"><img src=\"http://acm.zju.edu.cn/onlinejudge/showImage.do?name=DeterminantAndMatrixFig2.png\" alt=\"DeterminantAndMatrixFig2\"></div>\n\n<p>According to the martix M<sub>nn</sub>(a<sub>ij</sub>), we can permutate it and get a full permutation set Perm(M<sub>nn</sub>(a<sub>ij</sub>)) = {M<sub>nn</sub>(a<sub>I<sub>i</sub>J<sub>j</sub></sub>)| I and J is a permutation of 1..n }, (Perm(M) is a set, each matrix in Perm(M) is unique). For example:</p>\n<div style=\"color: #000000;\"><img src=\"http://acm.zju.edu.cn/onlinejudge/showImage.do?name=DeterminantAndMatrixFig3.png\" alt=\"DeterminantAndMatrixFig3\"></div>\n\n<p>The problem is to get the result of a fomula about an integer matrix M<sub>nn</sub>:</p>\n<p><div style=\"color: #000000;\"><img src=\"http://acm.zju.edu.cn/onlinejudge/showImage.do?name=DeterminantAndMatrixFig4.png\" alt=\"DeterminantAndMatrixFig4\"></div><br><span style=\"color: #000000;\">in which the det(M) meaned to cacluate the determinant of M.</span></p>\n<h2 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h2><p>There are several test cases.</p>\n<p>The first line contains an integer <var>T</var>(<var>T</var> ≤ 100) . Then <var>T</var> test cases follow.</p>\n<p>In each test case, the first line contains one integer <var>n</var>(0&lt; <var>n</var>≤ 10). The number means the giving matrix’s size is <var>n×n</var></p>\n<p>Then there are <var>n</var> lines followed, each line contains <var>n</var> integers <var>a<sub>ij</sub></var>(-10≤ <var>a<sub>ij</sub></var>≤ 10), in the position row <var>i</var>, colum <var>j</var>, it represents the number <var>a<sub>ij</sub>.</var></p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>For each test case, since the result may be very large, output one line with the result modulo 2<sup>30</sup>.</p>\n<h2 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">1 1</div><div class=\"line\">1 2</div></pre></td></tr></table></figure>\n<h4 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">2</div></pre></td></tr></table></figure>\n<p><span style=\"color: #000000;\">Author: </span><strong>LIN, Binghui</strong><br><span style=\"color: #000000;\">Source: </span><strong>ZOJ Monthly, August 2014</strong></p>\n<p><br/></p>\n<hr>\n<p>这道题全场现场只A了一个人。今天我们比赛的时候我A了，挺爽的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"><span class=\"keyword\">import</span> java.math.*;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">long</span> fact[]=<span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[<span class=\"number\">15</span>];</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">long</span> kind;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> A[][]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> BigInteger MOD=BigInteger.valueOf(<span class=\"number\">1</span>&amp;lt;&amp;lt;<span class=\"number\">30</span>);</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">getKind</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">boolean</span> mark[]=<span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">10</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i,j,k,r=<span class=\"number\">0</span>;r&amp;lt;<span class=\"number\">2</span>;r++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &amp;lt; n; ++ i) mark[i] = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &amp;lt; n; ++ i) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (mark[i]) <span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (j = i; j &amp;lt; n; ++ j) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &amp;lt; n; ++ k) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (r==<span class=\"number\">1</span>&amp;amp;&amp;amp;A[k][i] != A[k][j])<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(r==<span class=\"number\">0</span>&amp;amp;&amp;amp;A[i][k] != A[j][k])<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (k == n) &#123;</div><div class=\"line\">\t\t\t\t\t\t++ cnt;</div><div class=\"line\">\t\t\t\t\t\tmark[j] = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tkind /= fact[cnt];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">\t\tScanner cin=<span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n,T=cin.nextInt();</div><div class=\"line\">\t\tfact[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&amp;lt;=<span class=\"number\">10</span>;i++)fact[i]=fact[i-<span class=\"number\">1</span>]*i;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(T--&amp;gt;<span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\tn=cin.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&amp;lt;n;i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&amp;lt;n;j++)&#123;</div><div class=\"line\">\t\t\t\t\tA[i][j]=cin.nextInt();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> res=<span class=\"number\">0</span>;</div><div class=\"line\">\t\t\tMatrix matrix=<span class=\"keyword\">new</span> Matrix(n);</div><div class=\"line\">\t\t\tkind=fact[n]*fact[n];</div><div class=\"line\">\t\t\tgetKind(n);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(kind%<span class=\"number\">2</span>==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\t\tmatrix.valueOf(A, <span class=\"number\">0</span>);</div><div class=\"line\">\t\t\t\tres=res ^(matrix.Det().mod(MOD).longValue());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tmatrix.valueOf(A, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\tres=res^(matrix.Det().mod(MOD).longValue());</div><div class=\"line\">\t\t\tmatrix.valueOf(A, -<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\tres=res^(matrix.Det().mod(MOD).longValue());</div><div class=\"line\">\t\t\tSystem.out.println(res);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tcin.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Matrix</span></span>&#123;</div><div class=\"line\">\tBigInteger M[][]=<span class=\"keyword\">new</span> BigInteger[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</div><div class=\"line\">\tBigInteger ZERO,ONE;</div><div class=\"line\">\t<span class=\"keyword\">int</span> n;</div><div class=\"line\">\tMatrix(<span class=\"keyword\">int</span> n)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.n=n;</div><div class=\"line\">\t\tZERO=BigInteger.ZERO;</div><div class=\"line\">\t\tONE=BigInteger.ONE;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">int</span> A[][],<span class=\"keyword\">int</span> d)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&amp;lt;n;i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&amp;lt;n;j++)&#123;</div><div class=\"line\">\t\t\t\tM[i][j]=BigInteger.valueOf(A[i][j]+d);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\">BigInteger <span class=\"title\">Det</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tBigInteger tmp, res = ONE, div = ONE;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i, j, k;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &amp;lt; n; ++ i) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (j = i; j &amp;lt; n; ++ j) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!M[j][i].equals(ZERO)) <span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j == n) <span class=\"keyword\">return</span> ZERO;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j != i) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//res = res.negate();</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &amp;lt; n; ++ k) &#123;</div><div class=\"line\">\t\t\t\t    tmp = M[j][k];</div><div class=\"line\">\t\t\t\t\tM[j][k] = M[i][k];</div><div class=\"line\">\t\t\t\t\tM[i][k] = tmp;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tres = res.multiply(M[i][i]);</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (j = i + <span class=\"number\">1</span>; j &amp;lt; n; ++ j) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (M[j][i].equals(ZERO)) <span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t\tdiv = div.multiply(M[i][i]);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (k = i + <span class=\"number\">1</span>; k &amp;lt; n; ++ k) &#123;</div><div class=\"line\">\t\t\t\t\tM[j][k] = M[j][k].multiply(M[i][i]).subtract(M[i][k].multiply(M[j][i]));</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tres = res.divide(div);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (res.compareTo(ZERO) &amp;lt; <span class=\"number\">0</span>) res = res.negate();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> res;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p></pre></p>"},{"title":"Hexo折腾笔记（一）博客加速以及instantclick的兼容","date":"2015-02-25T12:18:23.000Z","toc":true,"_content":"\n~~首先，Gitcafe的国内速度已经够快了，加不加速其实没多大区别,只不过是闲的蛋疼而已。~~\nGitcafe无故page不更新，所以又换回了github。\n\n## Hexo加速\nHexo加速可以有以下几个方面：\n1. 使用[BootCDN](http://www.bootcdn.cn/)并将图片等资源储存至七牛云。可以使用此项目[click here](https://github.com/gyk001/hexo-qiniu-sync)。\n2. 使用[hexo optimize](https://github.com/FlashSoft/hexo-console-optimize)压缩优化HTML、CSS、JS、Image资源。\n3. 使用[InstantClick](http://instantclick.io/)。\n\nInstantClick是一款类似于[Turbolinks](http://instantclick.io/)的js库，利用[pjax](https://github.com/defunkt/jquery-pjax)（pushState and Ajax)技术对网站进行优化，能够极大的提高访问速度。\n\n## 解决InstantClick的兼容问题\nInstantClick效果明显，但是副作用也大。加入它之后，原来相处无碍的Fancybox、百度分享、百度统计、 mathJax、多说评论都挂了。下面是我的解决方法：\n<!--more-->\n###Fancybox\nFancybox的修复首先要避面页面切换时jquery.fancybox.min.js文件的重复加载。可以将该js文件的引用放入head中或者加入data-no-instant属性。\n然后，因为instantclick在预加载时默认只替换body元素，所以在绑定fancybox的时候需要设置parent属性为body：\n```Javascript\n(function($){\n    $('.fancybox').fancybox({parent:'body'});\n})(jQuery);\n```\n这样就应该可以了。\n###多说评论（以及最新评论、热评文章等）\n首先，多说的公共JS是不能放在加入data-no-instant属性的。因为不是网站所有页面都包含评论部分的。\n因此，我们需要将其裹入一层判断中来阻止其多次加载，提高网页的访问速度：\n```Html\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nif(typeof duoshuoQuery === 'undefined'){\n    var duoshuoQuery = {short_name:\"你的域名\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.unstable.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0]\n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n}\n</script>\n<!-- 多说公共JS代码 end -->\n```\n然后，我们需要在页面预加载的change事件里对其进行重载：\n```Html\n<script data-no-instant>\nInstantClick.on('change', function(isInitialLoad) {\n  if (isInitialLoad === false) {\n  \tif($(\".ds-thread\").length && typeof DUOSHUO !== 'undefined'){ //support 多说评论框\n  \t\tDUOSHUO.EmbedThread($('.ds-thread')[0]);\n  \t}\n  }\n});\nInstantClick.init();\n</script>\n```\n可以用同样的方式解决多说的热门文章、最新评论等插件的问题。DUOSHUO全部的重载函数有：`\"EmbedThread\", \"RecentComments\", \"RecentVisitors\", \"TopUsers\", \"TopThreads\", \"LoginWidget\", \"ThreadCount\"`\n\n###百度统计、google统计、MathJax\n这三个可以参考这篇文章：[click here](http://zhiqiang.org/blog/it/instantclick-support-mathjax-baidu-stat.html)。同样是在change事件里对他们进行重新加载。\n```Javascript\nInstantClick.on('change', function(isInitialLoad) {\n  if (isInitialLoad === false) {\n    if (typeof MathJax !== 'undefined') // support MathJax\n      MathJax.Hub.Queue([\"Typeset\",MathJax.Hub]);\n    if (typeof prettyPrint !== 'undefined') // support google code prettify\n      prettyPrint();\n    if (typeof _hmt !== 'undefined')  // support 百度统计\n      _hmt.push(['_trackPageview', location.pathname + location.search]);\n    if (typeof ga !== 'undefined')  // support google analytics\n        ga('send', 'pageview', location.pathname + location.search);\n  }\n});\n```\n\n###百度分享\n百度分享可以用[jiathis](http://www.jiathis.com/)代替，其实国内的分享工具都差不多。\n\n##关于data-no-instant属性\ndata-no-instant属性是用来避免instantclick在页面切换时对该元素重复加载。可以用在script、style标签中，也能放在a标签中，表示该链接将使用正常方式打开而不用instantclick加速。\n\ndata-no-intant无法阻止对div等元素的重新加载，因此无法实现像网易云音乐那样在切换页面的时候无间断的播放音乐等功能。不过曾有人contribute过类似的功能，但是作者没有接受：[click here](https://github.com/dieulot/instantclick/pull/108)。\n\n\n<br/>\n至此全部问题解决了，其他的问题可以参考下面几个链接：\n- [整合 InstantClick 與 AddThis](http://shinychang.net/article/544b6c3578cf49f90fc204d7)\n- [Hexo 静态博客加速](http://lukang.me/2014/hexo-page-speed.html)\n- [fancybox文档](http://fancyapps.com/fancybox/#docs)\n- [InstantClick文档](http://instantclick.io/documentation)\n","source":"_posts/hexo-speedup-instantclick.md","raw":"title: Hexo折腾笔记（一）博客加速以及instantclick的兼容\ndate: 2015-02-25 20:18:23\ntags: [html,instantclick]\ncategories: Hexo\ntoc: true\n---\n\n~~首先，Gitcafe的国内速度已经够快了，加不加速其实没多大区别,只不过是闲的蛋疼而已。~~\nGitcafe无故page不更新，所以又换回了github。\n\n## Hexo加速\nHexo加速可以有以下几个方面：\n1. 使用[BootCDN](http://www.bootcdn.cn/)并将图片等资源储存至七牛云。可以使用此项目[click here](https://github.com/gyk001/hexo-qiniu-sync)。\n2. 使用[hexo optimize](https://github.com/FlashSoft/hexo-console-optimize)压缩优化HTML、CSS、JS、Image资源。\n3. 使用[InstantClick](http://instantclick.io/)。\n\nInstantClick是一款类似于[Turbolinks](http://instantclick.io/)的js库，利用[pjax](https://github.com/defunkt/jquery-pjax)（pushState and Ajax)技术对网站进行优化，能够极大的提高访问速度。\n\n## 解决InstantClick的兼容问题\nInstantClick效果明显，但是副作用也大。加入它之后，原来相处无碍的Fancybox、百度分享、百度统计、 mathJax、多说评论都挂了。下面是我的解决方法：\n<!--more-->\n###Fancybox\nFancybox的修复首先要避面页面切换时jquery.fancybox.min.js文件的重复加载。可以将该js文件的引用放入head中或者加入data-no-instant属性。\n然后，因为instantclick在预加载时默认只替换body元素，所以在绑定fancybox的时候需要设置parent属性为body：\n```Javascript\n(function($){\n    $('.fancybox').fancybox({parent:'body'});\n})(jQuery);\n```\n这样就应该可以了。\n###多说评论（以及最新评论、热评文章等）\n首先，多说的公共JS是不能放在加入data-no-instant属性的。因为不是网站所有页面都包含评论部分的。\n因此，我们需要将其裹入一层判断中来阻止其多次加载，提高网页的访问速度：\n```Html\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nif(typeof duoshuoQuery === 'undefined'){\n    var duoshuoQuery = {short_name:\"你的域名\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.unstable.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0]\n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n}\n</script>\n<!-- 多说公共JS代码 end -->\n```\n然后，我们需要在页面预加载的change事件里对其进行重载：\n```Html\n<script data-no-instant>\nInstantClick.on('change', function(isInitialLoad) {\n  if (isInitialLoad === false) {\n  \tif($(\".ds-thread\").length && typeof DUOSHUO !== 'undefined'){ //support 多说评论框\n  \t\tDUOSHUO.EmbedThread($('.ds-thread')[0]);\n  \t}\n  }\n});\nInstantClick.init();\n</script>\n```\n可以用同样的方式解决多说的热门文章、最新评论等插件的问题。DUOSHUO全部的重载函数有：`\"EmbedThread\", \"RecentComments\", \"RecentVisitors\", \"TopUsers\", \"TopThreads\", \"LoginWidget\", \"ThreadCount\"`\n\n###百度统计、google统计、MathJax\n这三个可以参考这篇文章：[click here](http://zhiqiang.org/blog/it/instantclick-support-mathjax-baidu-stat.html)。同样是在change事件里对他们进行重新加载。\n```Javascript\nInstantClick.on('change', function(isInitialLoad) {\n  if (isInitialLoad === false) {\n    if (typeof MathJax !== 'undefined') // support MathJax\n      MathJax.Hub.Queue([\"Typeset\",MathJax.Hub]);\n    if (typeof prettyPrint !== 'undefined') // support google code prettify\n      prettyPrint();\n    if (typeof _hmt !== 'undefined')  // support 百度统计\n      _hmt.push(['_trackPageview', location.pathname + location.search]);\n    if (typeof ga !== 'undefined')  // support google analytics\n        ga('send', 'pageview', location.pathname + location.search);\n  }\n});\n```\n\n###百度分享\n百度分享可以用[jiathis](http://www.jiathis.com/)代替，其实国内的分享工具都差不多。\n\n##关于data-no-instant属性\ndata-no-instant属性是用来避免instantclick在页面切换时对该元素重复加载。可以用在script、style标签中，也能放在a标签中，表示该链接将使用正常方式打开而不用instantclick加速。\n\ndata-no-intant无法阻止对div等元素的重新加载，因此无法实现像网易云音乐那样在切换页面的时候无间断的播放音乐等功能。不过曾有人contribute过类似的功能，但是作者没有接受：[click here](https://github.com/dieulot/instantclick/pull/108)。\n\n\n<br/>\n至此全部问题解决了，其他的问题可以参考下面几个链接：\n- [整合 InstantClick 與 AddThis](http://shinychang.net/article/544b6c3578cf49f90fc204d7)\n- [Hexo 静态博客加速](http://lukang.me/2014/hexo-page-speed.html)\n- [fancybox文档](http://fancyapps.com/fancybox/#docs)\n- [InstantClick文档](http://instantclick.io/documentation)\n","slug":"hexo-speedup-instantclick","published":1,"updated":"2016-11-23T09:58:45.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8ol0034wppv5y3el3qe","content":"<p><del>首先，Gitcafe的国内速度已经够快了，加不加速其实没多大区别,只不过是闲的蛋疼而已。</del><br>Gitcafe无故page不更新，所以又换回了github。</p>\n<h2 id=\"Hexo加速\"><a href=\"#Hexo加速\" class=\"headerlink\" title=\"Hexo加速\"></a>Hexo加速</h2><p>Hexo加速可以有以下几个方面：</p>\n<ol>\n<li>使用<a href=\"http://www.bootcdn.cn/\" target=\"_blank\" rel=\"external\">BootCDN</a>并将图片等资源储存至七牛云。可以使用此项目<a href=\"https://github.com/gyk001/hexo-qiniu-sync\" target=\"_blank\" rel=\"external\">click here</a>。</li>\n<li>使用<a href=\"https://github.com/FlashSoft/hexo-console-optimize\" target=\"_blank\" rel=\"external\">hexo optimize</a>压缩优化HTML、CSS、JS、Image资源。</li>\n<li>使用<a href=\"http://instantclick.io/\" target=\"_blank\" rel=\"external\">InstantClick</a>。</li>\n</ol>\n<p>InstantClick是一款类似于<a href=\"http://instantclick.io/\" target=\"_blank\" rel=\"external\">Turbolinks</a>的js库，利用<a href=\"https://github.com/defunkt/jquery-pjax\" target=\"_blank\" rel=\"external\">pjax</a>（pushState and Ajax)技术对网站进行优化，能够极大的提高访问速度。</p>\n<h2 id=\"解决InstantClick的兼容问题\"><a href=\"#解决InstantClick的兼容问题\" class=\"headerlink\" title=\"解决InstantClick的兼容问题\"></a>解决InstantClick的兼容问题</h2><p>InstantClick效果明显，但是副作用也大。加入它之后，原来相处无碍的Fancybox、百度分享、百度统计、 mathJax、多说评论都挂了。下面是我的解决方法：<br><a id=\"more\"></a></p>\n<p>###Fancybox<br>Fancybox的修复首先要避面页面切换时jquery.fancybox.min.js文件的重复加载。可以将该js文件的引用放入head中或者加入data-no-instant属性。<br>然后，因为instantclick在预加载时默认只替换body元素，所以在绑定fancybox的时候需要设置parent属性为body：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'.fancybox'</span>).fancybox(&#123;parent:<span class=\"string\">'body'</span>&#125;);</div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>这样就应该可以了。</p>\n<p>###多说评论（以及最新评论、热评文章等）<br>首先，多说的公共JS是不能放在加入data-no-instant属性的。因为不是网站所有页面都包含评论部分的。<br>因此，我们需要将其裹入一层判断中来阻止其多次加载，提高网页的访问速度：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> duoshuoQuery === <span class=\"string\">'undefined'</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> duoshuoQuery = &#123;short_name:<span class=\"string\">\"你的域名\"</span>&#125;;</div><div class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> ds = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">        ds.type = <span class=\"string\">'text/javascript'</span>;ds.async = <span class=\"literal\">true</span>;</div><div class=\"line\">        ds.src = (<span class=\"built_in\">document</span>.location.protocol == <span class=\"string\">'https:'</span> ? <span class=\"string\">'https:'</span> : <span class=\"string\">'http:'</span>) + <span class=\"string\">'//static.duoshuo.com/embed.unstable.js'</span>;</div><div class=\"line\">        ds.charset = <span class=\"string\">'UTF-8'</span>;</div><div class=\"line\">        (<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>]</div><div class=\"line\">         || <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>]).appendChild(ds);</div><div class=\"line\">    &#125;)();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 多说公共JS代码 end --&gt;</span></div></pre></td></tr></table></figure></p>\n<p>然后，我们需要在页面预加载的change事件里对其进行重载：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">data-no-instant</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">InstantClick.on(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isInitialLoad</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isInitialLoad === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">  \t<span class=\"keyword\">if</span>($(<span class=\"string\">\".ds-thread\"</span>).length &amp;&amp; <span class=\"keyword\">typeof</span> DUOSHUO !== <span class=\"string\">'undefined'</span>)&#123; <span class=\"comment\">//support 多说评论框</span></div><div class=\"line\">  \t\tDUOSHUO.EmbedThread($(<span class=\"string\">'.ds-thread'</span>)[<span class=\"number\">0</span>]);</div><div class=\"line\">  \t&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">InstantClick.init();</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>可以用同样的方式解决多说的热门文章、最新评论等插件的问题。DUOSHUO全部的重载函数有：<code>&quot;EmbedThread&quot;, &quot;RecentComments&quot;, &quot;RecentVisitors&quot;, &quot;TopUsers&quot;, &quot;TopThreads&quot;, &quot;LoginWidget&quot;, &quot;ThreadCount&quot;</code></p>\n<p>###百度统计、google统计、MathJax<br>这三个可以参考这篇文章：<a href=\"http://zhiqiang.org/blog/it/instantclick-support-mathjax-baidu-stat.html\" target=\"_blank\" rel=\"external\">click here</a>。同样是在change事件里对他们进行重新加载。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">InstantClick.on(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isInitialLoad</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isInitialLoad === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> MathJax !== <span class=\"string\">'undefined'</span>) <span class=\"comment\">// support MathJax</span></div><div class=\"line\">      MathJax.Hub.Queue([<span class=\"string\">\"Typeset\"</span>,MathJax.Hub]);</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> prettyPrint !== <span class=\"string\">'undefined'</span>) <span class=\"comment\">// support google code prettify</span></div><div class=\"line\">      prettyPrint();</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> _hmt !== <span class=\"string\">'undefined'</span>)  <span class=\"comment\">// support 百度统计</span></div><div class=\"line\">      _hmt.push([<span class=\"string\">'_trackPageview'</span>, location.pathname + location.search]);</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> ga !== <span class=\"string\">'undefined'</span>)  <span class=\"comment\">// support google analytics</span></div><div class=\"line\">        ga(<span class=\"string\">'send'</span>, <span class=\"string\">'pageview'</span>, location.pathname + location.search);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>###百度分享<br>百度分享可以用<a href=\"http://www.jiathis.com/\" target=\"_blank\" rel=\"external\">jiathis</a>代替，其实国内的分享工具都差不多。</p>\n<p>##关于data-no-instant属性<br>data-no-instant属性是用来避免instantclick在页面切换时对该元素重复加载。可以用在script、style标签中，也能放在a标签中，表示该链接将使用正常方式打开而不用instantclick加速。</p>\n<p>data-no-intant无法阻止对div等元素的重新加载，因此无法实现像网易云音乐那样在切换页面的时候无间断的播放音乐等功能。不过曾有人contribute过类似的功能，但是作者没有接受：<a href=\"https://github.com/dieulot/instantclick/pull/108\" target=\"_blank\" rel=\"external\">click here</a>。</p>\n<p><br><br>至此全部问题解决了，其他的问题可以参考下面几个链接：</p>\n<ul>\n<li><a href=\"http://shinychang.net/article/544b6c3578cf49f90fc204d7\" target=\"_blank\" rel=\"external\">整合 InstantClick 與 AddThis</a></li>\n<li><a href=\"http://lukang.me/2014/hexo-page-speed.html\" target=\"_blank\" rel=\"external\">Hexo 静态博客加速</a></li>\n<li><a href=\"http://fancyapps.com/fancybox/#docs\" target=\"_blank\" rel=\"external\">fancybox文档</a></li>\n<li><a href=\"http://instantclick.io/documentation\" target=\"_blank\" rel=\"external\">InstantClick文档</a></li>\n</ul>\n","excerpt":"<p><del>首先，Gitcafe的国内速度已经够快了，加不加速其实没多大区别,只不过是闲的蛋疼而已。</del><br>Gitcafe无故page不更新，所以又换回了github。</p>\n<h2 id=\"Hexo加速\"><a href=\"#Hexo加速\" class=\"headerlink\" title=\"Hexo加速\"></a>Hexo加速</h2><p>Hexo加速可以有以下几个方面：</p>\n<ol>\n<li>使用<a href=\"http://www.bootcdn.cn/\">BootCDN</a>并将图片等资源储存至七牛云。可以使用此项目<a href=\"https://github.com/gyk001/hexo-qiniu-sync\">click here</a>。</li>\n<li>使用<a href=\"https://github.com/FlashSoft/hexo-console-optimize\">hexo optimize</a>压缩优化HTML、CSS、JS、Image资源。</li>\n<li>使用<a href=\"http://instantclick.io/\">InstantClick</a>。</li>\n</ol>\n<p>InstantClick是一款类似于<a href=\"http://instantclick.io/\">Turbolinks</a>的js库，利用<a href=\"https://github.com/defunkt/jquery-pjax\">pjax</a>（pushState and Ajax)技术对网站进行优化，能够极大的提高访问速度。</p>\n<h2 id=\"解决InstantClick的兼容问题\"><a href=\"#解决InstantClick的兼容问题\" class=\"headerlink\" title=\"解决InstantClick的兼容问题\"></a>解决InstantClick的兼容问题</h2><p>InstantClick效果明显，但是副作用也大。加入它之后，原来相处无碍的Fancybox、百度分享、百度统计、 mathJax、多说评论都挂了。下面是我的解决方法：<br>","more":"</p>\n<p>###Fancybox<br>Fancybox的修复首先要避面页面切换时jquery.fancybox.min.js文件的重复加载。可以将该js文件的引用放入head中或者加入data-no-instant属性。<br>然后，因为instantclick在预加载时默认只替换body元素，所以在绑定fancybox的时候需要设置parent属性为body：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'.fancybox'</span>).fancybox(&#123;parent:<span class=\"string\">'body'</span>&#125;);</div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>这样就应该可以了。</p>\n<p>###多说评论（以及最新评论、热评文章等）<br>首先，多说的公共JS是不能放在加入data-no-instant属性的。因为不是网站所有页面都包含评论部分的。<br>因此，我们需要将其裹入一层判断中来阻止其多次加载，提高网页的访问速度：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> duoshuoQuery === <span class=\"string\">'undefined'</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> duoshuoQuery = &#123;short_name:<span class=\"string\">\"你的域名\"</span>&#125;;</div><div class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> ds = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">        ds.type = <span class=\"string\">'text/javascript'</span>;ds.async = <span class=\"literal\">true</span>;</div><div class=\"line\">        ds.src = (<span class=\"built_in\">document</span>.location.protocol == <span class=\"string\">'https:'</span> ? <span class=\"string\">'https:'</span> : <span class=\"string\">'http:'</span>) + <span class=\"string\">'//static.duoshuo.com/embed.unstable.js'</span>;</div><div class=\"line\">        ds.charset = <span class=\"string\">'UTF-8'</span>;</div><div class=\"line\">        (<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>]</div><div class=\"line\">         || <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>]).appendChild(ds);</div><div class=\"line\">    &#125;)();</div><div class=\"line\">&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 多说公共JS代码 end --&gt;</span></div></pre></td></tr></table></figure></p>\n<p>然后，我们需要在页面预加载的change事件里对其进行重载：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">data-no-instant</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">InstantClick.on(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isInitialLoad</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isInitialLoad === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">  \t<span class=\"keyword\">if</span>($(<span class=\"string\">\".ds-thread\"</span>).length &amp;&amp; <span class=\"keyword\">typeof</span> DUOSHUO !== <span class=\"string\">'undefined'</span>)&#123; <span class=\"comment\">//support 多说评论框</span></div><div class=\"line\">  \t\tDUOSHUO.EmbedThread($(<span class=\"string\">'.ds-thread'</span>)[<span class=\"number\">0</span>]);</div><div class=\"line\">  \t&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">InstantClick.init();</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>可以用同样的方式解决多说的热门文章、最新评论等插件的问题。DUOSHUO全部的重载函数有：<code>&quot;EmbedThread&quot;, &quot;RecentComments&quot;, &quot;RecentVisitors&quot;, &quot;TopUsers&quot;, &quot;TopThreads&quot;, &quot;LoginWidget&quot;, &quot;ThreadCount&quot;</code></p>\n<p>###百度统计、google统计、MathJax<br>这三个可以参考这篇文章：<a href=\"http://zhiqiang.org/blog/it/instantclick-support-mathjax-baidu-stat.html\">click here</a>。同样是在change事件里对他们进行重新加载。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">InstantClick.on(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isInitialLoad</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isInitialLoad === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> MathJax !== <span class=\"string\">'undefined'</span>) <span class=\"comment\">// support MathJax</span></div><div class=\"line\">      MathJax.Hub.Queue([<span class=\"string\">\"Typeset\"</span>,MathJax.Hub]);</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> prettyPrint !== <span class=\"string\">'undefined'</span>) <span class=\"comment\">// support google code prettify</span></div><div class=\"line\">      prettyPrint();</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> _hmt !== <span class=\"string\">'undefined'</span>)  <span class=\"comment\">// support 百度统计</span></div><div class=\"line\">      _hmt.push([<span class=\"string\">'_trackPageview'</span>, location.pathname + location.search]);</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> ga !== <span class=\"string\">'undefined'</span>)  <span class=\"comment\">// support google analytics</span></div><div class=\"line\">        ga(<span class=\"string\">'send'</span>, <span class=\"string\">'pageview'</span>, location.pathname + location.search);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>###百度分享<br>百度分享可以用<a href=\"http://www.jiathis.com/\">jiathis</a>代替，其实国内的分享工具都差不多。</p>\n<p>##关于data-no-instant属性<br>data-no-instant属性是用来避免instantclick在页面切换时对该元素重复加载。可以用在script、style标签中，也能放在a标签中，表示该链接将使用正常方式打开而不用instantclick加速。</p>\n<p>data-no-intant无法阻止对div等元素的重新加载，因此无法实现像网易云音乐那样在切换页面的时候无间断的播放音乐等功能。不过曾有人contribute过类似的功能，但是作者没有接受：<a href=\"https://github.com/dieulot/instantclick/pull/108\">click here</a>。</p>\n<p><br/><br>至此全部问题解决了，其他的问题可以参考下面几个链接：</p>\n<ul>\n<li><a href=\"http://shinychang.net/article/544b6c3578cf49f90fc204d7\">整合 InstantClick 與 AddThis</a></li>\n<li><a href=\"http://lukang.me/2014/hexo-page-speed.html\">Hexo 静态博客加速</a></li>\n<li><a href=\"http://fancyapps.com/fancybox/#docs\">fancybox文档</a></li>\n<li><a href=\"http://instantclick.io/documentation\">InstantClick文档</a></li>\n</ul>"},{"title":"（转）关于卷积的一个血腥的讲解，看完给跪了","date":"2014-11-05T12:40:10.000Z","_content":"\n比如说你的老板命令你干活，你却到楼下打台球去了，后来被老板发现，他非常气愤，扇了你一巴掌（注意，这就是输入信号，脉冲），于是你的脸上会渐渐地（贱贱地）鼓起来一个包，你的脸就是一个系统，而鼓起来的包就是你的脸对巴掌的响应，好，这样就和信号系统建立起来意义对应的联系。下面还需要一些假设来保证论证的严谨：假定你的脸是线性时不变系统，也就是说，无论什么时候老板打你一巴掌，打在你脸的同一位置（这似乎要求你的脸足够光滑，如果你说你长了很多青春痘，甚至整个脸皮处处连续处处不可导，那难度太大了，我就无话可说了哈哈），你的脸上总是会在相同的时间间隔内鼓起来一个相同高度的包来，并且假定以鼓起来的包的大小作为系统输出。好了，那么，下面可以进入核心内容——卷积了！\n<!--more-->\n如果你每天都到地下去打台球，那么老板每天都要扇你一巴掌，不过当老板打你一巴掌后，你5分钟就消肿了，所以时间长了，你甚至就适应这种生活了……如果有一天，老板忍无可忍，以0.5秒的间隔开始不间断的扇你的过程，这样问题就来了，第一次扇你鼓起来的包还没消肿，第二个巴掌就来了，你脸上的包就可能鼓起来两倍高，老板不断扇你，脉冲不断作用在你脸上，效果不断叠加了，这样这些效果就可以求和了，结果就是你脸上的包的高度随时间变化的一个函数了（注意理解）；如果老板再狠一点，频率越来越高，以至于你都辨别不清时间间隔了，那么，求和就变成积分了。可以这样理解，在这个过程中的某一固定的时刻，你的脸上的包的鼓起程度和什么有关呢？和之前每次打你都有关！但是各次的贡献是不一样的，越早打的巴掌，贡献越小，所以这就是说，某一时刻的输出是之前很多次输入乘以各自的衰减系数之后的叠加而形成某一点的输出，然后再把不同时刻的输出点放在一起，形成一个函数，这就是卷积，卷积之后的函数就是你脸上的包的大小随时间变化的函数。本来你的包几分钟就可以消肿，可是如果连续打，几个小时也消不了肿了，这难道不是一种平滑过程么？反映到剑桥大学的公式上，f(a)就是第a个巴掌，g(x-a)就是第a个巴掌在x时刻的作用程度，乘起来再叠加就ok了，大家说是不是这个道理呢？我想这个例子已经非常形象了，你对卷积有了更加具体深刻的了解了吗？\n\n转自GSDzone论坛\n\n![](http://2.im.guokr.com/V5QXaMJ7D6dpiGXPGmBsKoRQe9QYz0KIMf1yyJp_D7_PAAAAnAAAAEdJ.gif)","source":"_posts/intro-of-fft.md","raw":"title: （转）关于卷积的一个血腥的讲解，看完给跪了\ncategories:\n  - ACM\ndate: 2014-11-05 20:40:10\ntags: [数论,只言片语]\n---\n\n比如说你的老板命令你干活，你却到楼下打台球去了，后来被老板发现，他非常气愤，扇了你一巴掌（注意，这就是输入信号，脉冲），于是你的脸上会渐渐地（贱贱地）鼓起来一个包，你的脸就是一个系统，而鼓起来的包就是你的脸对巴掌的响应，好，这样就和信号系统建立起来意义对应的联系。下面还需要一些假设来保证论证的严谨：假定你的脸是线性时不变系统，也就是说，无论什么时候老板打你一巴掌，打在你脸的同一位置（这似乎要求你的脸足够光滑，如果你说你长了很多青春痘，甚至整个脸皮处处连续处处不可导，那难度太大了，我就无话可说了哈哈），你的脸上总是会在相同的时间间隔内鼓起来一个相同高度的包来，并且假定以鼓起来的包的大小作为系统输出。好了，那么，下面可以进入核心内容——卷积了！\n<!--more-->\n如果你每天都到地下去打台球，那么老板每天都要扇你一巴掌，不过当老板打你一巴掌后，你5分钟就消肿了，所以时间长了，你甚至就适应这种生活了……如果有一天，老板忍无可忍，以0.5秒的间隔开始不间断的扇你的过程，这样问题就来了，第一次扇你鼓起来的包还没消肿，第二个巴掌就来了，你脸上的包就可能鼓起来两倍高，老板不断扇你，脉冲不断作用在你脸上，效果不断叠加了，这样这些效果就可以求和了，结果就是你脸上的包的高度随时间变化的一个函数了（注意理解）；如果老板再狠一点，频率越来越高，以至于你都辨别不清时间间隔了，那么，求和就变成积分了。可以这样理解，在这个过程中的某一固定的时刻，你的脸上的包的鼓起程度和什么有关呢？和之前每次打你都有关！但是各次的贡献是不一样的，越早打的巴掌，贡献越小，所以这就是说，某一时刻的输出是之前很多次输入乘以各自的衰减系数之后的叠加而形成某一点的输出，然后再把不同时刻的输出点放在一起，形成一个函数，这就是卷积，卷积之后的函数就是你脸上的包的大小随时间变化的函数。本来你的包几分钟就可以消肿，可是如果连续打，几个小时也消不了肿了，这难道不是一种平滑过程么？反映到剑桥大学的公式上，f(a)就是第a个巴掌，g(x-a)就是第a个巴掌在x时刻的作用程度，乘起来再叠加就ok了，大家说是不是这个道理呢？我想这个例子已经非常形象了，你对卷积有了更加具体深刻的了解了吗？\n\n转自GSDzone论坛\n\n![](http://2.im.guokr.com/V5QXaMJ7D6dpiGXPGmBsKoRQe9QYz0KIMf1yyJp_D7_PAAAAnAAAAEdJ.gif)","slug":"intro-of-fft","published":1,"updated":"2015-02-26T02:52:11.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8on0037wppvjzf3lxjb","content":"<p>比如说你的老板命令你干活，你却到楼下打台球去了，后来被老板发现，他非常气愤，扇了你一巴掌（注意，这就是输入信号，脉冲），于是你的脸上会渐渐地（贱贱地）鼓起来一个包，你的脸就是一个系统，而鼓起来的包就是你的脸对巴掌的响应，好，这样就和信号系统建立起来意义对应的联系。下面还需要一些假设来保证论证的严谨：假定你的脸是线性时不变系统，也就是说，无论什么时候老板打你一巴掌，打在你脸的同一位置（这似乎要求你的脸足够光滑，如果你说你长了很多青春痘，甚至整个脸皮处处连续处处不可导，那难度太大了，我就无话可说了哈哈），你的脸上总是会在相同的时间间隔内鼓起来一个相同高度的包来，并且假定以鼓起来的包的大小作为系统输出。好了，那么，下面可以进入核心内容——卷积了！<br><a id=\"more\"></a><br>如果你每天都到地下去打台球，那么老板每天都要扇你一巴掌，不过当老板打你一巴掌后，你5分钟就消肿了，所以时间长了，你甚至就适应这种生活了……如果有一天，老板忍无可忍，以0.5秒的间隔开始不间断的扇你的过程，这样问题就来了，第一次扇你鼓起来的包还没消肿，第二个巴掌就来了，你脸上的包就可能鼓起来两倍高，老板不断扇你，脉冲不断作用在你脸上，效果不断叠加了，这样这些效果就可以求和了，结果就是你脸上的包的高度随时间变化的一个函数了（注意理解）；如果老板再狠一点，频率越来越高，以至于你都辨别不清时间间隔了，那么，求和就变成积分了。可以这样理解，在这个过程中的某一固定的时刻，你的脸上的包的鼓起程度和什么有关呢？和之前每次打你都有关！但是各次的贡献是不一样的，越早打的巴掌，贡献越小，所以这就是说，某一时刻的输出是之前很多次输入乘以各自的衰减系数之后的叠加而形成某一点的输出，然后再把不同时刻的输出点放在一起，形成一个函数，这就是卷积，卷积之后的函数就是你脸上的包的大小随时间变化的函数。本来你的包几分钟就可以消肿，可是如果连续打，几个小时也消不了肿了，这难道不是一种平滑过程么？反映到剑桥大学的公式上，f(a)就是第a个巴掌，g(x-a)就是第a个巴掌在x时刻的作用程度，乘起来再叠加就ok了，大家说是不是这个道理呢？我想这个例子已经非常形象了，你对卷积有了更加具体深刻的了解了吗？</p>\n<p>转自GSDzone论坛</p>\n<p><img src=\"http://2.im.guokr.com/V5QXaMJ7D6dpiGXPGmBsKoRQe9QYz0KIMf1yyJp_D7_PAAAAnAAAAEdJ.gif\" alt=\"\"></p>\n","excerpt":"<p>比如说你的老板命令你干活，你却到楼下打台球去了，后来被老板发现，他非常气愤，扇了你一巴掌（注意，这就是输入信号，脉冲），于是你的脸上会渐渐地（贱贱地）鼓起来一个包，你的脸就是一个系统，而鼓起来的包就是你的脸对巴掌的响应，好，这样就和信号系统建立起来意义对应的联系。下面还需要一些假设来保证论证的严谨：假定你的脸是线性时不变系统，也就是说，无论什么时候老板打你一巴掌，打在你脸的同一位置（这似乎要求你的脸足够光滑，如果你说你长了很多青春痘，甚至整个脸皮处处连续处处不可导，那难度太大了，我就无话可说了哈哈），你的脸上总是会在相同的时间间隔内鼓起来一个相同高度的包来，并且假定以鼓起来的包的大小作为系统输出。好了，那么，下面可以进入核心内容——卷积了！<br>","more":"<br>如果你每天都到地下去打台球，那么老板每天都要扇你一巴掌，不过当老板打你一巴掌后，你5分钟就消肿了，所以时间长了，你甚至就适应这种生活了……如果有一天，老板忍无可忍，以0.5秒的间隔开始不间断的扇你的过程，这样问题就来了，第一次扇你鼓起来的包还没消肿，第二个巴掌就来了，你脸上的包就可能鼓起来两倍高，老板不断扇你，脉冲不断作用在你脸上，效果不断叠加了，这样这些效果就可以求和了，结果就是你脸上的包的高度随时间变化的一个函数了（注意理解）；如果老板再狠一点，频率越来越高，以至于你都辨别不清时间间隔了，那么，求和就变成积分了。可以这样理解，在这个过程中的某一固定的时刻，你的脸上的包的鼓起程度和什么有关呢？和之前每次打你都有关！但是各次的贡献是不一样的，越早打的巴掌，贡献越小，所以这就是说，某一时刻的输出是之前很多次输入乘以各自的衰减系数之后的叠加而形成某一点的输出，然后再把不同时刻的输出点放在一起，形成一个函数，这就是卷积，卷积之后的函数就是你脸上的包的大小随时间变化的函数。本来你的包几分钟就可以消肿，可是如果连续打，几个小时也消不了肿了，这难道不是一种平滑过程么？反映到剑桥大学的公式上，f(a)就是第a个巴掌，g(x-a)就是第a个巴掌在x时刻的作用程度，乘起来再叠加就ok了，大家说是不是这个道理呢？我想这个例子已经非常形象了，你对卷积有了更加具体深刻的了解了吗？</p>\n<p>转自GSDzone论坛</p>\n<p><img src=\"http://2.im.guokr.com/V5QXaMJ7D6dpiGXPGmBsKoRQe9QYz0KIMf1yyJp_D7_PAAAAnAAAAEdJ.gif\" alt=\"\"></p>"},{"title":"HDU4005 The war","date":"2014-07-30T11:50:40.000Z","_content":"\n**<span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65768/65768 K (Java/Others)\nTotal Submission(s): 1992    Accepted Submission(s): 440\n</span>**\n<div class=\"panel_title\" align=\"left\">Problem Description</div>\n<div class=\"panel_content\">In the war, the intelligence about the enemy is very important. Now, our troop has mastered the situation of the enemy's war zones, and known that these war zones can communicate to each other directly or indirectly through the network. We also know the enemy is going to build a new communication line to strengthen their communication network. Our task is to destroy their communication network, so that some of their war zones can't communicate. Each line has its \"cost of destroy\". If we want to destroy a line, we must spend the \"cost of destroy\" of this line. We want to finish this task using the least cost, but our enemy is very clever. Now, we know the network they have already built, but we know nothing about the new line which our enemy is going to build. In this condition, your task is to find the minimum cost that no matter where our enemy builds the new line, you can destroy it using the fixed money. Please give the minimum cost. For efficiency, we can only destroy one communication line.</div>\n<!--more-->\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Input</div>\n<div class=\"panel_content\">The input contains several cases. For each cases, the first line contains two positive integers n, m (1&lt;=n&lt;=10000, 0&lt;=m&lt;=100000) standing for the number of the enemy's war zones (numbered from 1 to n), and the number of lines that our enemy has already build. Then m lines follow. For each line there are three positive integer a, b, c (1&lt;=a, b&lt;=n, 1&lt;=c&lt;=100000), meaning between war zone A and war zone B there is a communication line with the \"cost of destroy \" c.</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Output</div>\n<div class=\"panel_content\">For each case, if the task can be finished output the minimum cost, or output ‐1.</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Input</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">3 2 1 2 1 2 3 2 4 3 1 2 1 1 3 2 1 4 3</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Output</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">-1 3\n<div style=\"font-family: Times New Roman; font-size: 14px; background-color: f4fbff; border: #B7CBFF 1px dashed; padding: 6px;\">\n<div style=\"font-family: Arial; font-weight: bold; color: #7ca9ed; border-bottom: #B7CBFF 1px dashed;\">_Hint_</div>\nFor the second sample input: our enemy may build line 2 to 3, 2 to 4, 3 to 4\\. If they build line 2 to 3, we will destroy line 1 to 4, cost 3\\. If they build line 2 to 4, we will destroy line 1 to 3, cost 2\\. If they build line 3 to 4, we will destroy line 1 to 2, cost 1\\. So, if we want to make sure that we can destroy successfully, the minimum cost is 3.\n\n</div>\n&nbsp;\n\n</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Source</div>\n<div class=\"panel_content\">[ The 36th ACM/ICPC Asia Regional Dalian Site —— Online Contest ](http://acm.hdu.edu.cn/search.php?field=problem&amp;key=The%2036th%20ACM/ICPC%20Asia%20Regional%20Dalian%20Site%20%E2%80%94%E2%80%94%20Online%20Contest&amp;source=1&amp;searchmode=source)</div>\n<div class=\"panel_content\"></div>\n<div class=\"panel_content\"></div>\n<div class=\"panel_content\">求无向图边双连通分量缩点，然后DP求第二长边。</div>\n<div class=\"panel_content\">\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"null\">//#pragma comment(linker, \"/STACK:1024000000,1024000000\")//C++加栈\n#include\n#include\n#include\n#include\n#include\n#include\n#include\n#include<map>\n#include\n#include\n#include\nusing namespace std;\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\n#define N 10005\n#define M 100005\nint n, m;\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\nstruct edge {\n\tint v, w, nxt;\n\tbool mark;\n} e[M &lt;&lt; 1];\nstruct bridge {\n\tint u, v, w;\n\tbridge(int u, int v, int w) {\n\t\tthis-&gt;u = u;\n\t\tthis-&gt;w = w;\n\t\tthis-&gt;v = v;\n\t}\n};\nint pos, head[N];\nint top, stk[N];\nint pre[N], dfs_clock, belong[N], bcnt;\nvector brg;\nvoid InitEdge() {\n\tmemset(head, -1, sizeof(head));\n\tpos = 0;\n}\nvoid add(int u, int v, int w) {\n\te[pos].v = v;\n\te[pos].w = w;\n\te[pos].nxt = head[u];\n\thead[u] = pos++;\n}\nint dfs(int u,int fa) {\n\tint lowu = pre[u] = ++dfs_clock;\n\tstk[top++] = u;\n\tbool vis=true;\n\tfor (int i = head[u]; ~i; i = e[i].nxt) {\n\t\tint v = e[i].v;\n\t\tif(v==fa &amp;&amp; vis){\n\t\t\tvis=false;//重边\n\t\t\tcontinue;\n\t\t}\n\t\tif (!pre[v]) {\n\t\t\tint lowv = dfs(v,u);\n\t\t\tlowu = min(lowu, lowv);\n\t\t\tif (lowv &gt; pre[u]) { //u-v为桥\n\t\t\t\tbrg.push_back(bridge(u, v, e[i].w));\n\t\t\t}\n\t\t} else lowu = min(lowu, pre[v]);\n\t}\n\tif (pre[u] == lowu) {\n\t\tbcnt++;\n\t\tdo {\n\t\t\tbelong[stk[--top]] = bcnt;\n\t\t} while (stk[top] != u);\n\t}\n\treturn lowu;\n}\nvoid tarjan() {\n\ttop = bcnt = dfs_clock = 0;\n\tmemset(pre, 0, sizeof(pre));\n\tmemset(belong, 0, sizeof(belong));\n\tbrg.clear();\n\tfor (int i = 1; i &lt;= n; i++) {\n\t\tif (!pre[i])dfs(i,-1);\n\t}\n}\nvoid rebuild() { //根据桥来缩点重构图\n\tInitEdge();\n\tfor (int i = 0; i &lt; (int) brg.size(); i++) {\n\t\tint u = belong[brg[i].u];\n\t\tint v = belong[brg[i].v];\n\t\tint w = brg[i].w;\n\t\tadd(u, v, w);\n\t\tadd(v, u, w);\n\t}\n}\nint res;\nint DP(int u, int fa) {\n\tint Min = inf;\n\tfor (int i = head[u]; ~i; i = e[i].nxt) {\n\t\tint v = e[i].v;\n\t\tif (v == fa)continue;\n\t\tint w = DP(v, u);\n\t\tw = min(w, e[i].w);\n\t\tif (Min &gt; w) {\n\t\t\tres = min(res, Min);\n\t\t\tMin = w;\n\t\t} else res = min(res, w);\n\t}\n\treturn Min;\n}\nint main() {\n\twhile (~scanf(\"%d%d\", &amp;n, &amp;m)) {\n\t\tint u, v, w;\n\t\tInitEdge();\n\t\tfor (int i = 0; i &lt; m; i++) {\n\t\t\tscanf(\"%d%d%d\", &amp;u, &amp;v, &amp;w);\n\t\t\tadd(u, v, w);\n\t\t\tadd(v, u, w);\n\t\t}\n\t\ttarjan();\n\t\trebuild();\n\t\tbridge minbrg(-1, -1, inf);\n\t\tfor (int i = 0; i &lt; (int) brg.size(); i++) {\n\t\t\tif (brg[i].w &lt; minbrg.w) {\n\t\t\t\tminbrg = brg[i];\n\t\t\t}\n\t\t}\n\t\tres = inf;\n\t\tDP(belong[minbrg.u], belong[minbrg.v]);\n\t\tDP(belong[minbrg.v], belong[minbrg.u]);\n\t\tif(res==inf)res=-1;\n\t\tprintf(\"%d\\n\", res);\n\t}\n}\n</pre>\n</div>","source":"_posts/hdu4005-the-war.md","raw":"title: HDU4005 The war\ntags:\n  - tarjan\n  - 树形DP\n  - 图论\ncategories: ACM\ndate: 2014-07-30 19:50:40\n---\n\n**<span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65768/65768 K (Java/Others)\nTotal Submission(s): 1992    Accepted Submission(s): 440\n</span>**\n<div class=\"panel_title\" align=\"left\">Problem Description</div>\n<div class=\"panel_content\">In the war, the intelligence about the enemy is very important. Now, our troop has mastered the situation of the enemy's war zones, and known that these war zones can communicate to each other directly or indirectly through the network. We also know the enemy is going to build a new communication line to strengthen their communication network. Our task is to destroy their communication network, so that some of their war zones can't communicate. Each line has its \"cost of destroy\". If we want to destroy a line, we must spend the \"cost of destroy\" of this line. We want to finish this task using the least cost, but our enemy is very clever. Now, we know the network they have already built, but we know nothing about the new line which our enemy is going to build. In this condition, your task is to find the minimum cost that no matter where our enemy builds the new line, you can destroy it using the fixed money. Please give the minimum cost. For efficiency, we can only destroy one communication line.</div>\n<!--more-->\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Input</div>\n<div class=\"panel_content\">The input contains several cases. For each cases, the first line contains two positive integers n, m (1&lt;=n&lt;=10000, 0&lt;=m&lt;=100000) standing for the number of the enemy's war zones (numbered from 1 to n), and the number of lines that our enemy has already build. Then m lines follow. For each line there are three positive integer a, b, c (1&lt;=a, b&lt;=n, 1&lt;=c&lt;=100000), meaning between war zone A and war zone B there is a communication line with the \"cost of destroy \" c.</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Output</div>\n<div class=\"panel_content\">For each case, if the task can be finished output the minimum cost, or output ‐1.</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Input</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">3 2 1 2 1 2 3 2 4 3 1 2 1 1 3 2 1 4 3</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Sample Output</div>\n<div class=\"panel_content\">\n<div style=\"font-family: Courier New,Courier,monospace;\">-1 3\n<div style=\"font-family: Times New Roman; font-size: 14px; background-color: f4fbff; border: #B7CBFF 1px dashed; padding: 6px;\">\n<div style=\"font-family: Arial; font-weight: bold; color: #7ca9ed; border-bottom: #B7CBFF 1px dashed;\">_Hint_</div>\nFor the second sample input: our enemy may build line 2 to 3, 2 to 4, 3 to 4\\. If they build line 2 to 3, we will destroy line 1 to 4, cost 3\\. If they build line 2 to 4, we will destroy line 1 to 3, cost 2\\. If they build line 3 to 4, we will destroy line 1 to 2, cost 1\\. So, if we want to make sure that we can destroy successfully, the minimum cost is 3.\n\n</div>\n&nbsp;\n\n</div>\n</div>\n<div class=\"panel_bottom\"></div>\n&nbsp;\n<div class=\"panel_title\" align=\"left\">Source</div>\n<div class=\"panel_content\">[ The 36th ACM/ICPC Asia Regional Dalian Site —— Online Contest ](http://acm.hdu.edu.cn/search.php?field=problem&amp;key=The%2036th%20ACM/ICPC%20Asia%20Regional%20Dalian%20Site%20%E2%80%94%E2%80%94%20Online%20Contest&amp;source=1&amp;searchmode=source)</div>\n<div class=\"panel_content\"></div>\n<div class=\"panel_content\"></div>\n<div class=\"panel_content\">求无向图边双连通分量缩点，然后DP求第二长边。</div>\n<div class=\"panel_content\">\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"null\">//#pragma comment(linker, \"/STACK:1024000000,1024000000\")//C++加栈\n#include\n#include\n#include\n#include\n#include\n#include\n#include\n#include<map>\n#include\n#include\n#include\nusing namespace std;\n#if defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)\n#define LL __int64\n#define LLS \"%\" \"I\" \"6\" \"4\" \"d\"\n#define LLU \"%\" \"I\" \"6\" \"4\" \"u\"\n#define LL_MAX _I64_MAX\n\n#else\n#define LL long long\n#define LLS \"%\" \"l\" \"l\" \"d\"\n#define LLU \"%\" \"l\" \"l\" \"u\"\n#define LL_MAX _I64_MAX\n#endif\n#define N 10005\n#define M 100005\nint n, m;\nconst int inf = ~0u &gt;&gt; 1;\nconst LL lnf = ~0ull &gt;&gt; 1;\nstruct edge {\n\tint v, w, nxt;\n\tbool mark;\n} e[M &lt;&lt; 1];\nstruct bridge {\n\tint u, v, w;\n\tbridge(int u, int v, int w) {\n\t\tthis-&gt;u = u;\n\t\tthis-&gt;w = w;\n\t\tthis-&gt;v = v;\n\t}\n};\nint pos, head[N];\nint top, stk[N];\nint pre[N], dfs_clock, belong[N], bcnt;\nvector brg;\nvoid InitEdge() {\n\tmemset(head, -1, sizeof(head));\n\tpos = 0;\n}\nvoid add(int u, int v, int w) {\n\te[pos].v = v;\n\te[pos].w = w;\n\te[pos].nxt = head[u];\n\thead[u] = pos++;\n}\nint dfs(int u,int fa) {\n\tint lowu = pre[u] = ++dfs_clock;\n\tstk[top++] = u;\n\tbool vis=true;\n\tfor (int i = head[u]; ~i; i = e[i].nxt) {\n\t\tint v = e[i].v;\n\t\tif(v==fa &amp;&amp; vis){\n\t\t\tvis=false;//重边\n\t\t\tcontinue;\n\t\t}\n\t\tif (!pre[v]) {\n\t\t\tint lowv = dfs(v,u);\n\t\t\tlowu = min(lowu, lowv);\n\t\t\tif (lowv &gt; pre[u]) { //u-v为桥\n\t\t\t\tbrg.push_back(bridge(u, v, e[i].w));\n\t\t\t}\n\t\t} else lowu = min(lowu, pre[v]);\n\t}\n\tif (pre[u] == lowu) {\n\t\tbcnt++;\n\t\tdo {\n\t\t\tbelong[stk[--top]] = bcnt;\n\t\t} while (stk[top] != u);\n\t}\n\treturn lowu;\n}\nvoid tarjan() {\n\ttop = bcnt = dfs_clock = 0;\n\tmemset(pre, 0, sizeof(pre));\n\tmemset(belong, 0, sizeof(belong));\n\tbrg.clear();\n\tfor (int i = 1; i &lt;= n; i++) {\n\t\tif (!pre[i])dfs(i,-1);\n\t}\n}\nvoid rebuild() { //根据桥来缩点重构图\n\tInitEdge();\n\tfor (int i = 0; i &lt; (int) brg.size(); i++) {\n\t\tint u = belong[brg[i].u];\n\t\tint v = belong[brg[i].v];\n\t\tint w = brg[i].w;\n\t\tadd(u, v, w);\n\t\tadd(v, u, w);\n\t}\n}\nint res;\nint DP(int u, int fa) {\n\tint Min = inf;\n\tfor (int i = head[u]; ~i; i = e[i].nxt) {\n\t\tint v = e[i].v;\n\t\tif (v == fa)continue;\n\t\tint w = DP(v, u);\n\t\tw = min(w, e[i].w);\n\t\tif (Min &gt; w) {\n\t\t\tres = min(res, Min);\n\t\t\tMin = w;\n\t\t} else res = min(res, w);\n\t}\n\treturn Min;\n}\nint main() {\n\twhile (~scanf(\"%d%d\", &amp;n, &amp;m)) {\n\t\tint u, v, w;\n\t\tInitEdge();\n\t\tfor (int i = 0; i &lt; m; i++) {\n\t\t\tscanf(\"%d%d%d\", &amp;u, &amp;v, &amp;w);\n\t\t\tadd(u, v, w);\n\t\t\tadd(v, u, w);\n\t\t}\n\t\ttarjan();\n\t\trebuild();\n\t\tbridge minbrg(-1, -1, inf);\n\t\tfor (int i = 0; i &lt; (int) brg.size(); i++) {\n\t\t\tif (brg[i].w &lt; minbrg.w) {\n\t\t\t\tminbrg = brg[i];\n\t\t\t}\n\t\t}\n\t\tres = inf;\n\t\tDP(belong[minbrg.u], belong[minbrg.v]);\n\t\tDP(belong[minbrg.v], belong[minbrg.u]);\n\t\tif(res==inf)res=-1;\n\t\tprintf(\"%d\\n\", res);\n\t}\n}\n</pre>\n</div>","slug":"hdu4005-the-war","published":1,"updated":"2015-02-26T02:45:32.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixx6u8op003cwppvpv8tje11","content":"<p><strong><span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65768/65768 K (Java/Others)<br>Total Submission(s): 1992    Accepted Submission(s): 440<br></span></strong></p>\n<div class=\"panel_title\" align=\"left\">Problem Description</div><br><div class=\"panel_content\">In the war, the intelligence about the enemy is very important. Now, our troop has mastered the situation of the enemy’s war zones, and known that these war zones can communicate to each other directly or indirectly through the network. We also know the enemy is going to build a new communication line to strengthen their communication network. Our task is to destroy their communication network, so that some of their war zones can’t communicate. Each line has its “cost of destroy”. If we want to destroy a line, we must spend the “cost of destroy” of this line. We want to finish this task using the least cost, but our enemy is very clever. Now, we know the network they have already built, but we know nothing about the new line which our enemy is going to build. In this condition, your task is to find the minimum cost that no matter where our enemy builds the new line, you can destroy it using the fixed money. Please give the minimum cost. For efficiency, we can only destroy one communication line.</div><br><a id=\"more\"></a><br><div class=\"panel_bottom\"></div><br>&nbsp;<br><div class=\"panel_title\" align=\"left\">Input</div><br><div class=\"panel_content\">The input contains several cases. For each cases, the first line contains two positive integers n, m (1&lt;=n&lt;=10000, 0&lt;=m&lt;=100000) standing for the number of the enemy’s war zones (numbered from 1 to n), and the number of lines that our enemy has already build. Then m lines follow. For each line there are three positive integer a, b, c (1&lt;=a, b&lt;=n, 1&lt;=c&lt;=100000), meaning between war zone A and war zone B there is a communication line with the “cost of destroy “ c.</div><br><div class=\"panel_bottom\"></div><br>&nbsp;<br><div class=\"panel_title\" align=\"left\">Output</div><br><div class=\"panel_content\">For each case, if the task can be finished output the minimum cost, or output ‐1.</div><br><div class=\"panel_bottom\"></div><br>&nbsp;<br><div class=\"panel_title\" align=\"left\">Sample Input</div><br><div class=\"panel_content\"><br><div style=\"font-family: Courier New,Courier,monospace;\">3 2 1 2 1 2 3 2 4 3 1 2 1 1 3 2 1 4 3</div><br></div><br><div class=\"panel_bottom\"></div><br>&nbsp;<br><div class=\"panel_title\" align=\"left\">Sample Output</div><br><div class=\"panel_content\"><br><div style=\"font-family: Courier New,Courier,monospace;\">-1 3<br><div style=\"font-family: Times New Roman; font-size: 14px; background-color: f4fbff; border: #B7CBFF 1px dashed; padding: 6px;\"><br><div style=\"font-family: Arial; font-weight: bold; color: #7ca9ed; border-bottom: #B7CBFF 1px dashed;\"><em>Hint</em></div><br>For the second sample input: our enemy may build line 2 to 3, 2 to 4, 3 to 4. If they build line 2 to 3, we will destroy line 1 to 4, cost 3. If they build line 2 to 4, we will destroy line 1 to 3, cost 2. If they build line 3 to 4, we will destroy line 1 to 2, cost 1. So, if we want to make sure that we can destroy successfully, the minimum cost is 3.<br><br></div><br>&nbsp;<br><br></div><br></div><br><div class=\"panel_bottom\"></div><br>&nbsp;<br><div class=\"panel_title\" align=\"left\">Source</div><br><div class=\"panel_content\"><a href=\"http://acm.hdu.edu.cn/search.php?field=problem&amp;key=The%2036th%20ACM/ICPC%20Asia%20Regional%20Dalian%20Site%20%E2%80%94%E2%80%94%20Online%20Contest&amp;source=1&amp;searchmode=source\" target=\"_blank\" rel=\"external\"> The 36th ACM/ICPC Asia Regional Dalian Site —— Online Contest </a></div><br><div class=\"panel_content\"></div><br><div class=\"panel_content\"></div><br><div class=\"panel_content\">求无向图边双连通分量缩点，然后DP求第二长边。</div><br><div class=\"panel_content\"><br><pre class=\"EnlighterJSRAW\" data-enlighter-language=\"null\">//#pragma comment(linker, “/STACK:1024000000,1024000000”)//C++加栈<br>#include<br>#include<br>#include<br>#include<br>#include<br>#include<br>#include<br>#include<map><br>#include<br>#include<br>#include<br>using namespace std;<br>#if defined (_WIN32) || defined (<strong>WIN32) || defined (WIN32) || defined (</strong>WIN32<strong>)<br>#define LL </strong>int64<br>#define LLS “%” “I” “6” “4” “d”<br>#define LLU “%” “I” “6” “4” “u”<br>#define LL_MAX _I64_MAX<br><br>#else<br>#define LL long long<br>#define LLS “%” “l” “l” “d”<br>#define LLU “%” “l” “l” “u”<br>#define LL_MAX _I64_MAX<br>#endif<br>#define N 10005<br>#define M 100005<br>int n, m;<br>const int inf = ~0u &gt;&gt; 1;<br>const LL lnf = ~0ull &gt;&gt; 1;<br>struct edge {<br>    int v, w, nxt;<br>    bool mark;<br>} e[M &lt;&lt; 1];<br>struct bridge {<br>    int u, v, w;<br>    bridge(int u, int v, int w) {<br>        this-&gt;u = u;<br>        this-&gt;w = w;<br>        this-&gt;v = v;<br>    }<br>};<br>int pos, head[N];<br>int top, stk[N];<br>int pre[N], dfs_clock, belong[N], bcnt;<br>vector brg;<br>void InitEdge() {<br>    memset(head, -1, sizeof(head));<br>    pos = 0;<br>}<br>void add(int u, int v, int w) {<br>    e[pos].v = v;<br>    e[pos].w = w;<br>    e[pos].nxt = head[u];<br>    head[u] = pos++;<br>}<br>int dfs(int u,int fa) {<br>    int lowu = pre[u] = ++dfs_clock;<br>    stk[top++] = u;<br>    bool vis=true;<br>    for (int i = head[u]; ~i; i = e[i].nxt) {<br>        int v = e[i].v;<br>        if(v==fa &amp;&amp; vis){<br>            vis=false;//重边<br>            continue;<br>        }<br>        if (!pre[v]) {<br>            int lowv = dfs(v,u);<br>            lowu = min(lowu, lowv);<br>            if (lowv &gt; pre[u]) { //u-v为桥<br>                brg.push_back(bridge(u, v, e[i].w));<br>            }<br>        } else lowu = min(lowu, pre[v]);<br>    }<br>    if (pre[u] == lowu) {<br>        bcnt++;<br>        do {<br>            belong[stk[–top]] = bcnt;<br>        } while (stk[top] != u);<br>    }<br>    return lowu;<br>}<br>void tarjan() {<br>    top = bcnt = dfs_clock = 0;<br>    memset(pre, 0, sizeof(pre));<br>    memset(belong, 0, sizeof(belong));<br>    brg.clear();<br>    for (int i = 1; i &lt;= n; i++) {<br>        if (!pre[i])dfs(i,-1);<br>    }<br>}<br>void rebuild() { //根据桥来缩点重构图<br>    InitEdge();<br>    for (int i = 0; i &lt; (int) brg.size(); i++) {<br>        int u = belong[brg[i].u];<br>        int v = belong[brg[i].v];<br>        int w = brg[i].w;<br>        add(u, v, w);<br>        add(v, u, w);<br>    }<br>}<br>int res;<br>int DP(int u, int fa) {<br>    int Min = inf;<br>    for (int i = head[u]; ~i; i = e[i].nxt) {<br>        int v = e[i].v;<br>        if (v == fa)continue;<br>        int w = DP(v, u);<br>        w = min(w, e[i].w);<br>        if (Min &gt; w) {<br>            res = min(res, Min);<br>            Min = w;<br>        } else res = min(res, w);<br>    }<br>    return Min;<br>}<br>int main() {<br>    while (~scanf(“%d%d”, &amp;n, &amp;m)) {<br>        int u, v, w;<br>        InitEdge();<br>        for (int i = 0; i &lt; m; i++) {<br>            scanf(“%d%d%d”, &amp;u, &amp;v, &amp;w);<br>            add(u, v, w);<br>            add(v, u, w);<br>        }<br>        tarjan();<br>        rebuild();<br>        bridge minbrg(-1, -1, inf);<br>        for (int i = 0; i &lt; (int) brg.size(); i++) {<br>            if (brg[i].w &lt; minbrg.w) {<br>                minbrg = brg[i];<br>            }<br>        }<br>        res = inf;<br>        DP(belong[minbrg.u], belong[minbrg.v]);<br>        DP(belong[minbrg.v], belong[minbrg.u]);<br>        if(res==inf)res=-1;<br>        printf(“%d\\n”, res);<br>    }<br>}<br></map></pre><br></div>","excerpt":"<p><strong><span style=\"font-family: Arial; font-size: 12px; font-weight: bold; color: green;\">Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65768/65768 K (Java/Others)<br>Total Submission(s): 1992    Accepted Submission(s): 440<br></span></strong></p>\n<div class=\"panel_title\" align=\"left\">Problem Description</div><br><div class=\"panel_content\">In the war, the intelligence about the enemy is very important. Now, our troop has mastered the situation of the enemy’s war zones, and known that these war zones can communicate to each other directly or indirectly through the network. We also know the enemy is going to build a new communication line to strengthen their communication network. Our task is to destroy their communication network, so that some of their war zones can’t communicate. Each line has its “cost of destroy”. If we want to destroy a line, we must spend the “cost of destroy” of this line. We want to finish this task using the least cost, but our enemy is very clever. Now, we know the network they have already built, but we know nothing about the new line which our enemy is going to build. In this condition, your task is to find the minimum cost that no matter where our enemy builds the new line, you can destroy it using the fixed money. Please give the minimum cost. For efficiency, we can only destroy one communication line.</div><br>","more":"<br><div class=\"panel_bottom\"></div><br>&nbsp;<br><div class=\"panel_title\" align=\"left\">Input</div><br><div class=\"panel_content\">The input contains several cases. For each cases, the first line contains two positive integers n, m (1&lt;=n&lt;=10000, 0&lt;=m&lt;=100000) standing for the number of the enemy’s war zones (numbered from 1 to n), and the number of lines that our enemy has already build. Then m lines follow. For each line there are three positive integer a, b, c (1&lt;=a, b&lt;=n, 1&lt;=c&lt;=100000), meaning between war zone A and war zone B there is a communication line with the “cost of destroy “ c.</div><br><div class=\"panel_bottom\"></div><br>&nbsp;<br><div class=\"panel_title\" align=\"left\">Output</div><br><div class=\"panel_content\">For each case, if the task can be finished output the minimum cost, or output ‐1.</div><br><div class=\"panel_bottom\"></div><br>&nbsp;<br><div class=\"panel_title\" align=\"left\">Sample Input</div><br><div class=\"panel_content\"><br><div style=\"font-family: Courier New,Courier,monospace;\">3 2 1 2 1 2 3 2 4 3 1 2 1 1 3 2 1 4 3</div><br></div><br><div class=\"panel_bottom\"></div><br>&nbsp;<br><div class=\"panel_title\" align=\"left\">Sample Output</div><br><div class=\"panel_content\"><br><div style=\"font-family: Courier New,Courier,monospace;\">-1 3<br><div style=\"font-family: Times New Roman; font-size: 14px; background-color: f4fbff; border: #B7CBFF 1px dashed; padding: 6px;\"><br><div style=\"font-family: Arial; font-weight: bold; color: #7ca9ed; border-bottom: #B7CBFF 1px dashed;\"><em>Hint</em></div><br>For the second sample input: our enemy may build line 2 to 3, 2 to 4, 3 to 4. If they build line 2 to 3, we will destroy line 1 to 4, cost 3. If they build line 2 to 4, we will destroy line 1 to 3, cost 2. If they build line 3 to 4, we will destroy line 1 to 2, cost 1. So, if we want to make sure that we can destroy successfully, the minimum cost is 3.<br><br></div><br>&nbsp;<br><br></div><br></div><br><div class=\"panel_bottom\"></div><br>&nbsp;<br><div class=\"panel_title\" align=\"left\">Source</div><br><div class=\"panel_content\"><a href=\"http://acm.hdu.edu.cn/search.php?field=problem&amp;key=The%2036th%20ACM/ICPC%20Asia%20Regional%20Dalian%20Site%20%E2%80%94%E2%80%94%20Online%20Contest&amp;source=1&amp;searchmode=source\"> The 36th ACM/ICPC Asia Regional Dalian Site —— Online Contest </a></div><br><div class=\"panel_content\"></div><br><div class=\"panel_content\"></div><br><div class=\"panel_content\">求无向图边双连通分量缩点，然后DP求第二长边。</div><br><div class=\"panel_content\"><br><pre class=\"EnlighterJSRAW\" data-enlighter-language=\"null\">//#pragma comment(linker, “/STACK:1024000000,1024000000”)//C++加栈<br>#include<br>#include<br>#include<br>#include<br>#include<br>#include<br>#include<br>#include<map><br>#include<br>#include<br>#include<br>using namespace std;<br>#if defined (_WIN32) || defined (<strong>WIN32) || defined (WIN32) || defined (</strong>WIN32<strong>)<br>#define LL </strong>int64<br>#define LLS “%” “I” “6” “4” “d”<br>#define LLU “%” “I” “6” “4” “u”<br>#define LL_MAX _I64_MAX<br><br>#else<br>#define LL long long<br>#define LLS “%” “l” “l” “d”<br>#define LLU “%” “l” “l” “u”<br>#define LL_MAX _I64_MAX<br>#endif<br>#define N 10005<br>#define M 100005<br>int n, m;<br>const int inf = ~0u &gt;&gt; 1;<br>const LL lnf = ~0ull &gt;&gt; 1;<br>struct edge {<br>    int v, w, nxt;<br>    bool mark;<br>} e[M &lt;&lt; 1];<br>struct bridge {<br>    int u, v, w;<br>    bridge(int u, int v, int w) {<br>        this-&gt;u = u;<br>        this-&gt;w = w;<br>        this-&gt;v = v;<br>    }<br>};<br>int pos, head[N];<br>int top, stk[N];<br>int pre[N], dfs_clock, belong[N], bcnt;<br>vector brg;<br>void InitEdge() {<br>    memset(head, -1, sizeof(head));<br>    pos = 0;<br>}<br>void add(int u, int v, int w) {<br>    e[pos].v = v;<br>    e[pos].w = w;<br>    e[pos].nxt = head[u];<br>    head[u] = pos++;<br>}<br>int dfs(int u,int fa) {<br>    int lowu = pre[u] = ++dfs_clock;<br>    stk[top++] = u;<br>    bool vis=true;<br>    for (int i = head[u]; ~i; i = e[i].nxt) {<br>        int v = e[i].v;<br>        if(v==fa &amp;&amp; vis){<br>            vis=false;//重边<br>            continue;<br>        }<br>        if (!pre[v]) {<br>            int lowv = dfs(v,u);<br>            lowu = min(lowu, lowv);<br>            if (lowv &gt; pre[u]) { //u-v为桥<br>                brg.push_back(bridge(u, v, e[i].w));<br>            }<br>        } else lowu = min(lowu, pre[v]);<br>    }<br>    if (pre[u] == lowu) {<br>        bcnt++;<br>        do {<br>            belong[stk[–top]] = bcnt;<br>        } while (stk[top] != u);<br>    }<br>    return lowu;<br>}<br>void tarjan() {<br>    top = bcnt = dfs_clock = 0;<br>    memset(pre, 0, sizeof(pre));<br>    memset(belong, 0, sizeof(belong));<br>    brg.clear();<br>    for (int i = 1; i &lt;= n; i++) {<br>        if (!pre[i])dfs(i,-1);<br>    }<br>}<br>void rebuild() { //根据桥来缩点重构图<br>    InitEdge();<br>    for (int i = 0; i &lt; (int) brg.size(); i++) {<br>        int u = belong[brg[i].u];<br>        int v = belong[brg[i].v];<br>        int w = brg[i].w;<br>        add(u, v, w);<br>        add(v, u, w);<br>    }<br>}<br>int res;<br>int DP(int u, int fa) {<br>    int Min = inf;<br>    for (int i = head[u]; ~i; i = e[i].nxt) {<br>        int v = e[i].v;<br>        if (v == fa)continue;<br>        int w = DP(v, u);<br>        w = min(w, e[i].w);<br>        if (Min &gt; w) {<br>            res = min(res, Min);<br>            Min = w;<br>        } else res = min(res, w);<br>    }<br>    return Min;<br>}<br>int main() {<br>    while (~scanf(“%d%d”, &amp;n, &amp;m)) {<br>        int u, v, w;<br>        InitEdge();<br>        for (int i = 0; i &lt; m; i++) {<br>            scanf(“%d%d%d”, &amp;u, &amp;v, &amp;w);<br>            add(u, v, w);<br>            add(v, u, w);<br>        }<br>        tarjan();<br>        rebuild();<br>        bridge minbrg(-1, -1, inf);<br>        for (int i = 0; i &lt; (int) brg.size(); i++) {<br>            if (brg[i].w &lt; minbrg.w) {<br>                minbrg = brg[i];<br>            }<br>        }<br>        res = inf;<br>        DP(belong[minbrg.u], belong[minbrg.v]);<br>        DP(belong[minbrg.v], belong[minbrg.u]);<br>        if(res==inf)res=-1;<br>        printf(“%d\\n”, res);<br>    }<br>}<br></pre><br></div>"},{"title":"neutron源码分析","date":"2016-10-28T06:52:02.000Z","_content":"## 消息总线\nOpenstack各项目之间通过RESTful API进行通信；而项目内部不同服务进程则需要通过消息总线通信。关于消息总线的实现，包含在Openstack.oslo.messaging库中。\n### RPC\n远程过程调用，一个服务进程可以调用其他远程服务进程的方法，有两种方式：\n- call 远程方法会被同步执行，调用者会阻塞直到取得返回结果。\n- cast 远程方法会被异步执行，调用者需要通过其他方式查询这次远程调用的结果。\n\n\n### 事件通知(Event Notification)\n服务可以把事件通知发到消息总线上，该消息总线上所有对此类事件感兴趣的服务进程，都可以获得次事件通知并进行处理。处理结果不会返回事件发送者。\n\n### AMQP\nAMQP是一个异步消息传递所使用的开放的应用层协议规范。包括导向、队列、路由、可靠性和安全性。不同的AMQP实现可以进行相互操作。\n所有消息都有一个routing key,所有Queue都有一个binding key。生产者将消息发送给Exchange,然后Exchange根据这两个key把消息送到相匹配的Queue中。不同类型的Exchange有不同的匹配算法。\n<!--more-->\n\n|类型|说明|\n|:---|:---|\n|Direct|binding key和routing key必须完全一样，不支持通配符|\n|Topic|同Direct类型，但是支持通配符，\"*\"匹配单字，“#”匹配零个或多个单字，单字之间由“.”来分割|\n|Fanout|忽略binding key和routing key，广播式路由|\n\n\n## WSGI\nWSGI 是一个连接服务端和应用端的接口。WSGI把Web组件分为三部分：\n- WSGI Server\n- WSGI Middleware\n- WSGI Application\n\nAn Application must return an iterable object.\n```python\ndef application(environ,start_response):\n   start_response('200 Ok',[('Content-Type','text/plain')])\n   yield 'Hello World\\n'\n```\n- `environ`:一个dict，包括CGI中定义的环境变量以及7个WSGI所定义的环境变量：wsgi.version,wsgi_input...\n- `start_response`: 回调函数，要返回一个write(data)对象，用作兼容现有的特殊框架，一般返回None\n\n### Paste.Deploy\nPaste Deploy通过api-paste.ini配置\nPaste配置文件分为多个section，每个section以`type`:`name`的格式命名。\n（书上P99）\n### WebOb\n对WSGI的封装，包含：\n- `webob.Request` 对WSGI的environ的封装\n- `webob.Response` 对WSGI响应的封装 \n- `webob.exc` 对HTTP错误代码的封装\n\nWebob提供了`webob.dec.wsgify`的decorator，可以快速开发application\n```python\n# 继承自webob.Request\nclass MyRequest(webob.Request): \n    @property\n    def is_local(self):\n        return self.remote_addr == '127.0.0.1'\n\n\n@wsgify(RequestClass=MyRequest) \ndef myfunc(req):\n    if req.is_local:\n        return Response('hi!')\n    else:\n        raise webob.exc.HTTPForbidden\n```\n## Eventlet\nOpenstack的协程模块\n### 协程\n与线程类似，拥有独立的栈和局部变量，但是无法同时执行，(Compare To: Javascript callback)\n### GreenThread\n```python\nimport eventlet\ndef my_func(param):\n    # do something in coroutine\n    return param\ngt = eventlet.spawn(my_func,param)\nresult = gt.wait()\n```\n`eventlet.spawn`只是创建一个协程并不立即执行，直到主线程运行到`gt.wait()`时才开始进入调度序列。\n### Monkey Path\n实现协程需要使用Patch的方式对Python的网络相关的标准库进行改写，这个patch就叫`monkey_patch`。\nMonkey Patch是大部分使用Eventlet函数库之前需要进行的初始化工作\n```python\n# ceilometer/cmd/__init__.py\nimport eventlet\n# patch socket,select,thread三个模块\neventlet.monkey_patch(socket=True,select=True,thread=True)\n```\n## Oslo\nOpenstack 通用库\n### Cliff\n构建命令行程序\nDEMO: <https://github.com/openstack/cliff/tree/master/demoapp>\n\n### oslo.config\n解析命令行和配置文件中的配置选项（书上P111）\n```python\nfrom oslo.config import cfg\nconf(sys.argv[1:],project=`xyz`) # 初始化，使得oslo.config能够正常解析配置文件和命令行选项\nrabbit_group = cfg.OptGroup(name='rabbit',\n                            title='RabbitMQ options')\n\nrabbit_host_opt = cfg.StrOpt('host',\n                             default='localhost',\n                             help='IP/hostname to listen on.'),\nrabbit_port_opt = cfg.PortOpt('port',\n                              default=5672,\n                              help='Port number to listen on.')\n\ndef register_rabbit_opts(conf):\n    conf.register_group(rabbit_group)\n    # options can be registered under a group in either of these ways:\n    conf.register_opt(rabbit_host_opt, group=rabbit_group)\n    conf.register_opt(rabbit_port_opt, group='rabbit')\n```\n如果没有指定group，则选项默认放在[DEFAULT]组下\n```ini\n# glance-api.conf:\n  [DEFAULT]\n  bind_port = 9292\n  # ...\n\n  [rabbit]\n  host = localhost\n  port = 5672\n  use_ssl = False\n  userid = guest\n  password = guest\n  virtual_host = /\n```\n从命令行中设置conf，需要使用使用‘-’连接groupname和optionname\n```shell\n--rabbit-host localhost --rabbit-port 9999\n```\n### oslo.db\nSQLAlchemy数据库模型的抽象\n### oslo.i18n\n是对Python gettext的封装，主要用于字符串翻译和国际化\n### oslo.messaging\nOpenstack各项目使用RPC和事件通知的统一的接口。其中包括下面4个对象。\n#### Transport\n传输层，主要实现RPC底层的通信，支持rabbit、qpid、zmq三种协议。可以通过URL来指定不同的transport的实现。\n```\ntransport://user:pass@host1:port[,hostN:portN]/virtual_host\n```\n#### Target\n封装了指定某一消息最终目的地的所有信息\n#### Server\n即服务端，创建一个Server对象需要指定Transport、Target、endpoints(包含多组可被远程调用的方法，比如某一资源包含CUID四个操作）\n#### RPC Client\n即客户端，一个RPC Client可以调用RPC Server上的方法。\n#### Notifier\nNotifier是一个用来发送通知消息的对象。格式如下：\n```javscript\n{\n    message_id:six_text_type(uuid.uuid4()), #消息id号\n    publisher_id:'computer.host1',#发送者id\n    timestamp:timeutils.utcnow(),#时间戳\n    priority:'WARN', # 通知优先级\n    event_type:'compute.create_instance',#通知类型\n    payload:{'instance_id':12,...} #通知内容\n}\n```\n#### Notifier Listener\n消息监听者，跟Server类似，可以暴露多个endpoint，每个endpoint中也可以包含多种方法，但是它们只是对应者不同的消息优先级。（P118）\n\n\n","source":"_posts/neutron-code.md","raw":"---\ntitle: neutron源码分析\ndate: 2016-10-28 14:52:02\ntags: [openstack,neutron]\n---\n## 消息总线\nOpenstack各项目之间通过RESTful API进行通信；而项目内部不同服务进程则需要通过消息总线通信。关于消息总线的实现，包含在Openstack.oslo.messaging库中。\n### RPC\n远程过程调用，一个服务进程可以调用其他远程服务进程的方法，有两种方式：\n- call 远程方法会被同步执行，调用者会阻塞直到取得返回结果。\n- cast 远程方法会被异步执行，调用者需要通过其他方式查询这次远程调用的结果。\n\n\n### 事件通知(Event Notification)\n服务可以把事件通知发到消息总线上，该消息总线上所有对此类事件感兴趣的服务进程，都可以获得次事件通知并进行处理。处理结果不会返回事件发送者。\n\n### AMQP\nAMQP是一个异步消息传递所使用的开放的应用层协议规范。包括导向、队列、路由、可靠性和安全性。不同的AMQP实现可以进行相互操作。\n所有消息都有一个routing key,所有Queue都有一个binding key。生产者将消息发送给Exchange,然后Exchange根据这两个key把消息送到相匹配的Queue中。不同类型的Exchange有不同的匹配算法。\n<!--more-->\n\n|类型|说明|\n|:---|:---|\n|Direct|binding key和routing key必须完全一样，不支持通配符|\n|Topic|同Direct类型，但是支持通配符，\"*\"匹配单字，“#”匹配零个或多个单字，单字之间由“.”来分割|\n|Fanout|忽略binding key和routing key，广播式路由|\n\n\n## WSGI\nWSGI 是一个连接服务端和应用端的接口。WSGI把Web组件分为三部分：\n- WSGI Server\n- WSGI Middleware\n- WSGI Application\n\nAn Application must return an iterable object.\n```python\ndef application(environ,start_response):\n   start_response('200 Ok',[('Content-Type','text/plain')])\n   yield 'Hello World\\n'\n```\n- `environ`:一个dict，包括CGI中定义的环境变量以及7个WSGI所定义的环境变量：wsgi.version,wsgi_input...\n- `start_response`: 回调函数，要返回一个write(data)对象，用作兼容现有的特殊框架，一般返回None\n\n### Paste.Deploy\nPaste Deploy通过api-paste.ini配置\nPaste配置文件分为多个section，每个section以`type`:`name`的格式命名。\n（书上P99）\n### WebOb\n对WSGI的封装，包含：\n- `webob.Request` 对WSGI的environ的封装\n- `webob.Response` 对WSGI响应的封装 \n- `webob.exc` 对HTTP错误代码的封装\n\nWebob提供了`webob.dec.wsgify`的decorator，可以快速开发application\n```python\n# 继承自webob.Request\nclass MyRequest(webob.Request): \n    @property\n    def is_local(self):\n        return self.remote_addr == '127.0.0.1'\n\n\n@wsgify(RequestClass=MyRequest) \ndef myfunc(req):\n    if req.is_local:\n        return Response('hi!')\n    else:\n        raise webob.exc.HTTPForbidden\n```\n## Eventlet\nOpenstack的协程模块\n### 协程\n与线程类似，拥有独立的栈和局部变量，但是无法同时执行，(Compare To: Javascript callback)\n### GreenThread\n```python\nimport eventlet\ndef my_func(param):\n    # do something in coroutine\n    return param\ngt = eventlet.spawn(my_func,param)\nresult = gt.wait()\n```\n`eventlet.spawn`只是创建一个协程并不立即执行，直到主线程运行到`gt.wait()`时才开始进入调度序列。\n### Monkey Path\n实现协程需要使用Patch的方式对Python的网络相关的标准库进行改写，这个patch就叫`monkey_patch`。\nMonkey Patch是大部分使用Eventlet函数库之前需要进行的初始化工作\n```python\n# ceilometer/cmd/__init__.py\nimport eventlet\n# patch socket,select,thread三个模块\neventlet.monkey_patch(socket=True,select=True,thread=True)\n```\n## Oslo\nOpenstack 通用库\n### Cliff\n构建命令行程序\nDEMO: <https://github.com/openstack/cliff/tree/master/demoapp>\n\n### oslo.config\n解析命令行和配置文件中的配置选项（书上P111）\n```python\nfrom oslo.config import cfg\nconf(sys.argv[1:],project=`xyz`) # 初始化，使得oslo.config能够正常解析配置文件和命令行选项\nrabbit_group = cfg.OptGroup(name='rabbit',\n                            title='RabbitMQ options')\n\nrabbit_host_opt = cfg.StrOpt('host',\n                             default='localhost',\n                             help='IP/hostname to listen on.'),\nrabbit_port_opt = cfg.PortOpt('port',\n                              default=5672,\n                              help='Port number to listen on.')\n\ndef register_rabbit_opts(conf):\n    conf.register_group(rabbit_group)\n    # options can be registered under a group in either of these ways:\n    conf.register_opt(rabbit_host_opt, group=rabbit_group)\n    conf.register_opt(rabbit_port_opt, group='rabbit')\n```\n如果没有指定group，则选项默认放在[DEFAULT]组下\n```ini\n# glance-api.conf:\n  [DEFAULT]\n  bind_port = 9292\n  # ...\n\n  [rabbit]\n  host = localhost\n  port = 5672\n  use_ssl = False\n  userid = guest\n  password = guest\n  virtual_host = /\n```\n从命令行中设置conf，需要使用使用‘-’连接groupname和optionname\n```shell\n--rabbit-host localhost --rabbit-port 9999\n```\n### oslo.db\nSQLAlchemy数据库模型的抽象\n### oslo.i18n\n是对Python gettext的封装，主要用于字符串翻译和国际化\n### oslo.messaging\nOpenstack各项目使用RPC和事件通知的统一的接口。其中包括下面4个对象。\n#### Transport\n传输层，主要实现RPC底层的通信，支持rabbit、qpid、zmq三种协议。可以通过URL来指定不同的transport的实现。\n```\ntransport://user:pass@host1:port[,hostN:portN]/virtual_host\n```\n#### Target\n封装了指定某一消息最终目的地的所有信息\n#### Server\n即服务端，创建一个Server对象需要指定Transport、Target、endpoints(包含多组可被远程调用的方法，比如某一资源包含CUID四个操作）\n#### RPC Client\n即客户端，一个RPC Client可以调用RPC Server上的方法。\n#### Notifier\nNotifier是一个用来发送通知消息的对象。格式如下：\n```javscript\n{\n    message_id:six_text_type(uuid.uuid4()), #消息id号\n    publisher_id:'computer.host1',#发送者id\n    timestamp:timeutils.utcnow(),#时间戳\n    priority:'WARN', # 通知优先级\n    event_type:'compute.create_instance',#通知类型\n    payload:{'instance_id':12,...} #通知内容\n}\n```\n#### Notifier Listener\n消息监听者，跟Server类似，可以暴露多个endpoint，每个endpoint中也可以包含多种方法，但是它们只是对应者不同的消息优先级。（P118）\n\n\n","slug":"neutron-code","published":1,"updated":"2017-01-14T17:18:39.772Z","_id":"cixx6u8po005wwppv86ai9itw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"消息总线\"><a href=\"#消息总线\" class=\"headerlink\" title=\"消息总线\"></a>消息总线</h2><p>Openstack各项目之间通过RESTful API进行通信；而项目内部不同服务进程则需要通过消息总线通信。关于消息总线的实现，包含在Openstack.oslo.messaging库中。</p>\n<h3 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h3><p>远程过程调用，一个服务进程可以调用其他远程服务进程的方法，有两种方式：</p>\n<ul>\n<li>call 远程方法会被同步执行，调用者会阻塞直到取得返回结果。</li>\n<li>cast 远程方法会被异步执行，调用者需要通过其他方式查询这次远程调用的结果。</li>\n</ul>\n<h3 id=\"事件通知-Event-Notification\"><a href=\"#事件通知-Event-Notification\" class=\"headerlink\" title=\"事件通知(Event Notification)\"></a>事件通知(Event Notification)</h3><p>服务可以把事件通知发到消息总线上，该消息总线上所有对此类事件感兴趣的服务进程，都可以获得次事件通知并进行处理。处理结果不会返回事件发送者。</p>\n<h3 id=\"AMQP\"><a href=\"#AMQP\" class=\"headerlink\" title=\"AMQP\"></a>AMQP</h3><p>AMQP是一个异步消息传递所使用的开放的应用层协议规范。包括导向、队列、路由、可靠性和安全性。不同的AMQP实现可以进行相互操作。<br>所有消息都有一个routing key,所有Queue都有一个binding key。生产者将消息发送给Exchange,然后Exchange根据这两个key把消息送到相匹配的Queue中。不同类型的Exchange有不同的匹配算法。<br><a id=\"more\"></a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Direct</td>\n<td style=\"text-align:left\">binding key和routing key必须完全一样，不支持通配符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Topic</td>\n<td style=\"text-align:left\">同Direct类型，但是支持通配符，”*”匹配单字，“#”匹配零个或多个单字，单字之间由“.”来分割</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Fanout</td>\n<td style=\"text-align:left\">忽略binding key和routing key，广播式路由</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"WSGI\"><a href=\"#WSGI\" class=\"headerlink\" title=\"WSGI\"></a>WSGI</h2><p>WSGI 是一个连接服务端和应用端的接口。WSGI把Web组件分为三部分：</p>\n<ul>\n<li>WSGI Server</li>\n<li>WSGI Middleware</li>\n<li>WSGI Application</li>\n</ul>\n<p>An Application must return an iterable object.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">application</span><span class=\"params\">(environ,start_response)</span>:</span></div><div class=\"line\">   start_response(<span class=\"string\">'200 Ok'</span>,[(<span class=\"string\">'Content-Type'</span>,<span class=\"string\">'text/plain'</span>)])</div><div class=\"line\">   <span class=\"keyword\">yield</span> <span class=\"string\">'Hello World\\n'</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li><code>environ</code>:一个dict，包括CGI中定义的环境变量以及7个WSGI所定义的环境变量：wsgi.version,wsgi_input…</li>\n<li><code>start_response</code>: 回调函数，要返回一个write(data)对象，用作兼容现有的特殊框架，一般返回None</li>\n</ul>\n<h3 id=\"Paste-Deploy\"><a href=\"#Paste-Deploy\" class=\"headerlink\" title=\"Paste.Deploy\"></a>Paste.Deploy</h3><p>Paste Deploy通过api-paste.ini配置<br>Paste配置文件分为多个section，每个section以<code>type</code>:<code>name</code>的格式命名。<br>（书上P99）</p>\n<h3 id=\"WebOb\"><a href=\"#WebOb\" class=\"headerlink\" title=\"WebOb\"></a>WebOb</h3><p>对WSGI的封装，包含：</p>\n<ul>\n<li><code>webob.Request</code> 对WSGI的environ的封装</li>\n<li><code>webob.Response</code> 对WSGI响应的封装 </li>\n<li><code>webob.exc</code> 对HTTP错误代码的封装</li>\n</ul>\n<p>Webob提供了<code>webob.dec.wsgify</code>的decorator，可以快速开发application<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 继承自webob.Request</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRequest</span><span class=\"params\">(webob.Request)</span>:</span> </div><div class=\"line\"><span class=\"meta\">    @property</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_local</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.remote_addr == <span class=\"string\">'127.0.0.1'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@wsgify(RequestClass=MyRequest) </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfunc</span><span class=\"params\">(req)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> req.is_local:</div><div class=\"line\">        <span class=\"keyword\">return</span> Response(<span class=\"string\">'hi!'</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">raise</span> webob.exc.HTTPForbidden</div></pre></td></tr></table></figure></p>\n<h2 id=\"Eventlet\"><a href=\"#Eventlet\" class=\"headerlink\" title=\"Eventlet\"></a>Eventlet</h2><p>Openstack的协程模块</p>\n<h3 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h3><p>与线程类似，拥有独立的栈和局部变量，但是无法同时执行，(Compare To: Javascript callback)</p>\n<h3 id=\"GreenThread\"><a href=\"#GreenThread\" class=\"headerlink\" title=\"GreenThread\"></a>GreenThread</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> eventlet</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_func</span><span class=\"params\">(param)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># do something in coroutine</span></div><div class=\"line\">    <span class=\"keyword\">return</span> param</div><div class=\"line\">gt = eventlet.spawn(my_func,param)</div><div class=\"line\">result = gt.wait()</div></pre></td></tr></table></figure>\n<p><code>eventlet.spawn</code>只是创建一个协程并不立即执行，直到主线程运行到<code>gt.wait()</code>时才开始进入调度序列。</p>\n<h3 id=\"Monkey-Path\"><a href=\"#Monkey-Path\" class=\"headerlink\" title=\"Monkey Path\"></a>Monkey Path</h3><p>实现协程需要使用Patch的方式对Python的网络相关的标准库进行改写，这个patch就叫<code>monkey_patch</code>。<br>Monkey Patch是大部分使用Eventlet函数库之前需要进行的初始化工作<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># ceilometer/cmd/__init__.py</span></div><div class=\"line\"><span class=\"keyword\">import</span> eventlet</div><div class=\"line\"><span class=\"comment\"># patch socket,select,thread三个模块</span></div><div class=\"line\">eventlet.monkey_patch(socket=<span class=\"keyword\">True</span>,select=<span class=\"keyword\">True</span>,thread=<span class=\"keyword\">True</span>)</div></pre></td></tr></table></figure></p>\n<h2 id=\"Oslo\"><a href=\"#Oslo\" class=\"headerlink\" title=\"Oslo\"></a>Oslo</h2><p>Openstack 通用库</p>\n<h3 id=\"Cliff\"><a href=\"#Cliff\" class=\"headerlink\" title=\"Cliff\"></a>Cliff</h3><p>构建命令行程序<br>DEMO: <a href=\"https://github.com/openstack/cliff/tree/master/demoapp\" target=\"_blank\" rel=\"external\">https://github.com/openstack/cliff/tree/master/demoapp</a></p>\n<h3 id=\"oslo-config\"><a href=\"#oslo-config\" class=\"headerlink\" title=\"oslo.config\"></a>oslo.config</h3><p>解析命令行和配置文件中的配置选项（书上P111）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> oslo.config <span class=\"keyword\">import</span> cfg</div><div class=\"line\">conf(sys.argv[<span class=\"number\">1</span>:],project=`xyz`) <span class=\"comment\"># 初始化，使得oslo.config能够正常解析配置文件和命令行选项</span></div><div class=\"line\">rabbit_group = cfg.OptGroup(name=<span class=\"string\">'rabbit'</span>,</div><div class=\"line\">                            title=<span class=\"string\">'RabbitMQ options'</span>)</div><div class=\"line\"></div><div class=\"line\">rabbit_host_opt = cfg.StrOpt(<span class=\"string\">'host'</span>,</div><div class=\"line\">                             default=<span class=\"string\">'localhost'</span>,</div><div class=\"line\">                             help=<span class=\"string\">'IP/hostname to listen on.'</span>),</div><div class=\"line\">rabbit_port_opt = cfg.PortOpt(<span class=\"string\">'port'</span>,</div><div class=\"line\">                              default=<span class=\"number\">5672</span>,</div><div class=\"line\">                              help=<span class=\"string\">'Port number to listen on.'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register_rabbit_opts</span><span class=\"params\">(conf)</span>:</span></div><div class=\"line\">    conf.register_group(rabbit_group)</div><div class=\"line\">    <span class=\"comment\"># options can be registered under a group in either of these ways:</span></div><div class=\"line\">    conf.register_opt(rabbit_host_opt, group=rabbit_group)</div><div class=\"line\">    conf.register_opt(rabbit_port_opt, group=<span class=\"string\">'rabbit'</span>)</div></pre></td></tr></table></figure></p>\n<p>如果没有指定group，则选项默认放在[DEFAULT]组下<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># glance-api.conf:</div><div class=\"line\">  [DEFAULT]</div><div class=\"line\">  bind_port = 9292</div><div class=\"line\">  # ...</div><div class=\"line\"></div><div class=\"line\">  [rabbit]</div><div class=\"line\">  host = localhost</div><div class=\"line\">  port = 5672</div><div class=\"line\">  use_ssl = False</div><div class=\"line\">  userid = guest</div><div class=\"line\">  password = guest</div><div class=\"line\">  virtual_host = /</div></pre></td></tr></table></figure></p>\n<p>从命令行中设置conf，需要使用使用‘-’连接groupname和optionname<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">--rabbit-host localhost --rabbit-port 9999</div></pre></td></tr></table></figure></p>\n<h3 id=\"oslo-db\"><a href=\"#oslo-db\" class=\"headerlink\" title=\"oslo.db\"></a>oslo.db</h3><p>SQLAlchemy数据库模型的抽象</p>\n<h3 id=\"oslo-i18n\"><a href=\"#oslo-i18n\" class=\"headerlink\" title=\"oslo.i18n\"></a>oslo.i18n</h3><p>是对Python gettext的封装，主要用于字符串翻译和国际化</p>\n<h3 id=\"oslo-messaging\"><a href=\"#oslo-messaging\" class=\"headerlink\" title=\"oslo.messaging\"></a>oslo.messaging</h3><p>Openstack各项目使用RPC和事件通知的统一的接口。其中包括下面4个对象。</p>\n<h4 id=\"Transport\"><a href=\"#Transport\" class=\"headerlink\" title=\"Transport\"></a>Transport</h4><p>传输层，主要实现RPC底层的通信，支持rabbit、qpid、zmq三种协议。可以通过URL来指定不同的transport的实现。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">transport://user:pass@host1:port[,hostN:portN]/virtual_host</div></pre></td></tr></table></figure></p>\n<h4 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"Target\"></a>Target</h4><p>封装了指定某一消息最终目的地的所有信息</p>\n<h4 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h4><p>即服务端，创建一个Server对象需要指定Transport、Target、endpoints(包含多组可被远程调用的方法，比如某一资源包含CUID四个操作）</p>\n<h4 id=\"RPC-Client\"><a href=\"#RPC-Client\" class=\"headerlink\" title=\"RPC Client\"></a>RPC Client</h4><p>即客户端，一个RPC Client可以调用RPC Server上的方法。</p>\n<h4 id=\"Notifier\"><a href=\"#Notifier\" class=\"headerlink\" title=\"Notifier\"></a>Notifier</h4><p>Notifier是一个用来发送通知消息的对象。格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    message_id:six_text_type(uuid.uuid4()), #消息id号</div><div class=\"line\">    publisher_id:&apos;computer.host1&apos;,#发送者id</div><div class=\"line\">    timestamp:timeutils.utcnow(),#时间戳</div><div class=\"line\">    priority:&apos;WARN&apos;, # 通知优先级</div><div class=\"line\">    event_type:&apos;compute.create_instance&apos;,#通知类型</div><div class=\"line\">    payload:&#123;&apos;instance_id&apos;:12,...&#125; #通知内容</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Notifier-Listener\"><a href=\"#Notifier-Listener\" class=\"headerlink\" title=\"Notifier Listener\"></a>Notifier Listener</h4><p>消息监听者，跟Server类似，可以暴露多个endpoint，每个endpoint中也可以包含多种方法，但是它们只是对应者不同的消息优先级。（P118）</p>\n","excerpt":"<h2 id=\"消息总线\"><a href=\"#消息总线\" class=\"headerlink\" title=\"消息总线\"></a>消息总线</h2><p>Openstack各项目之间通过RESTful API进行通信；而项目内部不同服务进程则需要通过消息总线通信。关于消息总线的实现，包含在Openstack.oslo.messaging库中。</p>\n<h3 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h3><p>远程过程调用，一个服务进程可以调用其他远程服务进程的方法，有两种方式：</p>\n<ul>\n<li>call 远程方法会被同步执行，调用者会阻塞直到取得返回结果。</li>\n<li>cast 远程方法会被异步执行，调用者需要通过其他方式查询这次远程调用的结果。</li>\n</ul>\n<h3 id=\"事件通知-Event-Notification\"><a href=\"#事件通知-Event-Notification\" class=\"headerlink\" title=\"事件通知(Event Notification)\"></a>事件通知(Event Notification)</h3><p>服务可以把事件通知发到消息总线上，该消息总线上所有对此类事件感兴趣的服务进程，都可以获得次事件通知并进行处理。处理结果不会返回事件发送者。</p>\n<h3 id=\"AMQP\"><a href=\"#AMQP\" class=\"headerlink\" title=\"AMQP\"></a>AMQP</h3><p>AMQP是一个异步消息传递所使用的开放的应用层协议规范。包括导向、队列、路由、可靠性和安全性。不同的AMQP实现可以进行相互操作。<br>所有消息都有一个routing key,所有Queue都有一个binding key。生产者将消息发送给Exchange,然后Exchange根据这两个key把消息送到相匹配的Queue中。不同类型的Exchange有不同的匹配算法。<br>","more":"</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Direct</td>\n<td style=\"text-align:left\">binding key和routing key必须完全一样，不支持通配符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Topic</td>\n<td style=\"text-align:left\">同Direct类型，但是支持通配符，”*”匹配单字，“#”匹配零个或多个单字，单字之间由“.”来分割</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Fanout</td>\n<td style=\"text-align:left\">忽略binding key和routing key，广播式路由</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"WSGI\"><a href=\"#WSGI\" class=\"headerlink\" title=\"WSGI\"></a>WSGI</h2><p>WSGI 是一个连接服务端和应用端的接口。WSGI把Web组件分为三部分：</p>\n<ul>\n<li>WSGI Server</li>\n<li>WSGI Middleware</li>\n<li>WSGI Application</li>\n</ul>\n<p>An Application must return an iterable object.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">application</span><span class=\"params\">(environ,start_response)</span>:</span></div><div class=\"line\">   start_response(<span class=\"string\">'200 Ok'</span>,[(<span class=\"string\">'Content-Type'</span>,<span class=\"string\">'text/plain'</span>)])</div><div class=\"line\">   <span class=\"keyword\">yield</span> <span class=\"string\">'Hello World\\n'</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li><code>environ</code>:一个dict，包括CGI中定义的环境变量以及7个WSGI所定义的环境变量：wsgi.version,wsgi_input…</li>\n<li><code>start_response</code>: 回调函数，要返回一个write(data)对象，用作兼容现有的特殊框架，一般返回None</li>\n</ul>\n<h3 id=\"Paste-Deploy\"><a href=\"#Paste-Deploy\" class=\"headerlink\" title=\"Paste.Deploy\"></a>Paste.Deploy</h3><p>Paste Deploy通过api-paste.ini配置<br>Paste配置文件分为多个section，每个section以<code>type</code>:<code>name</code>的格式命名。<br>（书上P99）</p>\n<h3 id=\"WebOb\"><a href=\"#WebOb\" class=\"headerlink\" title=\"WebOb\"></a>WebOb</h3><p>对WSGI的封装，包含：</p>\n<ul>\n<li><code>webob.Request</code> 对WSGI的environ的封装</li>\n<li><code>webob.Response</code> 对WSGI响应的封装 </li>\n<li><code>webob.exc</code> 对HTTP错误代码的封装</li>\n</ul>\n<p>Webob提供了<code>webob.dec.wsgify</code>的decorator，可以快速开发application<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 继承自webob.Request</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRequest</span><span class=\"params\">(webob.Request)</span>:</span> </div><div class=\"line\"><span class=\"meta\">    @property</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_local</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.remote_addr == <span class=\"string\">'127.0.0.1'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@wsgify(RequestClass=MyRequest) </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfunc</span><span class=\"params\">(req)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> req.is_local:</div><div class=\"line\">        <span class=\"keyword\">return</span> Response(<span class=\"string\">'hi!'</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">raise</span> webob.exc.HTTPForbidden</div></pre></td></tr></table></figure></p>\n<h2 id=\"Eventlet\"><a href=\"#Eventlet\" class=\"headerlink\" title=\"Eventlet\"></a>Eventlet</h2><p>Openstack的协程模块</p>\n<h3 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h3><p>与线程类似，拥有独立的栈和局部变量，但是无法同时执行，(Compare To: Javascript callback)</p>\n<h3 id=\"GreenThread\"><a href=\"#GreenThread\" class=\"headerlink\" title=\"GreenThread\"></a>GreenThread</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> eventlet</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_func</span><span class=\"params\">(param)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># do something in coroutine</span></div><div class=\"line\">    <span class=\"keyword\">return</span> param</div><div class=\"line\">gt = eventlet.spawn(my_func,param)</div><div class=\"line\">result = gt.wait()</div></pre></td></tr></table></figure>\n<p><code>eventlet.spawn</code>只是创建一个协程并不立即执行，直到主线程运行到<code>gt.wait()</code>时才开始进入调度序列。</p>\n<h3 id=\"Monkey-Path\"><a href=\"#Monkey-Path\" class=\"headerlink\" title=\"Monkey Path\"></a>Monkey Path</h3><p>实现协程需要使用Patch的方式对Python的网络相关的标准库进行改写，这个patch就叫<code>monkey_patch</code>。<br>Monkey Patch是大部分使用Eventlet函数库之前需要进行的初始化工作<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># ceilometer/cmd/__init__.py</span></div><div class=\"line\"><span class=\"keyword\">import</span> eventlet</div><div class=\"line\"><span class=\"comment\"># patch socket,select,thread三个模块</span></div><div class=\"line\">eventlet.monkey_patch(socket=<span class=\"keyword\">True</span>,select=<span class=\"keyword\">True</span>,thread=<span class=\"keyword\">True</span>)</div></pre></td></tr></table></figure></p>\n<h2 id=\"Oslo\"><a href=\"#Oslo\" class=\"headerlink\" title=\"Oslo\"></a>Oslo</h2><p>Openstack 通用库</p>\n<h3 id=\"Cliff\"><a href=\"#Cliff\" class=\"headerlink\" title=\"Cliff\"></a>Cliff</h3><p>构建命令行程序<br>DEMO: <a href=\"https://github.com/openstack/cliff/tree/master/demoapp\">https://github.com/openstack/cliff/tree/master/demoapp</a></p>\n<h3 id=\"oslo-config\"><a href=\"#oslo-config\" class=\"headerlink\" title=\"oslo.config\"></a>oslo.config</h3><p>解析命令行和配置文件中的配置选项（书上P111）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> oslo.config <span class=\"keyword\">import</span> cfg</div><div class=\"line\">conf(sys.argv[<span class=\"number\">1</span>:],project=`xyz`) <span class=\"comment\"># 初始化，使得oslo.config能够正常解析配置文件和命令行选项</span></div><div class=\"line\">rabbit_group = cfg.OptGroup(name=<span class=\"string\">'rabbit'</span>,</div><div class=\"line\">                            title=<span class=\"string\">'RabbitMQ options'</span>)</div><div class=\"line\"></div><div class=\"line\">rabbit_host_opt = cfg.StrOpt(<span class=\"string\">'host'</span>,</div><div class=\"line\">                             default=<span class=\"string\">'localhost'</span>,</div><div class=\"line\">                             help=<span class=\"string\">'IP/hostname to listen on.'</span>),</div><div class=\"line\">rabbit_port_opt = cfg.PortOpt(<span class=\"string\">'port'</span>,</div><div class=\"line\">                              default=<span class=\"number\">5672</span>,</div><div class=\"line\">                              help=<span class=\"string\">'Port number to listen on.'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register_rabbit_opts</span><span class=\"params\">(conf)</span>:</span></div><div class=\"line\">    conf.register_group(rabbit_group)</div><div class=\"line\">    <span class=\"comment\"># options can be registered under a group in either of these ways:</span></div><div class=\"line\">    conf.register_opt(rabbit_host_opt, group=rabbit_group)</div><div class=\"line\">    conf.register_opt(rabbit_port_opt, group=<span class=\"string\">'rabbit'</span>)</div></pre></td></tr></table></figure></p>\n<p>如果没有指定group，则选项默认放在[DEFAULT]组下<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># glance-api.conf:</div><div class=\"line\">  [DEFAULT]</div><div class=\"line\">  bind_port = 9292</div><div class=\"line\">  # ...</div><div class=\"line\"></div><div class=\"line\">  [rabbit]</div><div class=\"line\">  host = localhost</div><div class=\"line\">  port = 5672</div><div class=\"line\">  use_ssl = False</div><div class=\"line\">  userid = guest</div><div class=\"line\">  password = guest</div><div class=\"line\">  virtual_host = /</div></pre></td></tr></table></figure></p>\n<p>从命令行中设置conf，需要使用使用‘-’连接groupname和optionname<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">--rabbit-host localhost --rabbit-port 9999</div></pre></td></tr></table></figure></p>\n<h3 id=\"oslo-db\"><a href=\"#oslo-db\" class=\"headerlink\" title=\"oslo.db\"></a>oslo.db</h3><p>SQLAlchemy数据库模型的抽象</p>\n<h3 id=\"oslo-i18n\"><a href=\"#oslo-i18n\" class=\"headerlink\" title=\"oslo.i18n\"></a>oslo.i18n</h3><p>是对Python gettext的封装，主要用于字符串翻译和国际化</p>\n<h3 id=\"oslo-messaging\"><a href=\"#oslo-messaging\" class=\"headerlink\" title=\"oslo.messaging\"></a>oslo.messaging</h3><p>Openstack各项目使用RPC和事件通知的统一的接口。其中包括下面4个对象。</p>\n<h4 id=\"Transport\"><a href=\"#Transport\" class=\"headerlink\" title=\"Transport\"></a>Transport</h4><p>传输层，主要实现RPC底层的通信，支持rabbit、qpid、zmq三种协议。可以通过URL来指定不同的transport的实现。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">transport://user:pass@host1:port[,hostN:portN]/virtual_host</div></pre></td></tr></table></figure></p>\n<h4 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"Target\"></a>Target</h4><p>封装了指定某一消息最终目的地的所有信息</p>\n<h4 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h4><p>即服务端，创建一个Server对象需要指定Transport、Target、endpoints(包含多组可被远程调用的方法，比如某一资源包含CUID四个操作）</p>\n<h4 id=\"RPC-Client\"><a href=\"#RPC-Client\" class=\"headerlink\" title=\"RPC Client\"></a>RPC Client</h4><p>即客户端，一个RPC Client可以调用RPC Server上的方法。</p>\n<h4 id=\"Notifier\"><a href=\"#Notifier\" class=\"headerlink\" title=\"Notifier\"></a>Notifier</h4><p>Notifier是一个用来发送通知消息的对象。格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    message_id:six_text_type(uuid.uuid4()), #消息id号</div><div class=\"line\">    publisher_id:&apos;computer.host1&apos;,#发送者id</div><div class=\"line\">    timestamp:timeutils.utcnow(),#时间戳</div><div class=\"line\">    priority:&apos;WARN&apos;, # 通知优先级</div><div class=\"line\">    event_type:&apos;compute.create_instance&apos;,#通知类型</div><div class=\"line\">    payload:&#123;&apos;instance_id&apos;:12,...&#125; #通知内容</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Notifier-Listener\"><a href=\"#Notifier-Listener\" class=\"headerlink\" title=\"Notifier Listener\"></a>Notifier Listener</h4><p>消息监听者，跟Server类似，可以暴露多个endpoint，每个endpoint中也可以包含多种方法，但是它们只是对应者不同的消息优先级。（P118）</p>"}],"PostAsset":[{"_id":"source/_posts/test-asset/test.jpg","slug":"test.jpg","post":"cixx6u8o90029wppvbofct0ii","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cixx6u8mw0008wppvjuz7ufh4","category_id":"cixx6u8mn0004wppv1phwscba","_id":"cixx6u8n1000ewppvhozphd57"},{"post_id":"cixx6u8mg0001wppvs051ofou","category_id":"cixx6u8mn0004wppv1phwscba","_id":"cixx6u8n4000iwppvpw5m9oaj"},{"post_id":"cixx6u8ml0003wppvzjvsf4nk","category_id":"cixx6u8mz000awppvd6cgmsco","_id":"cixx6u8n7000lwppvrz734mg9"},{"post_id":"cixx6u8n2000fwppv97fiwf53","category_id":"cixx6u8mn0004wppv1phwscba","_id":"cixx6u8na000pwppvku93gvc9"},{"post_id":"cixx6u8n4000jwppvy4osdyne","category_id":"cixx6u8mn0004wppv1phwscba","_id":"cixx6u8nd000swppv8rfl3lh2"},{"post_id":"cixx6u8ms0007wppvnvcmx3fy","category_id":"cixx6u8mn0004wppv1phwscba","_id":"cixx6u8ng000xwppvv6jmwgwc"},{"post_id":"cixx6u8n6000kwppvrsx2vlqt","category_id":"cixx6u8mz000awppvd6cgmsco","_id":"cixx6u8ni0010wppvg0gn3doz"},{"post_id":"cixx6u8n9000owppv4ou3bz6n","category_id":"cixx6u8mn0004wppv1phwscba","_id":"cixx6u8nj0012wppvdctmnaon"},{"post_id":"cixx6u8my0009wppvffcj6yr0","category_id":"cixx6u8n7000mwppv5rp3sx42","_id":"cixx6u8nm0016wppvdrrhoq6h"},{"post_id":"cixx6u8nb000rwppvn0gcn6bw","category_id":"cixx6u8mn0004wppv1phwscba","_id":"cixx6u8no0018wppv54twpov3"},{"post_id":"cixx6u8ng000wwppv5zgiivro","category_id":"cixx6u8mn0004wppv1phwscba","_id":"cixx6u8ns001cwppv2sd4blg5"},{"post_id":"cixx6u8n0000dwppvylwi9l7f","category_id":"cixx6u8ne000uwppvhw59zwcx","_id":"cixx6u8nu001ewppv0t4h6tis"},{"post_id":"cixx6u8nh000zwppva7frq3qi","category_id":"cixx6u8mn0004wppv1phwscba","_id":"cixx6u8nx001iwppvhnqs9dp2"},{"post_id":"cixx6u8nj0011wppv6x2a509m","category_id":"cixx6u8mn0004wppv1phwscba","_id":"cixx6u8nz001kwppvwy4j7a18"},{"post_id":"cixx6u8nn0017wppvg4ruybxj","category_id":"cixx6u8mn0004wppv1phwscba","_id":"cixx6u8o1001nwppv6j5ulj5w"},{"post_id":"cixx6u8nl0015wppvpk8tyrnp","category_id":"cixx6u8nq001awppvrijhn77n","_id":"cixx6u8o2001rwppv33gnszba"},{"post_id":"cixx6u8nr001bwppv7p04ydbe","category_id":"cixx6u8nw001hwppvahv9l6wl","_id":"cixx6u8o3001uwppvrdqrsqfp"},{"post_id":"cixx6u8o1001mwppvgoxcxcvr","category_id":"cixx6u8mn0004wppv1phwscba","_id":"cixx6u8o6001zwppvp5mvpg8s"},{"post_id":"cixx6u8o2001qwppvn527edb2","category_id":"cixx6u8mn0004wppv1phwscba","_id":"cixx6u8o80022wppv8mpro167"},{"post_id":"cixx6u8ns001dwppva3flf6k2","category_id":"cixx6u8o1001owppvvccx0vew","_id":"cixx6u8o90027wppvwh6z7xwk"},{"post_id":"cixx6u8nw001gwppvngwvcpj2","category_id":"cixx6u8o1001owppvvccx0vew","_id":"cixx6u8ob002awppv9r4qg874"},{"post_id":"cixx6u8o70021wppv38l37c0c","category_id":"cixx6u8o1001owppvvccx0vew","_id":"cixx6u8oc002fwppvr658nc5f"},{"post_id":"cixx6u8nz001jwppvdqmo7y7q","category_id":"cixx6u8o80024wppv5o2xsa03","_id":"cixx6u8of002iwppvbp0hd7zm"},{"post_id":"cixx6u8ob002ewppvba1jybn2","category_id":"cixx6u8mn0004wppv1phwscba","_id":"cixx6u8oh002nwppvidy0i2g1"},{"post_id":"cixx6u8o2001twppv598ghzfc","category_id":"cixx6u8ob002dwppv1ky9dnf8","_id":"cixx6u8oi002rwppvs9g0ozai"},{"post_id":"cixx6u8oh002pwppvu6kolb3s","category_id":"cixx6u8mn0004wppv1phwscba","_id":"cixx6u8ok002xwppvan63hstq"},{"post_id":"cixx6u8o5001ywppvq2qwxl8q","category_id":"cixx6u8o80024wppv5o2xsa03","_id":"cixx6u8ol0032wppvshe94qcm"},{"post_id":"cixx6u8oi002twppv9f7ffnl8","category_id":"cixx6u8mn0004wppv1phwscba","_id":"cixx6u8on0035wppvrpw0es5u"},{"post_id":"cixx6u8oj002wwppvll7hee27","category_id":"cixx6u8mn0004wppv1phwscba","_id":"cixx6u8oo003awppv32b7c9k8"},{"post_id":"cixx6u8o80026wppv5m6cvf3s","category_id":"cixx6u8oj002uwppvy1ontuws","_id":"cixx6u8or003dwppv493s6i7s"},{"post_id":"cixx6u8ok002zwppvkxu9drb9","category_id":"cixx6u8mn0004wppv1phwscba","_id":"cixx6u8ot003gwppv7omjoqbg"},{"post_id":"cixx6u8ol0034wppv5y3el3qe","category_id":"cixx6u8nw001hwppvahv9l6wl","_id":"cixx6u8ou003iwppvccg4ce80"},{"post_id":"cixx6u8oc002hwppv5eueuuzk","category_id":"cixx6u8ol0031wppvw0eihwjo","_id":"cixx6u8ou003lwppvcfoxy74g"},{"post_id":"cixx6u8on0037wppvjzf3lxjb","category_id":"cixx6u8mn0004wppv1phwscba","_id":"cixx6u8ov003nwppvbgpykhft"},{"post_id":"cixx6u8op003cwppvpv8tje11","category_id":"cixx6u8mn0004wppv1phwscba","_id":"cixx6u8ow003qwppvu7ebx9po"},{"post_id":"cixx6u8of002lwppv0mw05om6","category_id":"cixx6u8oo0039wppv6qzc2v7x","_id":"cixx6u8ox003swppvnlg3bajm"}],"PostTag":[{"post_id":"cixx6u8mg0001wppvs051ofou","tag_id":"cixx6u8mq0005wppvztj6wja3","_id":"cixx6u8n0000cwppvv5dtxhg0"},{"post_id":"cixx6u8ml0003wppvzjvsf4nk","tag_id":"cixx6u8mz000bwppvyvqig9du","_id":"cixx6u8nb000qwppvvhjcitsa"},{"post_id":"cixx6u8ml0003wppvzjvsf4nk","tag_id":"cixx6u8n3000hwppv8egj6asx","_id":"cixx6u8nd000twppvqzi1pcpm"},{"post_id":"cixx6u8ms0007wppvnvcmx3fy","tag_id":"cixx6u8n8000nwppv9jfovn7d","_id":"cixx6u8nh000ywppvayd8dxro"},{"post_id":"cixx6u8mw0008wppvjuz7ufh4","tag_id":"cixx6u8nf000vwppv1t8m7t9q","_id":"cixx6u8nl0014wppvc0mxc25c"},{"post_id":"cixx6u8my0009wppvffcj6yr0","tag_id":"cixx6u8nk0013wppvl70whr8v","_id":"cixx6u8o1001pwppv4ha1i6b2"},{"post_id":"cixx6u8my0009wppvffcj6yr0","tag_id":"cixx6u8np0019wppv8g3a83ij","_id":"cixx6u8o2001swppvd1l9hhs5"},{"post_id":"cixx6u8my0009wppvffcj6yr0","tag_id":"cixx6u8nv001fwppvuglg5mb3","_id":"cixx6u8o4001xwppvyoxrb22f"},{"post_id":"cixx6u8nz001jwppvdqmo7y7q","tag_id":"cixx6u8mq0005wppvztj6wja3","_id":"cixx6u8o70020wppvz978uc1w"},{"post_id":"cixx6u8n0000dwppvylwi9l7f","tag_id":"cixx6u8o0001lwppvj5fn7sqm","_id":"cixx6u8o80025wppv3qqw2bh2"},{"post_id":"cixx6u8n2000fwppv97fiwf53","tag_id":"cixx6u8o3001vwppvh0p0aw4u","_id":"cixx6u8o90028wppvexsg2yk7"},{"post_id":"cixx6u8n2000fwppv97fiwf53","tag_id":"cixx6u8mq0005wppvztj6wja3","_id":"cixx6u8ob002cwppvu1ub04ws"},{"post_id":"cixx6u8n4000jwppvy4osdyne","tag_id":"cixx6u8o80023wppv6kbkld3y","_id":"cixx6u8oc002gwppv8cie9mmx"},{"post_id":"cixx6u8ob002ewppvba1jybn2","tag_id":"cixx6u8o3001vwppvh0p0aw4u","_id":"cixx6u8of002jwppvhnumd0wl"},{"post_id":"cixx6u8n6000kwppvrsx2vlqt","tag_id":"cixx6u8mz000bwppvyvqig9du","_id":"cixx6u8oh002owppvl41lxkxc"},{"post_id":"cixx6u8n6000kwppvrsx2vlqt","tag_id":"cixx6u8n3000hwppv8egj6asx","_id":"cixx6u8oi002qwppv7t0oj6m2"},{"post_id":"cixx6u8n6000kwppvrsx2vlqt","tag_id":"cixx6u8ob002bwppvb5v0runc","_id":"cixx6u8oj002vwppvayef6zal"},{"post_id":"cixx6u8n9000owppv4ou3bz6n","tag_id":"cixx6u8o3001vwppvh0p0aw4u","_id":"cixx6u8ok002ywppv0r2f0pps"},{"post_id":"cixx6u8n9000owppv4ou3bz6n","tag_id":"cixx6u8n8000nwppv9jfovn7d","_id":"cixx6u8ol0033wppvn7hzvuwa"},{"post_id":"cixx6u8oj002wwppvll7hee27","tag_id":"cixx6u8n8000nwppv9jfovn7d","_id":"cixx6u8on0036wppvir3cpxtb"},{"post_id":"cixx6u8ok002zwppvkxu9drb9","tag_id":"cixx6u8o3001vwppvh0p0aw4u","_id":"cixx6u8op003bwppv4ert3h05"},{"post_id":"cixx6u8on0037wppvjzf3lxjb","tag_id":"cixx6u8o3001vwppvh0p0aw4u","_id":"cixx6u8or003ewppvbj5jn945"},{"post_id":"cixx6u8on0037wppvjzf3lxjb","tag_id":"cixx6u8mq0005wppvztj6wja3","_id":"cixx6u8ou003hwppvy7n141oz"},{"post_id":"cixx6u8nb000rwppvn0gcn6bw","tag_id":"cixx6u8oi002swppv3evcs2e0","_id":"cixx6u8ou003jwppvjcz4qfoy"},{"post_id":"cixx6u8nb000rwppvn0gcn6bw","tag_id":"cixx6u8nf000vwppv1t8m7t9q","_id":"cixx6u8ou003mwppvb45z1n7e"},{"post_id":"cixx6u8nb000rwppvn0gcn6bw","tag_id":"cixx6u8oo0038wppv68dnxv0h","_id":"cixx6u8ow003owppvldyk3v7i"},{"post_id":"cixx6u8ng000wwppv5zgiivro","tag_id":"cixx6u8nf000vwppv1t8m7t9q","_id":"cixx6u8ow003rwppvx2ok4yi6"},{"post_id":"cixx6u8nh000zwppva7frq3qi","tag_id":"cixx6u8o3001vwppvh0p0aw4u","_id":"cixx6u8ox003twppv08cb56ep"},{"post_id":"cixx6u8nj0011wppv6x2a509m","tag_id":"cixx6u8ow003pwppvvufuk5uq","_id":"cixx6u8ox003vwppvc28cxe01"},{"post_id":"cixx6u8nl0015wppvpk8tyrnp","tag_id":"cixx6u8ox003uwppvf7t1v987","_id":"cixx6u8oy003zwppv9c2paqoj"},{"post_id":"cixx6u8nl0015wppvpk8tyrnp","tag_id":"cixx6u8ox003wwppv6fgfd2pw","_id":"cixx6u8oy0040wppvyg3coyus"},{"post_id":"cixx6u8nl0015wppvpk8tyrnp","tag_id":"cixx6u8ox003xwppvs7mipxmn","_id":"cixx6u8oy0042wppvx4d4659j"},{"post_id":"cixx6u8nn0017wppvg4ruybxj","tag_id":"cixx6u8oy003ywppvk97g84sa","_id":"cixx6u8oz0043wppvbtc1jwgs"},{"post_id":"cixx6u8nr001bwppv7p04ydbe","tag_id":"cixx6u8ox003xwppvs7mipxmn","_id":"cixx6u8oz0046wppvlynnbw4z"},{"post_id":"cixx6u8nr001bwppv7p04ydbe","tag_id":"cixx6u8nv001fwppvuglg5mb3","_id":"cixx6u8oz0047wppv9hieqq7i"},{"post_id":"cixx6u8ns001dwppva3flf6k2","tag_id":"cixx6u8ox003uwppvf7t1v987","_id":"cixx6u8p0004bwppvf5s9zbyg"},{"post_id":"cixx6u8ns001dwppva3flf6k2","tag_id":"cixx6u8oz0048wppvbyz91uof","_id":"cixx6u8p1004cwppvjj0re8jq"},{"post_id":"cixx6u8ns001dwppva3flf6k2","tag_id":"cixx6u8ox003xwppvs7mipxmn","_id":"cixx6u8p1004ewppvh8z0pd6y"},{"post_id":"cixx6u8nw001gwppvngwvcpj2","tag_id":"cixx6u8ox003uwppvf7t1v987","_id":"cixx6u8p2004hwppvmykudy9a"},{"post_id":"cixx6u8nw001gwppvngwvcpj2","tag_id":"cixx6u8oz0048wppvbyz91uof","_id":"cixx6u8p2004iwppvpuylzz9y"},{"post_id":"cixx6u8nw001gwppvngwvcpj2","tag_id":"cixx6u8ox003xwppvs7mipxmn","_id":"cixx6u8p2004kwppvyakcufhl"},{"post_id":"cixx6u8o1001mwppvgoxcxcvr","tag_id":"cixx6u8p1004gwppvrwi4houx","_id":"cixx6u8p5004nwppv5wy4830n"},{"post_id":"cixx6u8o1001mwppvgoxcxcvr","tag_id":"cixx6u8nf000vwppv1t8m7t9q","_id":"cixx6u8p5004owppv5onz0na2"},{"post_id":"cixx6u8o1001mwppvgoxcxcvr","tag_id":"cixx6u8oi002swppv3evcs2e0","_id":"cixx6u8p5004qwppvy8l7hzsp"},{"post_id":"cixx6u8o1001mwppvgoxcxcvr","tag_id":"cixx6u8p2004lwppvkgz2fq6j","_id":"cixx6u8p6004rwppvc6m9xoxh"},{"post_id":"cixx6u8o2001qwppvn527edb2","tag_id":"cixx6u8p1004gwppvrwi4houx","_id":"cixx6u8p6004uwppv6qo40kmw"},{"post_id":"cixx6u8o2001qwppvn527edb2","tag_id":"cixx6u8p5004pwppvwafgsb9u","_id":"cixx6u8p7004vwppvgk4yxhkz"},{"post_id":"cixx6u8o2001qwppvn527edb2","tag_id":"cixx6u8nf000vwppv1t8m7t9q","_id":"cixx6u8p7004xwppv1nc8i7ae"},{"post_id":"cixx6u8o2001qwppvn527edb2","tag_id":"cixx6u8oi002swppv3evcs2e0","_id":"cixx6u8p7004ywppv95kfpghi"},{"post_id":"cixx6u8o2001twppv598ghzfc","tag_id":"cixx6u8p6004twppvhao95ief","_id":"cixx6u8p70050wppvfxhlnjrd"},{"post_id":"cixx6u8o2001twppv598ghzfc","tag_id":"cixx6u8p7004wwppvqlukev14","_id":"cixx6u8p70051wppvtyq0nhw1"},{"post_id":"cixx6u8o5001ywppvq2qwxl8q","tag_id":"cixx6u8p7004zwppvhn8vut50","_id":"cixx6u8p80053wppvuwfnk16c"},{"post_id":"cixx6u8o70021wppv38l37c0c","tag_id":"cixx6u8ox003uwppvf7t1v987","_id":"cixx6u8pb0057wppve4x8yfij"},{"post_id":"cixx6u8o70021wppv38l37c0c","tag_id":"cixx6u8oz0048wppvbyz91uof","_id":"cixx6u8pb0058wppvy8pfddyv"},{"post_id":"cixx6u8o70021wppv38l37c0c","tag_id":"cixx6u8ox003xwppvs7mipxmn","_id":"cixx6u8pb005awppvqwn0d7y0"},{"post_id":"cixx6u8o80026wppv5m6cvf3s","tag_id":"cixx6u8pa0056wppvvdiixwpg","_id":"cixx6u8pb005bwppvbxjbzzat"},{"post_id":"cixx6u8o80026wppv5m6cvf3s","tag_id":"cixx6u8nv001fwppvuglg5mb3","_id":"cixx6u8pc005dwppv7xar3qnt"},{"post_id":"cixx6u8oc002hwppv5eueuuzk","tag_id":"cixx6u8ox003uwppvf7t1v987","_id":"cixx6u8pc005ewppvlzh9hl2b"},{"post_id":"cixx6u8of002lwppv0mw05om6","tag_id":"cixx6u8ox003uwppvf7t1v987","_id":"cixx6u8pe005hwppv9vjji7pn"},{"post_id":"cixx6u8of002lwppv0mw05om6","tag_id":"cixx6u8oz0048wppvbyz91uof","_id":"cixx6u8pe005iwppvixgq5bkz"},{"post_id":"cixx6u8oh002pwppvu6kolb3s","tag_id":"cixx6u8p1004gwppvrwi4houx","_id":"cixx6u8pe005lwppv62b6jb1o"},{"post_id":"cixx6u8oh002pwppvu6kolb3s","tag_id":"cixx6u8nf000vwppv1t8m7t9q","_id":"cixx6u8pf005mwppv3f9uunuw"},{"post_id":"cixx6u8oh002pwppvu6kolb3s","tag_id":"cixx6u8oi002swppv3evcs2e0","_id":"cixx6u8pf005owppvn2re683u"},{"post_id":"cixx6u8oi002twppv9f7ffnl8","tag_id":"cixx6u8pe005kwppvo7gqnpz6","_id":"cixx6u8pf005pwppvdw0km3fu"},{"post_id":"cixx6u8ol0034wppv5y3el3qe","tag_id":"cixx6u8nv001fwppvuglg5mb3","_id":"cixx6u8pf005rwppval31av8c"},{"post_id":"cixx6u8ol0034wppv5y3el3qe","tag_id":"cixx6u8pf005nwppvl9y1nrv6","_id":"cixx6u8pf005swppvapa9yosk"},{"post_id":"cixx6u8op003cwppvpv8tje11","tag_id":"cixx6u8oi002swppv3evcs2e0","_id":"cixx6u8pg005twppvri2p689i"},{"post_id":"cixx6u8op003cwppvpv8tje11","tag_id":"cixx6u8pf005qwppvdqeu723l","_id":"cixx6u8pg005uwppvl0rpawu8"},{"post_id":"cixx6u8op003cwppvpv8tje11","tag_id":"cixx6u8nf000vwppv1t8m7t9q","_id":"cixx6u8pg005vwppv33ri0h4p"},{"post_id":"cixx6u8po005wwppv86ai9itw","tag_id":"cixx6u8pq005xwppvpidf1760","_id":"cixx6u8pq005zwppvie212d9y"},{"post_id":"cixx6u8po005wwppv86ai9itw","tag_id":"cixx6u8pq005ywppv4bwp3yie","_id":"cixx6u8pq0060wppv2tc3aubw"}],"Tag":[{"name":"只言片语","_id":"cixx6u8mq0005wppvztj6wja3"},{"name":"C#","_id":"cixx6u8mz000bwppvyvqig9du"},{"name":"asp.net mvc4","_id":"cixx6u8n3000hwppv8egj6asx"},{"name":"暴力","_id":"cixx6u8n8000nwppv9jfovn7d"},{"name":"图论","_id":"cixx6u8nf000vwppv1t8m7t9q"},{"name":"javascirpt","_id":"cixx6u8nk0013wppvl70whr8v"},{"name":"dom","_id":"cixx6u8np0019wppv8g3a83ij"},{"name":"html","_id":"cixx6u8nv001fwppvuglg5mb3"},{"name":"github","_id":"cixx6u8o0001lwppvj5fn7sqm"},{"name":"数论","_id":"cixx6u8o3001vwppvh0p0aw4u"},{"name":"DP","_id":"cixx6u8o80023wppv6kbkld3y"},{"name":"simplemembership","_id":"cixx6u8ob002bwppvb5v0runc"},{"name":"tarjan","_id":"cixx6u8oi002swppv3evcs2e0"},{"name":"树的直径","_id":"cixx6u8oo0038wppv68dnxv0h"},{"name":"网络流","_id":"cixx6u8ow003pwppvvufuk5uq"},{"name":"linux","_id":"cixx6u8ox003uwppvf7t1v987"},{"name":"桌面","_id":"cixx6u8ox003wwppv6fgfd2pw"},{"name":"美化","_id":"cixx6u8ox003xwppvs7mipxmn"},{"name":"矩阵,暴力","_id":"cixx6u8oy003ywppvk97g84sa"},{"name":"DE/WM","_id":"cixx6u8oz0048wppvbyz91uof"},{"name":"LCA","_id":"cixx6u8p1004gwppvrwi4houx"},{"name":"倍增","_id":"cixx6u8p2004lwppvkgz2fq6j"},{"name":"RMQ","_id":"cixx6u8p5004pwppvwafgsb9u"},{"name":"python","_id":"cixx6u8p6004twppvhao95ief"},{"name":"gtk","_id":"cixx6u8p7004wwppvqlukev14"},{"name":"shadowsocks","_id":"cixx6u8p7004zwppvhn8vut50"},{"name":"sublime text","_id":"cixx6u8pa0056wppvvdiixwpg"},{"name":"组合","_id":"cixx6u8pe005kwppvo7gqnpz6"},{"name":"instantclick","_id":"cixx6u8pf005nwppvl9y1nrv6"},{"name":"树形DP","_id":"cixx6u8pf005qwppvdqeu723l"},{"name":"openstack","_id":"cixx6u8pq005xwppvpidf1760"},{"name":"neutron","_id":"cixx6u8pq005ywppv4bwp3yie"}]}}